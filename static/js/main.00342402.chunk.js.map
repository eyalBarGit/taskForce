{"version":3,"sources":["assets/images/bgs/purple_nature.jpg","assets/images/bgs/mountains.jpg","assets/images/bgs/water.jpg","assets/images/bgs/lake.jpg","assets/images/bgs/boraBora.jpg","assets/images/bgs/sky.jpg","history.js","cmps/BoardList/BoardList.jsx","service/utils.js","service/boardService.js","store/actions/boardActions.js","cmps/ActionForm/ActionForm.jsx","pages/HomePage/HomePage.jsx","store/actions/headerActions.js","cmps/CardDetails/DeleteVerify/DeleteVerify.jsx","cmps/AppHeader/AppHeaderMenu/AppHeaderMenu.jsx","cmps/AppHeader/AppHeader.jsx","cmps/CardDetails/CardLabel/CardLabel.jsx","cmps/CardPreview/CardPreview.jsx","service/cardService.js","store/actions/cardActions.js","cmps/CardList/CardList.jsx","service/listService.js","store/actions/listActions.js","cmps/AddCard/AddCard.jsx","cmps/ListMenu/ListMenu.jsx","cmps/ChangeListTitle/ChangeListTitle.jsx","cmps/ListMenu/MoveList/MoveList.jsx","cmps/List/List.jsx","cmps/BoardBackground/BoardBackground.jsx","cmps/CardDetails/BlackScreen/BlackScreen.jsx","cmps/CardDetails/CardCover/CardCover.jsx","cmps/CardDetails/CopyCard/CopyCard.jsx","cmps/CardDetails/MoveCard/MoveCard.jsx","cmps/ColorPallette/ColorPallette.jsx","cmps/CardDetails/CardCoverMenu/CardCoverMenu.jsx","cmps/CardDetails/RightSideMenu/AddCheckList/AddCheckList.jsx","cmps/CardDetails/LabelsMenu/LabelsMenu.jsx","cmps/CardDetails/RightSideMenu/RightSideMenu.jsx","cmps/ProgressBar/ProgressBar.jsx","cmps/CardDetails/CardCheckList/ItemPreview/ItemPreview.jsx","cmps/CardDetails/CardCheckList/CardCheckList.jsx","cmps/CardDetails/Description/AddDescription/AddDescription.jsx","cmps/CardDetails/Description/Description.jsx","cmps/CardDetails/CardDetails.jsx","cmps/AddList/AddList.jsx","cmps/Board/Board.jsx","App.js","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["module","exports","history","createBrowserHistory","BoardList","props","mainStore","useSelector","state","boards","favBoards","useState","boardList","setBoardList","getAllBoards","useCallback","allBoards","board","currBoard","push","init","useEffect","className","map","key","id","to","alt","src","backgroundImg","name","Object","values","generatePassword","length","charset","retVal","i","n","charAt","Math","floor","random","loadFromStorage","val","localStorage","getItem","JSON","parse","getRandomIntInclusive","min","max","ceil","saveToStorage","setItem","stringify","boardName","a","UTILS","isFav","cards","lists","listOrder","navBarTheme","createdAt","Date","toLocaleDateString","title","content","cardIds","store","start","source","destination","draggableId","newCardIds","Array","from","splice","index","updatedList","finish","startCardIds","newStartList","finishCardIds","newFinishList","newListOrder","createBoard","createCard","createList","dragOutsideList","updateList","dragList","dragInsideList","dispatch","service","data","console","log","_dragInsideList","res","_dragOutsideList","_dragList","newBoard","_createBoard","removeSavedBoard","type","boardToRemove","changeBoardBackground","bgName","_changeBoardBg","setActiveBoard","boardId","activeBoard","_createList","_changeBoardName","ActionForm","placeholder","onSubmitFunc","toggleAdd","currRef","useRef","useForm","register","handleSubmit","current","focus","onSubmit","style","resize","ref","e","autoComplete","onClick","HomePage","useParams","useDispatch","isAddBoardVis","setAddBoardVis","onToggleAddBoard","boardTitle","DeleteVerify","onDelete","onToggle","itemToDelete","AppHeaderMenu","onRemoveSavedBoard","onToggleAppHeaderMenu","useHistory","isChangeNameVis","setChangeName","isAddListVisible","setAddListVisibility","isDeleteVerify","setDeleteVerify","onToggleAddList","onToggleBoardName","onToggleDleteBoard","changeBoardName","boardToDelete","listName","listTitle","boardService","newList","AppHeader","bottomNav","isBgBoardOpen","setIsBgBoardOpen","isHeaderMenuVisible","setHeaderMenu","home","icon","faHome","faBorderAll","plusSign","faPlus","info","faInfoCircle","notifications","faBell","star","faStar","favoriteBoard","CardLabel","label","backgroundColor","CardPreview","currCard","cardid","pencil","faPencilAlt","checklist","faTasks","clock","faClock","eye","faEye","clipBoard","faClipboardList","provided","snapshot","MainContainer","draggableProps","dragHandleProps","innerRef","isDragging","cardCover","labels","isWatched","dueDate","fontSize","substring","desc","keys","styled","div","CopyCard","cardToCopy","this","description","deleteCard","currList","cardId","filter","cardsId","copyCard","newCard","createCheckList","checkListName","list","createCheckListItem","itemName","text","isChecked","removeLabel","labelIndex","toggleCardDetails","isCardDetailShown","checkItem","currCheckList","currItem","_toggleCheckItem","setCardCover","color","_setCardCover","setDueDate","_setDueDate","_setCardDesc","_addChecklist","_removeCheckList","_addCheckListItem","_removeCheckListItem","_toggleCardWatch","_setLabel","_updateLabels","CardList","currListID","onToggleCardDetails","listId","idx","_deleteCards","cardID","newBoardCards","newLists","currListCardIds","forEach","listToCopy","copiedListTitle","matchingCards","newCards","cardIdsToCopy","_findMatchingCards","card","cardCopy","findIndex","element","end","copiedList","copiedCards","cardsToCopy","allCards","deleteList","cardTitle","copyList","getListCards","currCards","listService","updatedData","_deleteList","_createCard","_copyList","_moveList","_changeListName","AddCard","toggleAddCard","reset","ListMenu","toggleListMenu","toggleEditTitle","onToggleMoveList","clicked","window","addEventListener","removeEventListener","newListCopy","ChangeListTitle","changeListName","newTitle","width","MoveList","moveTo","setMoveTo","onChange","moveToBoardId","target","value","listToMove","currListCards","moveList","List","setCurrList","isAddCardShown","setAddCard","isListMenuShown","setListMenu","isEditTitle","setIsEditTitle","isMoveListVisible","setMoveList","plus","listMenu","faEllipsisH","getCurrList","onToggleAddCard","onToggleListMenu","MainDragContainer","droppableId","MainDropContainer","droppableProps","BoardBackground","toggleBgBoard","close","faTimes","changeBackgroundImg","nature","mountains","water","lake","boraBora","sky","BlackScreen","CardCover","onToggleCopyCard","listOptions","setListOptions","onCopyCard","copyToList","cardService","copiedCard","copyToListID","MoveCard","onToggleMoveCard","onMoveCard","moveToList","moveTocardIds","includes","moveToListID","moveCard","ColorPallette","onSelectColor","onToggleColor","code","CardCoverMenu","toggleCardVisibility","onCloseCover","onCloseColor","AddCheckList","onToggleCheckList","onAddCheckList","checklistName","marginBlockEnd","LabelsMenu","onSetLabel","RightSideMenu","onToggleCover","isCoverOn","listid","onToggleCardWatch","isCopyClicked","setCopyClick","isMoveClicked","setMoveClick","isDeleteClicked","setDeleteClick","isAddCheckList","setAddChecklist","isLabelMenuVis","setLabelMenuVis","date","setDates","isCalShown","toggleShowCal","avatar","faUser","faTag","paperClip","faPaperclip","arrow","faArrowRight","copy","faCopy","trash","faTrashAlt","share","faShareAlt","cover","faColumns","onToggleLabelMenu","onToggleDeleteCard","colorCode","newLabelList","labelColor","setLabel","newChecklist","currChecklist","newDate","toString","ProgressBar","bgcolor","completed","fillerStyles","borderRadius","textAlign","fontWeight","ItemPreview","onCheckItem","item","onRemoveCheckListItem","checked","CardCheckList","isAddItemVisible","setItemVisible","checkedItems","setCheckItems","currCheckItem","setCurrCheckItem","setCompleted","checkedItem","itemToRemove","removeCheckListItem","newCheckedItems","onToggleItemVisibility","calculatePercentage","number","percent","isNaN","toFixed","checkListToRemove","removeCheckList","listItem","newItem","addCheckListItem","AddDescription","onToggleCardDesc","setCardDesc","defaultValue","cols","rows","Description","isDescVisible","CardDetails","setCoverOn","istCoverVisibile","setCoverVisibility","setDescVisibility","ticket","faTicketAlt","height","toggleCardWatch","AddList","windowWidth","Board","isBgSideOpen","setAddList","boardStyle","setBoardStyle","setCurrBoard","boardRef","loadCurrBoard","backgroundImage","backgroundSize","backgroundRepeat","onDragEnd","useMemo","result","direction","MainDndArea","App","History","component","exact","path","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","newBoards","isItemChecked","newChecklistToSave","currListId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00342402.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/purple_nature.72bb8802.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mountains.736266ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water.d264abfb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lake.c140c866.jpg\";","module.exports = __webpack_public_path__ + \"static/media/boraBora.989f4a87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sky.cc4c0d26.jpg\";","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport function BoardList(props) {\r\n    const mainStore = useSelector(state => state.mainStore)\r\n    const { boards, favBoards } = mainStore\r\n    const [boardList, setBoardList] = useState('')\r\n\r\n\r\n\r\n    const getAllBoards = useCallback(\r\n        () => {\r\n            const allBoards = []\r\n            for (const board in boards) {\r\n                const currBoard = boards[board];\r\n                allBoards.push(currBoard)\r\n            }\r\n            return allBoards\r\n        },\r\n        [boards],\r\n    )\r\n\r\n\r\n    const init = useCallback(\r\n        () => {\r\n            setBoardList(getAllBoards())\r\n        },\r\n        [getAllBoards],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [init])\r\n\r\n\r\n\r\n    if (!boardList) return 'LOADING...'\r\n    return (\r\n        <div className=\"board-list \">\r\n            <h2>All Boards</h2>\r\n            <div className=\"board-list-container justify-center flex wrap\">\r\n                {boardList.map(board => {\r\n                    return <div className=\"container margin-center flex\" key={board.id}>\r\n                        <div className=\"boards flex\">\r\n                            <Link to={`boards/${board.id}`}><img\r\n                                alt=\"board\"\r\n                                src={`/images/bgs/${board.backgroundImg}.jpg`}></img>\r\n                                <p>{board.name}</p>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"fav-boards \">\r\n                <h2>Favorite Boards</h2>\r\n                <div className=\"fav-boards-container flex wrap\">\r\n                    {Object.values(favBoards).map(board => {\r\n                        return <div className=\"container margin-center \" key={board.id}>\r\n                            <div className=\"boards flex \">\r\n                                <Link to={`boards/${board.id}`}>\r\n                                    <img\r\n                                        alt=\"boards\"\r\n                                        src={`/images/bgs/${board.backgroundImg}.jpg`}></img>\r\n                                    <p>{board.name}</p>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nfunction getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    const final = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return final\r\n}\r\n\r\nfunction generatePassword(length) {\r\n    var charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\r\n        retVal = \"\";\r\n    for (var i = 0, n = charset.length; i < length; ++i) {\r\n        retVal += charset.charAt(Math.floor(Math.random() * n));\r\n    }\r\n    return retVal;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val)\r\n}\r\nexport default {\r\n    generatePassword,\r\n    loadFromStorage,\r\n    getRandomIntInclusive,\r\n    saveToStorage,\r\n}\r\n","// const UTILS = require('./utils')\r\nimport UTILS from './utils'\r\nconst KEY = 'mainStore'\r\n\r\nasync function createBoard(boardName) {\r\n  return {\r\n    id: UTILS.generatePassword(4),\r\n    name: boardName,\r\n    isFav: false,\r\n    cards: {\r\n\r\n    },\r\n    lists: {\r\n\r\n    },\r\n    listOrder: [],\r\n    backgroundImg: 'sky',\r\n    navBarTheme: 'bright',\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function createCard(title) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: title,\r\n    content: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\nasync function createList(title) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: title,\r\n    cardIds: [],\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function saveToStorage(store) {\r\n  UTILS.saveToStorage(KEY, store)\r\n}\r\n\r\nasync function updateList(start, source, destination, draggableId) {\r\n  const newCardIds = Array.from(start.cardIds)\r\n  newCardIds.splice(source.index, 1)\r\n  newCardIds.splice(destination.index, 0, draggableId)\r\n  const updatedList = {\r\n    ...start,\r\n    cardIds: newCardIds\r\n  }\r\n  return updatedList\r\n}\r\n\r\nasync function dragOutsideList(start, source, destination, draggableId, finish) {\r\n  const startCardIds = start.cardIds\r\n  startCardIds.splice(source.index, 1);\r\n\r\n  const newStartList = {\r\n    ...start,\r\n    cardIds: startCardIds\r\n  }\r\n\r\n  const finishCardIds = finish.cardIds\r\n  finishCardIds.splice(destination.index, 0, draggableId);\r\n  const newFinishList = {\r\n    ...finish,\r\n    cardIds: finishCardIds\r\n  }\r\n  return {\r\n    newStartList: newStartList,\r\n    newFinishList: newFinishList\r\n  }\r\n}\r\nasync function dragList(source, destination, draggableId, currBoard) {\r\n\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(source.index, 1)\r\n  newListOrder.splice(destination.index, 0, draggableId)\r\n  return newListOrder\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  saveToStorage,\r\n  createBoard,\r\n  createCard,\r\n  createList,\r\n  dragOutsideList,\r\n  updateList,\r\n  dragList\r\n}\r\n","import service from '../../service/boardService'\r\n\r\n\r\nexport function dragInsideList(start, source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedList = await service.updateList(start, source, destination, draggableId)\r\n            const data = {\r\n                updatedList: updatedList,\r\n                currBoard: currBoard\r\n            }\r\n            console.log('currBoard', currBoard)\r\n            dispatch(_dragInsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragOutsideList(start, source, destination, draggableId, currBoard, finish) {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await service.dragOutsideList(start, source, destination, draggableId, finish)\r\n            const data = {\r\n                newStartList: res.newStartList,\r\n                newFinishList: res.newFinishList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragOutsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragList(source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const newListOrder = await service.dragList(source, destination, draggableId, currBoard)\r\n            const data = {\r\n                newListOrder: newListOrder,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragList(data));\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createBoard(boardName = \"New Board\") {\r\n    return async dispatch => {\r\n        try {\r\n            const newBoard = await service.createBoard(boardName)\r\n            const data = {\r\n                newBoard: newBoard,\r\n            }\r\n            dispatch(_createBoard(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteBoard(boardToDelete) {\r\n    return async dispatch => {\r\n        try {\r\n\r\n            dispatch(_deleteBoard(boardToDelete))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeBoardName(currBoard, boardName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                boardName: boardName\r\n            }\r\n            dispatch(_changeBoardName(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function createList(currBoard, listName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await service.createList(listName)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_createList(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function favoriteBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_favoriteBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeSavedBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_removeSavedBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeBoardBackground(currBoard, bgName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                bgName: bgName,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_changeBoardBg(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function setActiveBoard(boardId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setActiveBoard(boardId))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function saveToStorage(store) {\r\n    return async dispatch => {\r\n        try {\r\n            await service.saveToStorage(store)\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _setActiveBoard(activeBoard) {\r\n    return {\r\n        type: 'SET_ACTIVE_BOARD',\r\n        activeBoard\r\n    }\r\n}\r\n\r\n\r\nfunction _dragInsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _dragOutsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS',\r\n        data\r\n    }\r\n}\r\nfunction _dragList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS_ORDER',\r\n        data\r\n    }\r\n}\r\nfunction _createList(data) {\r\n\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardBg(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_BG',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}\r\nfunction _favoriteBoard(data) {\r\n    return {\r\n        type: 'TOGGLE_FAV_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _removeSavedBoard(boardToRemove) {\r\n    return {\r\n        type: 'REMOVE_SAVED_BOARD',\r\n        boardToRemove\r\n    }\r\n}\r\nfunction _createBoard(data) {\r\n    return {\r\n        type: 'CREATE_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardName(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_NAME',\r\n        data\r\n    }\r\n}\r\nfunction _deleteBoard(data) {\r\n    return {\r\n        type: 'DELETE_BOARD',\r\n        data\r\n    }\r\n}","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nexport function ActionForm({ placeholder, name, onSubmitFunc, toggleAdd }) {\r\n    const currRef = useRef(null);\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    useEffect(() => {\r\n        currRef.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"action-form\">\r\n            <form onSubmit={handleSubmit(onSubmitFunc)}>\r\n                <div className=\"flex column\">\r\n                    <input name={name} type=\"text\"\r\n                        style={{ resize: \"none\" }}\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            currRef.current = e\r\n                        }} placeholder={placeholder}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n                        <button className=\"add-btn\" >Add</button>\r\n                        <button onClick={toggleAdd} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BoardList } from '../../cmps/BoardList/BoardList'\r\nimport { useParams } from 'react-router-dom'\r\nimport { setActiveBoard, saveToStorage } from '../../store/actions/boardActions'\r\nimport { createBoard } from '../../store/actions/boardActions';\r\nimport { ActionForm } from '../../cmps/ActionForm/ActionForm';\r\n\r\nexport function HomePage(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { id } = useParams();\r\n    const currBoard = state.boards[id]\r\n    const dispatch = useDispatch()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAddBoard()\r\n    }\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setActiveBoard('0'))\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home-page margin-center\">\r\n            <div className=\"center-container margin-center\">\r\n                <div className=\"flex align-center space-between\">\r\n                    <h1>CHOOSE YOUR BOARD</h1>\r\n                    \r\n                    <div className=\"add-board-section flex\">\r\n                        {!isAddBoardVis &&\r\n                            <button onClick={onToggleAddBoard} className=\"create-board\">Create Board</button>\r\n                        }\r\n                        {isAddBoardVis &&\r\n                            <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'} toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"borad-list-container flex justify-center\">\r\n                    <div className=\"side-bar\">\r\n                    </div>\r\n                    <section className=\"board-list-section\">\r\n                        <BoardList />\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import boardService from '../../service/boardService';\r\n\r\nexport function createList(currBoard, listTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await boardService.createList(listTitle)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard,\r\n            }\r\n            dispatch(_createList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n\r\n}\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction _createList(data) {\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport function DeleteVerify({ onDelete, onToggle,itemToDelete }) {\r\n\r\n    return (\r\n        <div className=\"delete-verify\">\r\n            <div className=\"main-content-delete flex column\">\r\n                <p>Delete this {itemToDelete}?</p>\r\n                <div className=\"btns flex space-between\">\r\n\r\n                    <button className=\"dlt-btn\" onClick={onDelete}>Delete</button>\r\n                    <button onClick={onToggle}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createList } from '../../../store/actions/headerActions'\r\nimport { createBoard, changeBoardName, deleteBoard } from '../../../store/actions/boardActions';\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useHistory } from 'react-router';\r\nimport { DeleteVerify } from '../../CardDetails/DeleteVerify/DeleteVerify';\r\n\r\nexport function AppHeaderMenu({ onRemoveSavedBoard, activeBoard, onToggleAppHeaderMenu, currBoard }) {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n    const [isChangeNameVis, setChangeName] = useState(false)\r\n    const [isAddListVisible, setAddListVisibility] = useState(false)\r\n    const [isDeleteVerify, setDeleteVerify] = useState(false)\r\n\r\n    const onToggleAddList = () => {\r\n        setAddListVisibility(!isAddListVisible)\r\n    }\r\n\r\n    const onAddList = ({ listName }) => {\r\n        dispatch(createList(activeBoard, listName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n    const onToggleBoardName = () => {\r\n        setChangeName(!isChangeNameVis)\r\n    }\r\n\r\n    const onChangeBoardName = (data) => {\r\n        dispatch(changeBoardName(currBoard, data.boardName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onDeleteBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch( onRemoveSavedBoard(currBoard))\r\n        }\r\n        onToggleAppHeaderMenu()\r\n        dispatch(deleteBoard(currBoard))\r\n        history.push('/')\r\n    }\r\n\r\n\r\n    const onToggleDleteBoard = () => {\r\n        setDeleteVerify(!isDeleteVerify)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"app-header-menu\">\r\n            <div className=\"container\">\r\n                <div className=\"title flex justify-center\">\r\n                    <h3>Board Actions</h3>\r\n                </div>\r\n                <hr />\r\n                <div className=\"menu-actions\">\r\n                    {!isChangeNameVis &&\r\n                        <p onClick={onToggleBoardName}>Change Board Name...</p>\r\n                    }\r\n\r\n                    {isChangeNameVis &&\r\n                        <ActionForm name=\"boardName\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleBoardName} onSubmitFunc={onChangeBoardName} />\r\n                    }\r\n                    {!isAddBoardVis &&\r\n                        <p onClick={onToggleAddBoard}>Create Board...</p>\r\n                    }\r\n                    {isAddBoardVis &&\r\n                        <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                    }\r\n                    {!isDeleteVerify &&\r\n                        <p onClick={onToggleDleteBoard}>Delete Board...</p>\r\n                    }\r\n\r\n                    {isDeleteVerify &&\r\n                        <DeleteVerify itemToDelete={'board'} onToggle={onToggleDleteBoard} onDelete={onDeleteBoard} />\r\n                    }\r\n                    {!isAddListVisible &&\r\n                        <p onClick={onToggleAddList}>Add List...</p>\r\n                    }\r\n                    {isAddListVisible &&\r\n                        <ActionForm name=\"listName\" placeholder={'Add list Title'}\r\n                            toggleAdd={onToggleAddList} onSubmitFunc={onAddList} />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toggleBgSide } from '../../store/actions/headerActions'\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { favoriteBoard, removeSavedBoard } from '../../store/actions/boardActions'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBorderAll } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { AppHeaderMenu } from './AppHeaderMenu/AppHeaderMenu';\r\n\r\n\r\n\r\nexport function AppHeader(props) {\r\n\r\n    const state = useSelector(state => state.mainStore)\r\n    const { activeBoard } = state\r\n    const currBoard = state.boards[activeBoard]\r\n    const navBarTheme = currBoard?.navBarTheme\r\n    const bottomNav = currBoard?.bottomNav\r\n    const [isBgBoardOpen, setIsBgBoardOpen] = useState(false)\r\n    const [isHeaderMenuVisible, setHeaderMenu] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const home = <FontAwesomeIcon icon={faHome} />\r\n    const boards = <FontAwesomeIcon icon={faBorderAll} />\r\n    const plusSign = <FontAwesomeIcon icon={faPlus} />\r\n    const info = <FontAwesomeIcon icon={faInfoCircle} />\r\n    const notifications = <FontAwesomeIcon icon={faBell} />\r\n    const star = <FontAwesomeIcon icon={faStar} />\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        setIsBgBoardOpen(!isBgBoardOpen)\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onSaveBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch(removeSavedBoard(currBoard))\r\n            return\r\n        }\r\n        dispatch(favoriteBoard(currBoard))\r\n    }\r\n\r\n    const onToggleAppHeaderMenu = () => {\r\n        setHeaderMenu(!isHeaderMenuVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [activeBoard, navBarTheme])\r\n\r\n    return (\r\n        <nav className={`app-header flex column ${navBarTheme}`}>\r\n            <div className={`top-part flex ${navBarTheme}`}>\r\n                <div className=\"nav-tools flex space-between align-center\">\r\n                    <div className=\"left-side flex align-center\">\r\n                        <Link to=\"/\"><button className=\"home\">{home}</button></Link>\r\n                        <button>{boards} <span className=\"desktop-boards\">Boards</span> </button>\r\n                        <input type=\"text\" placeholder=\"SEARCH...\" />\r\n                    </div>\r\n                    <div className=\"logo\">\r\n                        <h1>TaskForce</h1>\r\n                    </div>\r\n                    <div className=\"right-side flex align-center\">\r\n                        <button onClick={onToggleAppHeaderMenu}>{plusSign}</button>\r\n                        <button>{info}</button>\r\n                        <button>{notifications}</button>\r\n                        <button>account</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            {activeBoard && currBoard &&\r\n                <div className={`bottom-nav flex align-center ${bottomNav}`}>\r\n                    <h1> {currBoard.name}</h1>\r\n                    <button className=\"btn\" onClick={toggleBgBoard}>Change Background</button>\r\n                    <button onClick={onSaveBoard} className={`btn btn-fav-board ${currBoard?.isFav ? 'saved' : ''}`}>{star}</button>\r\n                    <p>Total Lists: {currBoard.listOrder.length}</p>\r\n                    {isHeaderMenuVisible &&\r\n                        <AppHeaderMenu onRemoveSavedBoard={removeSavedBoard} currBoard={currBoard} activeBoard={activeBoard} onToggleAppHeaderMenu={onToggleAppHeaderMenu} />\r\n                    }\r\n                </div>\r\n            }\r\n        </nav >\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport function CardLabel({ label }) {\r\n    return (\r\n        <div style={{ backgroundColor: `${label}` }} className=\"card-label\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt, faTasks, faClock, faEye, faClipboardList } from '@fortawesome/free-solid-svg-icons'\r\nimport { CardLabel } from '../CardDetails/CardLabel/CardLabel'\r\nexport function CardPreview(props) {\r\n\r\n    const { cards, cardid, } = props\r\n    const currCard = cards[cardid]\r\n\r\n    const pencil = <FontAwesomeIcon icon={faPencilAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    if (!currCard) return 'loading...'\r\n    return (\r\n        <Draggable draggableId={currCard?.id} index={props.index}>\r\n            {(provided, snapshot) => (\r\n                <div>\r\n                    <MainContainer\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        <div className=\"card-preview flex column\">\r\n                            {currCard.cardCover &&\r\n                                <div style={{ backgroundColor: `${currCard.cardCover}` }} className=\"card-top-cover\">\r\n                                </div>\r\n                            }\r\n                            <div className=\"card-labels flex\">\r\n\r\n                                {currCard.labels && currCard.labels.map(label => {\r\n                                    return <CardLabel key={label} label={label} />\r\n                                })}\r\n                            </div>\r\n                            <div className=\"main-card-preview-content\">\r\n\r\n                                <div className=\"top-section flex space-between\">\r\n                                    <div className=\"title\">\r\n                                        <p>{currCard?.title}</p>\r\n                                    </div>\r\n                                    <span className=\"edit\" >{pencil}</span>\r\n                                </div>\r\n                                <div className=\"indicators flex align-center\">\r\n                                    {currCard.isWatched &&\r\n                                        eye\r\n                                    }\r\n                                    {currCard.dueDate &&\r\n                                        <span className=\"flex align-center\">\r\n                                            {clock}\r\n                                            <p style={{ fontSize: '10px' }}>\r\n\r\n                                                {currCard.dueDate.substring(4, 10)}\r\n                                            </p>\r\n                                        </span>\r\n                                    }\r\n                                    {currCard.desc &&\r\n                                        clipBoard\r\n                                    }\r\n                                    {Object.keys(currCard.checklist).length > 0 &&\r\n                                        checklist\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </MainContainer>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\n\r\nconst MainContainer = styled.div`\r\n\r\nwidth:100%;\r\n`;","import UTILS from '../service/utils'\r\n\r\n\r\n\r\n\r\nfunction deleteCard(currBoard, currList, cardId) {\r\n  const newCards = currBoard.cards\r\n  delete newCards[cardId]\r\n\r\n  const newCardIds = currList.cardIds.filter((cardsId) => cardsId !== cardId)\r\n  currList.cardIds = newCardIds\r\n\r\n  return { currBoard: currBoard, currList: currList, cardId }\r\n}\r\n\r\n\r\n\r\nfunction copyCard(newCard) {\r\n  return new CopyCard(newCard)\r\n}\r\n\r\n\r\nfunction CopyCard(cardToCopy) {\r\n    this.id = UTILS.generatePassword(5);\r\n    this.title = cardToCopy.title;\r\n    this.description = cardToCopy.description;\r\n    this.cardCover = cardToCopy.cardCover;\r\n    this.checklist = cardToCopy.checklist;\r\n    this.isWatched = false;\r\n    this.dueDate = cardToCopy.dueDate;\r\n    this.labels = cardToCopy.labels;\r\n    this.createdAt = new Date().toLocaleDateString()\r\n}\r\n\r\nfunction createCheckList(checkListName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    name: checkListName,\r\n    list: {},\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCheckListItem(itemName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    text: itemName,\r\n    isChecked: false,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\nfunction removeLabel(currCard, labelIndex) {\r\n  currCard.labels.splice(labelIndex, 1)\r\n  const newLabelList = currCard.labels\r\n  return newLabelList\r\n}\r\n\r\n\r\n\r\nexport default {\r\n  deleteCard,\r\n  copyCard,\r\n  createCheckList,\r\n  createCheckListItem,\r\n  removeLabel\r\n}","import cardService from '../../service/cardService';\r\n\r\nexport function toggleCardDetails(isCardDetailShown) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleCardDetails(isCardDetailShown));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateCurrList(listId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateCurrList(listId));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteCard(currBoard, currList, cardId) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await cardService.deleteCard(currBoard, currList, cardId)\r\n\r\n            dispatch(_deleteCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function copyCard(currBoard, copyToList, cardToCopy) {\r\n    console.log('cardToCopy:', cardToCopy)\r\n    return async dispatch => {\r\n        try {\r\n            const copiedCard = await cardService.copyCard(cardToCopy)\r\n            const updatedData = {\r\n                copiedCard: copiedCard,\r\n                currBoard: currBoard,\r\n                copyToListID: copyToList\r\n            }\r\n            dispatch(_copyCard(updatedData));\r\n            console.log('newCard is:', copiedCard)\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function moveCard(currBoard, moveToList, currCard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = {\r\n                currBoard: currBoard,\r\n                moveToListID: moveToList,\r\n                currCard: currCard,\r\n                currList: currList\r\n            }\r\n            dispatch(_moveCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setCardDesc(currBoard, currCard, desc) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                desc: desc,\r\n            }\r\n            dispatch(_setCardDesc(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function checkItem(currBoard, currCard, currCheckList, currItem, isChecked) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                currItem: currItem,\r\n                isChecked: isChecked\r\n            }\r\n            dispatch(_toggleCheckItem(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setLabel(currBoard, currCard, labelColor) {\r\n    console.log('currCardofLabels:', currCard)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        labelColor: labelColor\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setLabel(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeLabel(currBoard, currCard, labelIndex) {\r\n    const newLabelList = cardService.removeLabel(currCard, labelIndex)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        newLabelList: newLabelList\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateLabels(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function toggleCardWatch(currBoard, currCard, isWatched) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                isWatched: isWatched\r\n            }\r\n            dispatch(_toggleCardWatch(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createCheckList(currBoard, currCard, checklistName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newChecklist = await cardService.createCheckList(checklistName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currChecklist: newChecklist,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_addChecklist(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCheckListItem(currBoard, currCard, currCheckList, itemName) {\r\n    return async dispatch => {\r\n        try {\r\n            const currItem = await cardService.createCheckListItem(itemName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                newItem: currItem\r\n            }\r\n            dispatch(_addCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckListItem(currBoard, currCard, currCheckList, itemToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                itemToRemove: itemToRemove\r\n            }\r\n            dispatch(_removeCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckList(currBoard, currCard, checkListToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                checkListToRemove: checkListToRemove,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_removeCheckList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function setCardCover(currBoard, currCard, color) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                color: color,\r\n            }\r\n            dispatch(_setCardCover(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDueDate(currBoard, currCard, dueDate) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                dueDate: dueDate,\r\n            }\r\n            dispatch(_setDueDate(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _toggleCardDetails(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_DETAILS',\r\n        data\r\n    }\r\n}\r\nfunction _updateCurrList(data) {\r\n    return {\r\n        type: 'UPDATE_CURR_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _deleteCard(data) {\r\n    return {\r\n        type: 'DELETE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyCard(data) {\r\n    return {\r\n        type: 'COPY_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _moveCard(data) {\r\n    return {\r\n        type: 'MOVE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _setCardCover(data) {\r\n    return {\r\n        type: 'CARD_COVER',\r\n        data\r\n    }\r\n}\r\nfunction _setCardDesc(data) {\r\n    return {\r\n        type: 'SET_DESC',\r\n        data\r\n    }\r\n}\r\nfunction _addChecklist(data) {\r\n    return {\r\n        type: 'CREATE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckList(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _addCheckListItem(data) {\r\n    return {\r\n        type: 'ADD_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckListItem(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setDueDate(data) {\r\n    return {\r\n        type: 'SET_DUE_DATE',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCardWatch(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_WATCH',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCheckItem(data) {\r\n    return {\r\n        type: 'TOGGLE_CHECK_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setLabel(data) {\r\n    return {\r\n        type: 'SET_LABEL',\r\n        data\r\n    }\r\n}\r\nfunction _updateLabels(data) {\r\n    return {\r\n        type: 'UPDATE_LABELS',\r\n        data\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { CardPreview } from '../CardPreview/CardPreview';\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardDetails ,updateCurrList} from '../../store/actions/cardActions'\r\n\r\nexport function CardList(props) {\r\n    const { cards, provided, cardIds, currListID } = props\r\n    const params = useParams()\r\n    const { id } = params\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onToggleCardDetails = (cardid) => {\r\n        history.push(`/boards/${id}/${currListID}/${cardid}`)\r\n        dispatch(updateCurrList(currListID.id))\r\n        dispatch(toggleCardDetails(true))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [cardIds])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {cardIds.map((cardid, idx) => {\r\n                return <div key={cardid} onClick={() => onToggleCardDetails(cardid)}>\r\n\r\n                    <CardPreview\r\n                        key={cardid}\r\n                        cards={cards}\r\n                        index={idx}\r\n                        cardid={cardid} />\r\n\r\n                </div>\r\n            })}\r\n            {provided.placeholder}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import UTILS from './utils'\r\n\r\nasync function deleteList(currBoard, currList) {\r\n  const newLists = currBoard.lists\r\n  delete newLists[currList.id]\r\n  const newListOrder = currBoard.listOrder.filter(list => list !== currList.id)\r\n\r\n  const currListCardIds = currList.cardIds\r\n  const newBoardCards = currBoard.cards\r\n\r\n\r\n  function _deleteCards(cardID) {\r\n    delete newBoardCards[cardID]\r\n  }\r\n  currListCardIds.forEach(cardID => _deleteCards(cardID))\r\n\r\n\r\n  return {\r\n    newLists: newLists,\r\n    newListOrder: newListOrder,\r\n    newBoardCards: newBoardCards\r\n  }\r\n\r\n}\r\n\r\n\r\nasync function copyList(currBoard, listToCopy) {\r\n  const copiedListTitle = 'Copy of - ' + listToCopy.title\r\n  const newList = await _createList(copiedListTitle)\r\n  const matchingCards = []\r\n  const newCards = {}\r\n  const cardIdsToCopy = listToCopy.cardIds\r\n  _findMatchingCards(matchingCards, cardIdsToCopy, currBoard.cards)\r\n\r\n  matchingCards.forEach(\r\n    card => {\r\n      const cardCopy = copyCard(card)\r\n      newCards[cardCopy.id] = cardCopy\r\n      return\r\n    }\r\n  )\r\n  newList.cardIds = Object.keys(newCards)\r\n\r\n  const start = currBoard.listOrder.findIndex(element => element === listToCopy.id)\r\n  const end = newList.id\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(start + 1, 0, end)\r\n\r\n  return {\r\n    copiedList: newList,\r\n    newListOrder: newListOrder,\r\n    copiedCards: newCards\r\n  }\r\n}\r\n\r\n\r\nfunction getListCards(cards, list) {\r\n  const currCards = {}\r\n  list.cardIds.forEach((cardID) => { return cards[cardID] ? currCards[cardID] = cards[cardID] : '' })\r\n  return currCards\r\n}\r\n\r\n\r\n\r\nfunction _findMatchingCards(matchingCards, cardsToCopy, allCards) {\r\n  cardsToCopy.forEach(cardId => {\r\n    const currCard = allCards[cardId]\r\n    if (currCard) {\r\n      matchingCards.push(currCard)\r\n    }\r\n\r\n  })\r\n\r\n}\r\n\r\nasync function _createList(listName,) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: listName,\r\n    cardIds: []\r\n  }\r\n}\r\n\r\nfunction copyCard(cardToCopy) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardToCopy.title,\r\n    desc: cardToCopy.desc,\r\n    cardCover: cardToCopy.cardCover,\r\n    checklist: cardToCopy.checklist,\r\n    isWatched: cardToCopy.isWatched,\r\n    dueDate: cardToCopy.dueDate,\r\n    labels: cardToCopy.labels,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCard(cardTitle, description = '') {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardTitle,\r\n    desc: description,\r\n    checklist: {},\r\n    cardCover: '',\r\n    isWatched: false,\r\n    labels: [],\r\n    dueDate: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  deleteList,\r\n  createCard,\r\n  copyList,\r\n  getListCards\r\n}\r\n","import listService from '../../service/listService'\r\n\r\nexport function createCard(currBoard, currList, cardTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newCard = await listService.createCard(cardTitle)\r\n            const data = {\r\n                newCard: newCard,\r\n                currBoard: currBoard,\r\n                currList: currList\r\n            }\r\n            dispatch(_createCard(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteList(currBoard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await listService.deleteList(currBoard, currList)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: currList,\r\n                newLists: updatedData.newLists,\r\n                newListOrder: updatedData.newListOrder,\r\n                newBoardCards: updatedData.newBoardCards\r\n            }\r\n            dispatch(_deleteList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function moveList(currBoard, listToMove, moveToBoardId) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const currListCards = listService.getListCards(currBoard.cards, listToMove)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                listToMove: listToMove,\r\n                moveToBoardId: moveToBoardId,\r\n                currListCards: currListCards\r\n            }\r\n            dispatch(_moveList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function copyList(currBoard, listToCopy) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const newListCopy = await listService.copyList(currBoard, listToCopy)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                copiedList: newListCopy.copiedList,\r\n                newListOrder: newListCopy.newListOrder,\r\n                copiedCards: newListCopy.copiedCards\r\n            }\r\n            dispatch(_copyList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeListName(currBoard, currList, listTitle) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            currList.title = listTitle\r\n            const newListTitle = currList\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: newListTitle,\r\n            }\r\n            dispatch(_changeListName(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _deleteList(data) {\r\n    return {\r\n        type: 'DELETE_LIST',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _createCard(data) {\r\n    return {\r\n        type: 'CREATE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyList(data) {\r\n    return {\r\n        type: 'COPY_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _moveList(data) {\r\n    return {\r\n        type: 'MOVE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeListName(data) {\r\n    return {\r\n        type: 'CHANGE_LIST_NANE',\r\n        data\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createCard } from '../../store/actions/listActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function AddCard(props) {\r\n    const { currBoard, currList, toggleAddCard } = props\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const cardTitle = useRef(null);\r\n\r\n    const onCreateCard = data => {\r\n        if (!data.cardTitle) return\r\n        dispatch(createCard(currBoard, currList, data.cardTitle))\r\n        reset()\r\n        toggleAddCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        cardTitle.current.focus();\r\n\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-card \">\r\n            <form onSubmit={handleSubmit(onCreateCard)}>\r\n                <div className=\"flex column\">\r\n                    <input name=\"cardTitle\" type=\"text\"\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            cardTitle.current = e\r\n                        }} placeholder={'Enter card title'}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n\r\n                        <button className=\"add-btn\" >Add Card</button>\r\n                        <button onClick={toggleAddCard} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect ,useCallback} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteList, copyList } from '../../store/actions/listActions'\r\n\r\n\r\nexport function ListMenu({ toggleListMenu, currBoard, currList, toggleAddCard, toggleEditTitle, onToggleMoveList }) {\r\n\r\n    const dispatch = useDispatch()\r\n    const onDeleteList = () => {\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    const onCreateCard = () => {\r\n        toggleAddCard()\r\n\r\n    }\r\n\r\n    const onCopyList = () => {\r\n        dispatch(copyList(currBoard, currList))\r\n\r\n\r\n    }\r\n\r\n    const onEditTitle = () => {\r\n        toggleEditTitle()\r\n\r\n    }\r\n\r\n\r\n\r\n    const clicked = useCallback(\r\n        () => {\r\n            toggleListMenu()\r\n        },\r\n        [toggleListMenu],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', clicked)\r\n        return () => {\r\n            window.removeEventListener('click', clicked)\r\n        }\r\n    }, [clicked])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"list-menu\">\r\n            <div className=\"menu-main-content\">\r\n                <div className=\"title margin-center\">\r\n                    <p onClick={toggleListMenu} className=\"close-btn\" >X</p>\r\n                    <p>List Actions</p>\r\n                </div>\r\n                <div className=\"menu-options \">\r\n                    <div className=\"option flex align-center\">\r\n                        <p onClick={onCreateCard}>Add Card...</p>\r\n                    </div>\r\n                    <div onClick={onCopyList} className=\"option flex align-center\">\r\n                        <p>Copy List...</p>\r\n                    </div>\r\n                    <div onClick={onToggleMoveList} className=\"option flex align-center\">\r\n                        <p>Move List...</p>\r\n                    </div>\r\n                    <div onClick={onEditTitle} className=\"option flex align-center\">\r\n                        <p>Edit Title...</p>\r\n                    </div>\r\n                    <div onClick={onDeleteList} className=\"option delete flex align-center\">\r\n                        <p>Delete List...</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeListName } from '../../store/actions/listActions'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function ChangeListTitle({ toggleEditTitle, currBoard, currList }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit} = useForm();\r\n    const title = useRef(null);\r\n    const onSaveNewTitle = (data) => {\r\n        dispatch(changeListName(currBoard, currList, data.newTitle))\r\n        toggleEditTitle()\r\n    }\r\n\r\n    useEffect(() => {\r\n        title.current.focus();\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"change-list-title\">\r\n            <form onSubmit={handleSubmit(onSaveNewTitle)}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    ref={(e) => {\r\n                        register(e)\r\n                        title.current = e\r\n                    }}\r\n                    name=\"newTitle\"\r\n                    style={{ width: '100%' }}\r\n                    type=\"text\" />\r\n                <div className=\"flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}} type=\"submit\">Save</button>\r\n                    <button onClick={toggleEditTitle}>X</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { moveList, deleteList } from '../../../store/actions/listActions'\r\n\r\n\r\nexport function MoveList({ onToggleMoveList, currBoard, currList }) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const boards = Object.values(state.boards)\r\n    const { activeBoard } = state\r\n    const dispatch = useDispatch()\r\n\r\n    const [moveTo, setMoveTo] = useState('')\r\n\r\n\r\n    const onMoveList = ({ target }) => {\r\n        const moveToBoardId = target.value\r\n        setMoveTo(moveToBoardId)\r\n    }\r\n\r\n    const MoveList = () => {\r\n\r\n        if (activeBoard === moveTo || !moveTo) return\r\n\r\n        dispatch(moveList(currBoard, currList, moveTo))\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"move-list\">\r\n            <div className=\"main-board-move-list\">\r\n                <select onChange={onMoveList} id=\"\">\r\n                    <option value=\"\">To...</option>\r\n                    {boards && boards.map((board) =>\r\n                        <option value={board.id} name={board.id} key={board.id}>{board.name}</option>\r\n                    )\r\n                    }\r\n                </select>\r\n                <div className=\"flex space-between\">\r\n\r\n                    <button onClick={MoveList}>Move</button>\r\n                    <button onClick={onToggleMoveList}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { CardList } from '../CardList/CardList'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { AddCard } from '../AddCard/AddCard'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons'\r\nimport { ListMenu } from '../ListMenu/ListMenu';\r\nimport { ChangeListTitle } from '../ChangeListTitle/ChangeListTitle'\r\nimport { MoveList } from '../ListMenu/MoveList/MoveList'\r\n\r\n\r\nexport function List({ listId, lists, cards, currBoard, index, }) {\r\n    const [currList, setCurrList] = useState('')\r\n    const [isAddCardShown, setAddCard] = useState(false)\r\n    const [isListMenuShown, setListMenu] = useState(false)\r\n    const [isEditTitle, setIsEditTitle] = useState(false)\r\n    const [isMoveListVisible, setMoveList] = useState(false)\r\n\r\n    const plus = <FontAwesomeIcon icon={faPlus} />\r\n    const listMenu = <FontAwesomeIcon icon={faEllipsisH} />\r\n\r\n\r\n    const getCurrList = useCallback(\r\n        () => {\r\n            const getCurrList = lists[listId]\r\n            setCurrList(getCurrList)\r\n        },\r\n        [lists, listId,],\r\n    )\r\n\r\n    const onToggleAddCard = () => {\r\n        setAddCard(!isAddCardShown)\r\n    }\r\n    const onToggleListMenu = () => {\r\n        setListMenu(!isListMenuShown)\r\n    }\r\n    const toggleEditTitle = () => {\r\n        setIsEditTitle(!isEditTitle)\r\n    }\r\n\r\n    const onToggleMoveList = () => {\r\n        setMoveList(!isMoveListVisible)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrList()\r\n        return () => {\r\n\r\n        }\r\n    }, [getCurrList])\r\n\r\n\r\n\r\n    if (!currList) return 'loading...'\r\n    return (\r\n        <Draggable\r\n            draggableId={currList.id}\r\n            index={index}\r\n        >\r\n            {(provided) => (\r\n                <MainDragContainer\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <div className=\"list flex column align-center\" >\r\n                        {isMoveListVisible &&\r\n                            <MoveList currBoard={currBoard} currList={currList} onToggleMoveList={onToggleMoveList} />\r\n                        }\r\n                        <div className=\"title-container align-center flex\">\r\n                            <span className=\"drag-handle flex space-between \"\r\n                                {...provided.dragHandleProps}\r\n                            >\r\n                                {!isEditTitle && <div>\r\n\r\n                                    <p className=\"list-title\">{currList.title}</p>\r\n\r\n                                    <p className=\"cards-count\">Total Cards: {currList.cardIds.length}</p>\r\n                                </div>\r\n                                }\r\n                                {isEditTitle && <span className=\"edit-title\">\r\n                                    <ChangeListTitle\r\n                                        toggleEditTitle={toggleEditTitle}\r\n                                        currBoard={currBoard}\r\n                                        currList={currList}\r\n                                    />\r\n                                </span>\r\n                                }\r\n                                <div className=\"menu-btn\">\r\n                                    <span className=\"list-menu-section align-center flex\"\r\n                                        onClick={onToggleListMenu}>\r\n                                        {listMenu}\r\n                                    </span>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                        {isListMenuShown &&\r\n                            <ListMenu\r\n\r\n\r\n                                toggleListMenu={onToggleListMenu}\r\n                                currBoard={currBoard}\r\n                                currList={currList}\r\n                                toggleAddCard={onToggleAddCard}\r\n                                toggleEditTitle={toggleEditTitle}\r\n                                onToggleMoveList={onToggleMoveList}\r\n                            />\r\n                        }\r\n                        <div className=\"main-container margin-center\">\r\n                            <Droppable droppableId={listId} type=\"card\">\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <MainDropContainer\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                <CardList\r\n                                                    cardIds={currList.cardIds}\r\n                                                    cards={cards}\r\n                                                    provided={provided}\r\n                                                    currListID={currList.id}\r\n                                                />\r\n                                            </MainDropContainer>\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                        <section className=\"add-card-section flex align-center\">\r\n                            {!isAddCardShown && <div onClick={onToggleAddCard}\r\n                                className=\"add-card-text flex align-center\">\r\n                                <div className=\"plus-sign\">{plus}</div>\r\n                                {currList.cardIds.length === 0 ? <p>Add a card</p> : <p>Add anoter card</p>}\r\n                            </div>\r\n                            }\r\n                            {isAddCardShown && <div className=\"add-card-section\">\r\n                                <AddCard toggleAddCard={onToggleAddCard}\r\n                                    currList={currList}\r\n                                    currBoard={currBoard} />\r\n                            </div>\r\n                            }\r\n                            <div className=\"div\">\r\n\r\n                            </div>\r\n\r\n                        </section>\r\n\r\n\r\n                    </div>\r\n                </MainDragContainer>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\nconst MainDropContainer = styled.div`\r\n\r\nwidth:100%;\r\nmin-height:10px;\r\n\r\n`;\r\nconst MainDragContainer = styled.div`\r\n\r\n`;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    saveToStorage,\r\n    changeBoardBackground,\r\n} from '../../store/actions/boardActions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport nature from '../../assets/images/bgs/purple_nature.jpg'\r\nimport mountains from '../../assets/images/bgs/mountains.jpg'\r\nimport water from '../../assets/images/bgs/water.jpg'\r\nimport lake from '../../assets/images/bgs/lake.jpg'\r\nimport boraBora from '../../assets/images/bgs/boraBora.jpg'\r\nimport sky from '../../assets/images/bgs/sky.jpg'\r\n\r\n\r\n\r\n\r\n\r\nexport function BoardBackground({ state, currBoard, toggleBgBoard }) {\r\n    const dispatch = useDispatch()\r\n    const close = <FontAwesomeIcon icon={faTimes} />\r\n\r\n    const changeBackgroundImg = ({ target }) => {\r\n        const name = target.name\r\n        switch (name) {\r\n            case \"nature\":\r\n                dispatch(changeBoardBackground(currBoard, 'purple_nature'))\r\n                break;\r\n            case \"mountains\":\r\n                dispatch(changeBoardBackground(currBoard, 'mountains'))\r\n                break;\r\n            case \"water\":\r\n                dispatch(changeBoardBackground(currBoard, 'water',''))\r\n                break;\r\n            case \"lake\":\r\n                dispatch(changeBoardBackground(currBoard, 'lake',''))\r\n                break;\r\n            case \"boraBora\":\r\n                dispatch(changeBoardBackground(currBoard, 'boraBora',''))\r\n                break;\r\n            case \"sky\":\r\n                dispatch(changeBoardBackground(currBoard, 'sky',''))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"board-background \">\r\n            <div className=\"close-btn flex\">\r\n                <button onClick={toggleBgBoard}>{close}</button>\r\n            </div>\r\n            <div className=\"main-content flex align-center wrap\">\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={nature} alt=\"nature\" name=\"nature\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={mountains} alt=\"mountains\" name=\"mountains\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={water} alt=\"water\" name=\"water\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={lake} alt=\"lake\" name=\"lake\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={boraBora} alt=\"boraBora\" name=\"boraBora\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={sky} alt=\"sky\" name=\"sky\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {  useEffect } from 'react';\r\n\r\nexport function BlackScreen(props) {\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"black-screen\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function CardCover({currCard}) {\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor:`${currCard.cardCover}`}} className=\"card-cover\">\r\n            <div className=\"main-content-card-cover\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { copyCard } from '../../../store/actions/cardActions'\r\n\r\n\r\nexport function CopyCard({ currBoard, currCard, onToggleCopyCard }) {\r\n\r\n    const [listOptions, setListOptions] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onCopyCard = ({ target }) => {\r\n        const listName = target.value\r\n        const copyToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        dispatch(copyCard(currBoard, copyToList[0].id, currCard))\r\n        onToggleCopyCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onCopyCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { moveCard } from '../../../store/actions/cardActions'\r\n\r\nexport function MoveCard({ currBoard, currCard, currList, onToggleMoveCard, onToggleCardDetails }) {\r\n    const [listOptions, setListOptions] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onMoveCard = ({ target }) => {\r\n        const listName = target.value\r\n        const moveToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        console.log('moveToList:', moveToList)\r\n        const moveTocardIds = currBoard.lists[moveToList[0]?.id]?.cardIds\r\n        if (!moveTocardIds) return\r\n        if (moveTocardIds.includes(currCard.id)) return\r\n        if (moveToList[0].id === currList.id ) return\r\n        dispatch(moveCard(currBoard, moveToList[0].id, currCard, currList))\r\n        onToggleMoveCard()\r\n        onToggleCardDetails()\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard.lists])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onMoveCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function ColorPallette({ onSelectColor, onToggleColor }) {\r\n    const colors = [\r\n        { color: 'red', code: '#e04a4a' },\r\n        { color: 'lightGreen', code: '#4ae06d' },\r\n        { color: 'purpule', code: '#ab4ae0' },\r\n        { color: 'orange', code: '#f9af4d' },\r\n        { color: 'blue', code: '#3874ed' },\r\n        { color: 'yellow', code: '#ffff51' },\r\n        { color: 'noCover', code: '', text: 'None' }\r\n    ]\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"color-pallette\">\r\n            <div className=\"flex wrap space-between\">\r\n                {colors.map(color =>\r\n                    <div key={color.code} onClick={() => onSelectColor(color.code)} className=\"color\" style={{ backgroundColor: color.code }}>\r\n                        {color.text && <p>{color.text}</p>}\r\n                    </div>\r\n                )}\r\n                <button onClick={onToggleColor}>Close</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { setCardCover } from '../../../store/actions/cardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette'\r\nexport function CardCoverMenu({ onToggleColor, toggleCardVisibility, currCard, currBoard }) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onCloseCover = () => {\r\n        dispatch(setCardCover(currBoard, currCard, ''))\r\n        toggleCardVisibility()\r\n    }\r\n    const onSelectCover = (color) => {\r\n        if (color === 'noCover') return onCloseCover()\r\n        dispatch(setCardCover(currBoard, currCard, color))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-cover-menu\">\r\n            <div className=\"top-part flex space-between\">\r\n            </div>\r\n            <ColorPallette\r\n                onCloseColor={onCloseCover}\r\n                onSelectColor={onSelectCover}\r\n                currCard={currCard}\r\n                currBoard={currBoard}\r\n                onToggleColor={onToggleColor}\r\n                toggleCardVisibility={toggleCardVisibility} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function AddCheckList({ onToggleCheckList, onAddCheckList }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const checklistName = useRef(null)\r\n\r\n    useEffect(() => {\r\n        checklistName.current.focus();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"add-check-list\">\r\n            <form onSubmit={handleSubmit(onAddCheckList)}>\r\n                <input style={{ marginBlockEnd: '5px' }} autoComplete=\"off\" ref={(e) => {\r\n                    register(e)\r\n                    checklistName.current = e\r\n                }} name=\"checklistName\" type=\"text\" />\r\n                <div className=\"check-list-btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Add</button>\r\n                    <button onClick={onToggleCheckList}>Cancel</button>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette';\r\n\r\nexport function LabelsMenu({  onToggleColor ,onSetLabel}) {\r\n    return (\r\n        <div className=\"labels-menu\">\r\n            <ColorPallette onToggleColor={onToggleColor} onSelectColor={onSetLabel} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CopyCard } from '../CopyCard/CopyCard'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faTag, faTasks, faColumns, faClock, faPaperclip, faArrowRight, faCopy, faEye, faTrashAlt, faShareAlt, } from '@fortawesome/free-solid-svg-icons'\r\nimport { MoveCard } from '../MoveCard/MoveCard';\r\nimport { DeleteVerify } from '../DeleteVerify/DeleteVerify'\r\nimport { CardCoverMenu } from '../CardCoverMenu/CardCoverMenu'\r\nimport { createCheckList, setDueDate, deleteCard, setLabel, removeLabel } from '../../../store/actions/cardActions'\r\nimport { useDispatch } from 'react-redux';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport { AddCheckList } from './AddCheckList/AddCheckList';\r\nimport { LabelsMenu } from '../LabelsMenu/LabelsMenu';\r\n\r\n\r\nexport function RightSideMenu({ onToggleCardDetails, cardid, onToggleCover, isCoverOn,\r\n    listid,\r\n    currBoard,\r\n    currCard,\r\n    toggleCardVisibility,\r\n    onToggleCardWatch\r\n}) {\r\n    const currList = currBoard.lists[listid]\r\n    const [isCopyClicked, setCopyClick] = useState(false)\r\n    const [isMoveClicked, setMoveClick] = useState(false)\r\n    const [isDeleteClicked, setDeleteClick] = useState(false)\r\n    const [isAddCheckList, setAddChecklist] = useState(false)\r\n    const [isLabelMenuVis, setLabelMenuVis] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const [date, setDates] = useState(new Date())\r\n    const [isCalShown, toggleShowCal] = useState(false)\r\n\r\n    const avatar = <FontAwesomeIcon icon={faUser} />\r\n    const label = <FontAwesomeIcon icon={faTag} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const paperClip = <FontAwesomeIcon icon={faPaperclip} />\r\n    const arrow = <FontAwesomeIcon icon={faArrowRight} />\r\n    const copy = <FontAwesomeIcon icon={faCopy} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const share = <FontAwesomeIcon icon={faShareAlt} />\r\n    const cover = <FontAwesomeIcon icon={faColumns} />\r\n\r\n\r\n    const onToggleLabelMenu = () => {\r\n        setLabelMenuVis(!isLabelMenuVis)\r\n    }\r\n\r\n    const onSetLabel = (colorCode) => {\r\n        const index = currCard.labels.findIndex((label) => { return label === colorCode })\r\n        if (index >= 0) {\r\n            dispatch(removeLabel(currBoard, currCard, index))\r\n            return\r\n        }\r\n        dispatch(setLabel(currBoard, currCard, colorCode))\r\n    }\r\n\r\n    const onToggleDeleteCard = () => {\r\n        setDeleteClick(!isDeleteClicked)\r\n    }\r\n\r\n    const onDeleteCard = () => {\r\n        dispatch(deleteCard(currBoard, currList, cardid))\r\n        onToggleCardDetails()\r\n    }\r\n\r\n    const onToggleCopyCard = () => {\r\n        setCopyClick(!isCopyClicked)\r\n    }\r\n    const onToggleMoveCard = () => {\r\n        setMoveClick(!isMoveClicked)\r\n    }\r\n\r\n    const onToggleCheckList = () => {\r\n        setAddChecklist(!isAddCheckList)\r\n    }\r\n\r\n    const onAddCheckList = ({ checklistName }) => {\r\n        if (!checklistName) return\r\n        dispatch(createCheckList(currBoard, currCard, checklistName))\r\n        onToggleCheckList()\r\n    }\r\n    const onGetDates = date => {\r\n        const newDate = date.toString().substring(0, 15)\r\n        setDates(date)\r\n        dispatch(setDueDate(currBoard, currCard, newDate))\r\n        toggleShowCal(false)\r\n    }\r\n\r\n    const onToggleShowCal = () => {\r\n        toggleShowCal(!isCalShown)\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"right-side-menu flex column\">\r\n            <p>SUGGESTED</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                Join</button>\r\n            <p>ADD TO CARD</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                    Members\r\n            </button>\r\n            <button onClick={onToggleLabelMenu} className=\"btn-right-side\">\r\n                <span>{label}</span>\r\n                Labels\r\n                </button>\r\n            { isLabelMenuVis && <LabelsMenu onSetLabel={onSetLabel} onToggleColor={onToggleLabelMenu} currBoard={currBoard} currCard={currCard} />}\r\n            <button onClick={onToggleCheckList} className=\"btn-right-side\">\r\n                <span>{checklist}</span>\r\n                Checklist\r\n                </button>\r\n            {isAddCheckList &&\r\n                <AddCheckList\r\n                    onToggleCheckList={onToggleCheckList}\r\n                    onAddCheckList={onAddCheckList} />\r\n            }\r\n            <button onClick={onToggleShowCal} className=\"btn-right-side\">\r\n                <span>{clock}</span>\r\n                Due Date\r\n                </button>\r\n            {isCalShown && <div className=\"cal\">\r\n                <Calendar className=\"calendar\"\r\n                    onChange={onGetDates}\r\n                    value={date}\r\n                />\r\n            </div>\r\n            }\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {paperClip}\r\n                </span>\r\n                Attachment\r\n                </button>\r\n            <button className=\"btn-right-side\" onClick={onToggleCover}>\r\n                <span>\r\n                    {cover}\r\n                </span>\r\n                Cover\r\n                </button>\r\n            {isCoverOn &&\r\n                <CardCoverMenu\r\n                    currCard={currCard}\r\n                    toggleCardVisibility={toggleCardVisibility}\r\n                    currBoard={currBoard}\r\n                    onToggleColor={onToggleCover}\r\n                />\r\n            }\r\n\r\n            <p>ACTIONS</p>\r\n\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleMoveCard}>\r\n                        <span>\r\n                            {arrow}\r\n                        </span>\r\n                    Move\r\n                    </button>\r\n                </div>\r\n                {isMoveClicked && <MoveCard cardid={cardid}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    currList={currList}\r\n                    onToggleMoveCard={onToggleMoveCard}\r\n                    onToggleCardDetails={onToggleCardDetails}\r\n                />\r\n                }\r\n            </div>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleCopyCard}>\r\n                        <span>\r\n                            {copy}\r\n                        </span>\r\n                    Copy\r\n                    </button>\r\n                </div>\r\n                {isCopyClicked && <CopyCard cardid={cardid}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    onToggleCopyCard={onToggleCopyCard}\r\n                />\r\n                }\r\n            </div>\r\n            <button onClick={onToggleCardWatch} className=\"btn-right-side flex space-between align-center\">\r\n                <div className=\"flex\">\r\n                    <span>\r\n                        {eye}\r\n                    </span>\r\n                    Watch\r\n                </div>\r\n                {currCard.isWatched &&\r\n                    <span className=\"watched flex align-center justify-center\">V</span>\r\n                }\r\n            </button>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n\r\n                    <button className=\"btn-right-side\" onClick={onToggleDeleteCard}>\r\n                        <span>\r\n                            {trash}\r\n                        </span>\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n                {isDeleteClicked &&\r\n                    <DeleteVerify onDelete={onDeleteCard}\r\n                        onToggle={onToggleDeleteCard}\r\n                        itemToDelete={'card'}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {share}\r\n                </span>\r\n                Share\r\n                </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function ProgressBar({ bgcolor, completed }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const fillerStyles = {\r\n        width: `${completed}%`,\r\n        backgroundColor: bgcolor,\r\n        borderRadius: 'inherit',\r\n        textAlign: 'right'\r\n    }\r\n\r\n    const labelStyles = {\r\n        fontWeight: 'bold'\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"progress-bar flex align-center\">\r\n            <span style={labelStyles}>{` ${completed}%  `}</span>\r\n            <div></div>\r\n            <div className=\"wrapper\" style={fillerStyles}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function ItemPreview({ onCheckItem, item, onRemoveCheckListItem, trash }) {\r\n    \r\n    useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"item-preview\">\r\n            <div\r\n                key={item.id} className=\"main-content-checkbox flex space-between align-center\">\r\n                <div className=\"checkbox-container flex\">\r\n                    <input onChange={() => onCheckItem(item)} checked={item.isChecked} type=\"checkbox\" value={item.text} /> <p>\r\n                        {item.text}\r\n                    </p>\r\n                </div>\r\n                <button onClick={() => onRemoveCheckListItem(item)}><span>{trash}</span></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeCheckList, addCheckListItem, removeCheckListItem, checkItem } from '../../../store/actions/cardActions'\r\nimport { ProgressBar } from '../../ProgressBar/ProgressBar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTasks, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useCallback } from 'react';\r\nimport { ItemPreview } from './ItemPreview/ItemPreview'\r\n\r\nexport function CardCheckList({ currCheckList, currCard, currBoard }) {\r\n    const checklistName = currCheckList.name\r\n    const [isAddItemVisible, setItemVisible] = useState(false)\r\n    const [checkedItems, setCheckItems] = useState([])\r\n    const [currCheckItem, setCurrCheckItem] = useState()\r\n    const [completed, setCompleted] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n\r\n    const onAddCheckItem = ({ listItem }) => {\r\n        if (!listItem) return\r\n        dispatch(addCheckListItem(currBoard, currCard, currCheckList, listItem))\r\n        onToggleItemVisibility()\r\n    }\r\n\r\n\r\n    const onRemoveCheckList = () => { dispatch(removeCheckList(currBoard, currCard, currCheckList)) }\r\n    const onRemoveCheckListItem = useCallback(\r\n        (item) => {\r\n            const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n            dispatch(removeCheckListItem(currBoard, currCard, currCheckList, item))\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n        },\r\n        [currBoard, currCard, currCheckList, dispatch,checkedItems]\r\n    )\r\n\r\n    const onToggleItemVisibility = () => {\r\n        setItemVisible(!isAddItemVisible)\r\n    }\r\n\r\n\r\n    const onCheckItem = (item) => {\r\n        const currItem = currCheckList.list[item.id]\r\n        setCurrCheckItem(currItem)\r\n        const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n        if (item.isChecked) {\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n            dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n            calculatePercentage()\r\n            return\r\n        }\r\n\r\n        setCheckItems([...checkedItems, { ...item }])\r\n        dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n        calculatePercentage()\r\n    }\r\n\r\n\r\n    const calculatePercentage = useCallback(\r\n        () => {\r\n            var number = Object.values(currCheckList.list).length;\r\n            var currChecked = checkedItems.length;\r\n            var percent = (currChecked * 100) / number;\r\n            isNaN(percent) ? setCompleted(0) : setCompleted(percent.toFixed())\r\n        },\r\n        [currCheckList.list, checkedItems.length],\r\n    )\r\n\r\n    useEffect(() => {\r\n        calculatePercentage()\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [calculatePercentage, currCheckItem, currCheckList])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-check-list\">\r\n            <div className=\"card-check-list-section flex space-between\">\r\n                <div className=\"title-container flex align-center\">\r\n\r\n                    <div className=\"icon\">\r\n                        {checklist}\r\n                    </div>\r\n                    <div className=\"check-list-title\">\r\n                        <h3>{checklistName}</h3>\r\n                    </div>\r\n                </div>\r\n                <p className=\"delete-checklist\" onClick={onRemoveCheckList}>Delete</p>\r\n            </div>\r\n            <ProgressBar bgcolor=\"#c9c9ca\" completed={completed} />\r\n            <div className=\"list\">\r\n                {Object.values(currCheckList.list).map(item =>\r\n                    <ItemPreview key={item.id} onCheckItem={onCheckItem} onRemoveCheckListItem={onRemoveCheckListItem} trash={trash} item={item} />\r\n                )}\r\n            </div>\r\n            {!isAddItemVisible &&\r\n                <div className=\"add-item-btn\">\r\n                    <button onClick={onToggleItemVisibility}>Add an item</button>\r\n                </div>\r\n            }\r\n            <div className=\"check-list-action\">\r\n                {\r\n                    isAddItemVisible &&\r\n                    <ActionForm toggleAdd={onToggleItemVisibility} onSubmitFunc={onAddCheckItem} name={'listItem'} placeholder={'Item title'} />\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { setCardDesc } from '../../../../store/actions/cardActions'\r\n\r\n\r\n\r\n\r\nexport function AddDescription({ currCard, currBoard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    const dispatch = useDispatch()\r\n    // const [isDescClicked, setDescClicked] = useState(false)\r\n    const { register, handleSubmit } = useForm();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    const onAddDesc = ({ desc }) => {\r\n        dispatch(setCardDesc(currBoard, currCard, desc))\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-description\">\r\n            <form onSubmit={handleSubmit(onAddDesc)}>\r\n                <textarea defaultValue={currCard.desc} name=\"desc\" ref={register} cols=\"30\" rows=\"10\"></textarea>\r\n                <div className=\"btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Save</button>\r\n                    <button onClick={onCancel}>X</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\nimport { AddDescription } from '.././Description/AddDescription/AddDescription'\r\n\r\nexport function Description({isDescVisible, clipBoard, currBoard, currCard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"description flex\">\r\n            <div className=\"icon\">\r\n                {clipBoard}\r\n            </div>\r\n            <div className=\"description-title\">\r\n                <h3>Description</h3>\r\n                {!isDescVisible &&\r\n                    <div onClick={onToggleCardDesc} className=\"card-description-box\">\r\n                        <p>{currCard.desc}</p>\r\n                    </div>\r\n                }\r\n                {isDescVisible &&\r\n                    <AddDescription onToggleCardDesc={onToggleCardDesc}\r\n                        currBoard={currBoard} currCard={currCard} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleCardDetails, toggleCardWatch, setDueDate } from '../../store/actions/cardActions'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { CardCover } from './CardCover/CardCover'\r\nimport { RightSideMenu } from './RightSideMenu/RightSideMenu'\r\nimport { CardCheckList } from './CardCheckList/CardCheckList'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTicketAlt, faClipboardList, faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport { Description } from './Description/Description';\r\nimport { CardLabel } from './CardLabel/CardLabel';\r\n\r\nexport function CardDetails() {\r\n    const state = useSelector(state => state.mainStore)\r\n    const [isCoverOn, setCoverOn] = useState(false)\r\n    const [istCoverVisibile, setCoverVisibility] = useState(false)\r\n    const { activeBoard } = state\r\n    const [isDescVisible, setDescVisibility] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const currBoard = state.boards[activeBoard]\r\n    const { cardid, listid } = useParams();\r\n    const currCard = currBoard.cards[cardid]\r\n    const currCheckList = Object.values(currCard?.checklist)\r\n\r\n    const ticket = <FontAwesomeIcon icon={faTicketAlt} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n\r\n\r\n    const onToggleCardDetails = () => {\r\n        dispatch(toggleCardDetails(false))\r\n        history.push(`/boards/${activeBoard}`)\r\n    }\r\n\r\n\r\n    const onToggleCover = () => {\r\n        setCoverOn(!isCoverOn)\r\n    }\r\n\r\n    const toggleCardVisibility = () => {\r\n        setCoverVisibility(!istCoverVisibile)\r\n    }\r\n\r\n    const onToggleCardDesc = () => {\r\n        setDescVisibility(!isDescVisible)\r\n    }\r\n\r\n\r\n    const onToggleCardWatch = () => {\r\n        const isWatched = currCard.isWatched\r\n        dispatch(toggleCardWatch(currBoard, currCard, !isWatched))\r\n    }\r\n\r\n    const onRemoveDate = () => {\r\n        dispatch(setDueDate(currBoard, currCard, ''))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [state, currCard.isWatched])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-details\" >\r\n            <span onClick={onToggleCardDetails} >\r\n                <BlackScreen />\r\n            </span>\r\n            <div className=\"card-details-board \">\r\n                {currCard.cardCover &&\r\n                    <CardCover currCard={currCard} onToggleCover={onToggleCover} />\r\n                }\r\n                <div className=\"main flex space-between\">\r\n                    <div className=\"left-side\">\r\n                        <div className=\"title-section \">\r\n                            <div style={{ height: 'fit-content' }} className=\"align-center flex\">\r\n                                <div className=\"icon\">\r\n                                    {ticket}\r\n                                </div>\r\n                                <div className=\"title \">\r\n                                    <h3>{currCard.title} </h3>\r\n                                </div>\r\n                                {currCard.isWatched &&\r\n                                    <div className=\"watched-section\">\r\n                                        {eye}\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            {currCard.dueDate &&\r\n                                <div className=\"due-date-section margin-bottom flex space-between\">\r\n                                    <p>{currCard.dueDate}</p>\r\n                                    <p className=\"remove-date\" onClick={onRemoveDate}>Remove Date</p>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <section className=\"labels\">\r\n                            {currCard.labels.length > 0 &&\r\n                                <div>\r\n                                    <p>Labels</p>\r\n                                    <div className=\"flex\">\r\n                                        {currCard.labels.map(label => {\r\n                                            return <CardLabel key={label} label={label} />\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                        </section>\r\n                        <section className=\"description-section\">\r\n                            <Description clipBoard={clipBoard} isDescVisible={isDescVisible} currBoard={currBoard} currCard={currCard}\r\n                                onToggleCardDesc={onToggleCardDesc} />\r\n                        </section>\r\n                        <section className=\"checkList-section\">\r\n                            {currCheckList.length > 0 &&\r\n                                currCheckList.map(checklist => <div key={checklist.id} >\r\n                                    <CardCheckList currCheckList={checklist} currBoard={currBoard} currCard={currCard} />\r\n                                </div>)\r\n                            }\r\n                        </section>\r\n                    </div>\r\n                    <div className=\"right-side\">\r\n                        <div className=\"close-btn margin-bottom flex\">\r\n                            <button onClick={onToggleCardDetails}>X</button>\r\n                        </div>\r\n                        <RightSideMenu\r\n                            cardid={cardid}\r\n                            listid={listid}\r\n                            currBoard={currBoard}\r\n                            currCard={currCard}\r\n                            toggleCardVisibility={toggleCardVisibility}\r\n                            istCoverVisibile={istCoverVisibile}\r\n                            onToggleCardDetails={onToggleCardDetails}\r\n                            onToggleCardWatch={onToggleCardWatch}\r\n                            onToggleCover={onToggleCover}\r\n                            isCoverOn={isCoverOn}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createList } from '../../store/actions/boardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function AddList({ currBoard, onToggleAddList, windowWidth }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const listName = useRef(null);\r\n\r\n\r\n    const onCreateList = (data) => {\r\n        if (!data.listName) return\r\n        dispatch(createList(currBoard.id, data.listName))\r\n        reset()\r\n        onToggleAddList()\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        listName.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-list \">\r\n            <form onSubmit={handleSubmit(onCreateList)}>\r\n                <div className=\"flex column\">\r\n                    <input rows='1' name=\"listName\" type=\"text\"\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            listName.current = e\r\n                        }} placeholder={'Enter list title'}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n\r\n                        <button className=\"add-btn\" >Add List</button>\r\n                        <button onClick={onToggleAddList} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom'\r\nimport { List } from '../List/List'\r\nimport {\r\n    dragInsideList,\r\n    saveToStorage,\r\n    dragOutsideList,\r\n    dragList,\r\n    setActiveBoard,\r\n    toggleBgSide\r\n} from '../../store/actions/boardActions'\r\n\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { BoardBackground } from '../../cmps/BoardBackground/BoardBackground'\r\nimport { CardDetails } from '../CardDetails/CardDetails'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { AddList } from '../AddList/AddList'\r\n\r\n\r\nexport function Board(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { isCardDetailShown, isBgSideOpen } = state\r\n    const [isAddListVisible, setAddList] = useState(false)\r\n    const [boardStyle, setBoardStyle] = useState()\r\n    const [currBoard, setCurrBoard] = useState()\r\n\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch()\r\n    const boardRef = useRef(null)\r\n\r\n    const loadCurrBoard = useCallback(() => {\r\n        const currBoard = state.boards[id]\r\n        setCurrBoard(currBoard)\r\n        const style = {\r\n            backgroundImage: 'url(/images/bgs/' + currBoard.backgroundImg + '.jpg)',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'no-repeat'\r\n        }\r\n        setBoardStyle(style)\r\n        dispatch(setActiveBoard(currBoard))\r\n    },\r\n        [state.boards, id, dispatch,]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!currBoard) return\r\n    }, [currBoard])\r\n\r\n    const onDragEnd = useMemo(() => async (result) => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) { return }\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) return\r\n\r\n        const start = currBoard.lists[source.droppableId]\r\n        const finish = currBoard.lists[destination.droppableId]\r\n\r\n        if (start === finish && !type === 'list') {\r\n            await dispatch(dragInsideList(start, source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        if (type === 'list') {\r\n            await dispatch(dragList(source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        await dispatch(dragOutsideList(start, source, destination, draggableId, currBoard, finish))\r\n\r\n    }\r\n        , [currBoard, dispatch])\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onToggleAddList = () => {\r\n        setAddList(!isAddListVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        loadCurrBoard()\r\n        return () => {\r\n            dispatch(setActiveBoard(''))\r\n        }\r\n\r\n    }, [loadCurrBoard, dispatch])\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    if (!currBoard) return '...LOADING...'\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={onDragEnd}\r\n        >\r\n            <Droppable\r\n                droppableId=\"all-lists\"\r\n                direction=\"horizontal\"\r\n                type=\"list\"\r\n                className=\"droppable-board\"\r\n            >\r\n                {(provided) => {\r\n                    return (\r\n                        <div ref={boardRef} className=\"board margin-center align-center\" style={boardStyle}>\r\n                            <MainDndArea\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                <div className=\"main-content flex \">\r\n                                    {currBoard.listOrder.map((listId, idx) => {\r\n                                        return <div key={listId} className=\"list-section\">\r\n                                            <List index={idx} cards={currBoard.cards} currBoard={currBoard} lists={currBoard.lists} listId={listId}></List>\r\n                                        </div>\r\n                                    })}\r\n                                    {!isAddListVisible &&\r\n                                        <button onClick={onToggleAddList} className=\"add-list-btn\">Add list</button>\r\n                                    }\r\n                                    {isAddListVisible &&\r\n                                        <AddList currBoard={currBoard} onToggleAddList={onToggleAddList} />\r\n                                    }\r\n                                </div>\r\n                                {isBgSideOpen &&\r\n                                    <span onClick={toggleBgBoard} >\r\n                                        <BlackScreen />\r\n                                    </span>\r\n                                }\r\n                                <div className=\"between\">\r\n                                    <div className={`board-bg ${isBgSideOpen ? 'visible' : ''} `}>\r\n                                        <BoardBackground toggleBgBoard={toggleBgBoard} currBoard={currBoard} state={state} />\r\n                                    </div>\r\n                                </div>\r\n                                {provided.placeholder}\r\n\r\n                            </MainDndArea>\r\n                            {isCardDetailShown &&\r\n                                <CardDetails currBoard={currBoard} />\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Droppable>\r\n        </DragDropContext >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst MainDndArea = styled.div`\r\n    width: 100 %;\r\n    `;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './style/style.scss'\r\nimport { HomePage } from './pages/HomePage/HomePage'\r\nimport { AppHeader } from './cmps/AppHeader/AppHeader'\r\nimport { Board } from './cmps/Board/Board';\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App \">\r\n      <AppHeader history={History}/>\r\n\r\n      <Switch>\r\n      <Route component={HomePage} exact path=\"/\" />\r\n        <Route component={Board} path=\"/boards/:id/:listid?/:cardid?\"/>\r\n      </Switch>\r\n      {/* <Footer/> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import UTILS from '../../service/utils'\r\n\r\nvar initialState = UTILS.loadFromStorage('mainStore')\r\n\r\nif (!initialState)\r\n\r\n\r\n    initialState = {\r\n        boards: {\r\n            'board-1': {\r\n                id: 'board-1',\r\n                name: 'Demo-Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-1': {\r\n                        id: 'card-1',\r\n                        title: 'card-title-1',\r\n                        desc: 'card-desc-1',\r\n                        checklist: {\r\n                            'check-1': {\r\n                                id: 'check-1',\r\n                                name: 'checklist-1',\r\n                                list: {\r\n                                    'firstOne': {\r\n                                        id: 'firstOne', text: 'firstOne', isChecked: false\r\n                                    },\r\n                                    'secondOne': {\r\n                                        id: 'secondOne', text: 'secondOne', isChecked: true\r\n                                    }\r\n                                }\r\n                            },\r\n                            'check-2': {\r\n                                id: 'check-2',\r\n                                name: 'checklist-2',\r\n                                list: {\r\n                                    'firstOne': { id: 'firstOne', text: 'firstOne' }, 'secondOne': { id: 'secondOne', text: 'secondOne' }\r\n                                }\r\n                            }\r\n                        },\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-2': {\r\n                        id: 'card-2',\r\n                        title: 'card-title-2',\r\n                        desc: 'card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-3': {\r\n                        id: 'card-3',\r\n                        title: 'card-title-3',\r\n                        desc: 'card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-4': {\r\n                        id: 'card-4',\r\n                        title: 'card-title-4',\r\n                        desc: 'card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-5': {\r\n                        id: 'card-5',\r\n                        title: 'card-title-5',\r\n                        desc: 'card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-6': {\r\n                        id: 'card-6',\r\n                        title: 'card-title-6',\r\n                        desc: 'card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-7': {\r\n                        id: 'card-7',\r\n                        title: 'card-title-7',\r\n                        desc: 'card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-8': {\r\n                        id: 'card-8',\r\n                        title: 'card-title-8',\r\n                        desc: 'card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-9': {\r\n                        id: 'card-9',\r\n                        title: 'card-title-9',\r\n                        desc: 'card-desc-9',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-10': {\r\n                        id: 'card-10',\r\n                        title: 'card-title-10',\r\n                        desc: 'card-desc-10',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-11': {\r\n                        id: 'card-11',\r\n                        title: 'card-title-11',\r\n                        desc: 'card-desc-11',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-12': {\r\n                        id: 'card-12',\r\n                        title: 'card-title-12',\r\n                        desc: 'card-desc-12',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-1': {\r\n                        id: 'list-1',\r\n                        title: 'todo',\r\n                        cardIds: ['card-1', 'card-2', 'card-3', 'card-4',]\r\n                    },\r\n                    'list-2': {\r\n                        id: 'list-2',\r\n                        title: 'in progress',\r\n                        cardIds: ['card-5', 'card-6', 'card-7', 'card-8',]\r\n                    },\r\n                    'list-3': {\r\n                        id: 'list-3',\r\n                        title: 'done',\r\n                        cardIds: ['card-9', 'card-10', 'card-11', 'card-12',]\r\n                    },\r\n                },\r\n                listOrder: ['list-1', 'list-2', 'list-3'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n            },\r\n            'board-2': {\r\n                id: 'board-2',\r\n                name: 'Eyal\\'s Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-16': {\r\n                        id: 'card-16',\r\n                        title: 'new card-title-1',\r\n                        desc: 'new card-desc-1',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-26': {\r\n                        id: 'card-26',\r\n                        title: 'new card-title-2',\r\n                        desc: 'new card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-36': {\r\n                        id: 'card-36',\r\n                        title: 'new card-title-3',\r\n                        desc: 'new card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-46': {\r\n                        id: 'card-46',\r\n                        title: 'new card-title-4',\r\n                        desc: 'new card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-57': {\r\n                        id: 'card-57',\r\n                        title: 'new card-title-5',\r\n                        desc: 'new card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-67': {\r\n                        id: 'card-67',\r\n                        title: 'new card-title-6',\r\n                        desc: 'new card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-77': {\r\n                        id: 'card-77',\r\n                        title: 'new card-title-7',\r\n                        desc: 'new card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-87': {\r\n                        id: 'card-87',\r\n                        title: 'new card-title-8',\r\n                        desc: 'new card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-13': {\r\n                        id: 'list-13',\r\n                        title: 'todo2',\r\n                        cardIds: ['card-16', 'card-26', 'card-36', 'card-46',]\r\n                    },\r\n                    'list-23': {\r\n                        id: 'list-23',\r\n                        title: 'in progress2',\r\n                        cardIds: ['card-57', 'card-67', 'card-77', 'card-87',]\r\n                    },\r\n                },\r\n                listOrder: ['list-13', 'list-23'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n\r\n            },\r\n        },\r\n        favBoards: {},\r\n        activeBoard: '',\r\n        isCardDetailShown: false,\r\n        isBgSideOpen: false\r\n    };\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_STATE':\r\n            return {\r\n                state: action.state\r\n            };\r\n        case 'UPDATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.updatedList.id]: action.data.updatedList\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.newStartList.id]: action.data.newStartList,\r\n                            [action.data.newFinishList.id]: action.data.newFinishList,\r\n\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS_ORDER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        listOrder: [...action.data.newListOrder]\r\n                    }\r\n                }\r\n            };\r\n        case 'CREATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.newBoard.id]: {\r\n                        ...action.data.newBoard,\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_BOARD':\r\n            const newBoards = state.boards\r\n            delete newBoards[action.data.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...newBoards,\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_NAME':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        name: action.data.boardName\r\n                    },\r\n                },\r\n            };\r\n        case 'CREATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard]: {\r\n                        ...state.boards[action.data.currBoard],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard].lists,\r\n                            [action.data.newList.id]: action.data.newList,\r\n                        },\r\n                        listOrder: [...state.boards[action.data.currBoard].listOrder, action.data.newList.id]\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...action.data.newLists\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n                },\r\n            };\r\n        case 'MOVE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.moveToBoardId]: {\r\n                        ...state.boards[action.data.moveToBoardId],\r\n                        cards: {\r\n                            ...state.boards[action.data.moveToBoardId].cards,\r\n                            ...action.data.currListCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.moveToBoardId].lists,\r\n                            [action.data.listToMove.id]: {\r\n                                ...action.data.listToMove\r\n                            }\r\n                        },\r\n                        listOrder: [...state.boards[action.data.moveToBoardId].listOrder, action.data.listToMove.id]\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'COPY_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            ...action.data.copiedCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copiedList.id]: {\r\n                                ...action.data.copiedList\r\n                            }\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'CHANGE_LIST_NANE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...action.data.currList\r\n                            }\r\n                        },\r\n\r\n                    },\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_BG':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        backgroundImg: action.data.bgName,\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_ACTIVE_BOARD':\r\n            return {\r\n                ...state,\r\n                activeBoard: action.activeBoard.id\r\n            };\r\n        case 'CREATE_CARD':\r\n            console.log('created')\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.newCard.id]: action.data.newCard,\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: [\r\n                                    ...state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds, action.data.newCard.id\r\n                                ]\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            };\r\n        case 'COPY_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.copiedCard.id]: action.data.copiedCard\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copyToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.copyToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.copyToListID].cardIds, action.data.copiedCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'MOVE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds.filter(cardId => cardId !== action.data.currCard.id)\r\n                            },\r\n                            [action.data.moveToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.moveToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.moveToListID].cardIds, action.data.currCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'DELETE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...action.data.currBoard.lists,\r\n                            [action.data.currList.id]: action.data.currList\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'SET_DESC':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                desc: action.data.desc\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_LABEL':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: [...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].labels,action.data.labelColor]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LABELS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: action.data.newLabelList\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'TOGGLE_CARD_WATCH':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                isWatched: action.data.isWatched\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'TOGGLE_CHECK_ITEM':\r\n            const isItemChecked = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id].isChecked\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: {\r\n                                            ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list,\r\n                                            [action.data.currItem.id]: {\r\n                                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id],\r\n                                                isChecked: !isItemChecked\r\n                                            }\r\n                                        },\r\n                                    }\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n\r\n\r\n        case 'SET_DUE_DATE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                dueDate: action.data.dueDate\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CREATE_CHECKLIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist, [action.data.currChecklist.id]: action.data.currChecklist }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'ADD_CHECKLIST_ITEM':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list, [action.data.newItem.id]: action.data.newItem }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'REMOVE_CHECKLIST_ITEM':\r\n            const newChecklistToSave = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            [action.data.currCheckList.id]\r\n            delete newChecklistToSave.list[action.data.itemToRemove.id]\r\n\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: newChecklistToSave\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_CHECKLIST':\r\n            const newChecklist = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            delete newChecklist[action.data.checkListToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: newChecklist\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CARD_COVER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                                { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id], cardCover: action.data.color }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'UPDATE_CURR_LIST':\r\n            return {\r\n                ...state,\r\n                currListId: action.data\r\n            };\r\n        case 'TOGGLE_CARD_DETAILS':\r\n            return {\r\n                ...state,\r\n                isCardDetailShown: action.data\r\n            };\r\n        case 'TOGGLE_BG_SIDE':\r\n            return {\r\n                ...state,\r\n                isBgSideOpen: !state.isBgSideOpen\r\n            };\r\n        case 'TOGGLE_FAV_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.id]: {\r\n                        ...state.boards[action.data.id],\r\n                        isFav: !state.boards[action.data.id].isFav\r\n                    }\r\n                },\r\n                favBoards: {\r\n                    ...state.favBoards,\r\n                    [action.data.id]: action.data\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_SAVED_BOARD':\r\n            delete state.favBoards[action.boardToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.boardToRemove.id]: {\r\n                        ...state.boards[action.boardToRemove.id],\r\n                        isFav: !state.boards[action.boardToRemove.id].isFav\r\n                    }\r\n                },\r\n                favBoards: { ...state.favBoards }\r\n            }\r\n\r\n\r\n        case 'GET_STATE':\r\n            console.log('state:', state)\r\n            return {\r\n                ...state,\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport boardReducer from './boardReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  mainStore: boardReducer,\r\n})\r\n\r\nexport default rootReducer;","\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import history from './history';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router } from 'react-router-dom';\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}