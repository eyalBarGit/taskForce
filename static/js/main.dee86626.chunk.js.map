{"version":3,"sources":["service/utils.js","assets/images/bgs/purple_nature.jpg","assets/images/bgs/mountains.jpg","assets/images/bgs/water.jpg","assets/images/bgs/lake.jpg","assets/images/bgs/boraBora.jpg","assets/images/bgs/sky.jpg","history.js","cmps/BoardList/BoardList.jsx","service/boardService.js","store/actions/boardActions.js","cmps/ActionForm/ActionForm.jsx","pages/HomePage/HomePage.jsx","store/actions/headerActions.js","cmps/CardDetails/DeleteVerify/DeleteVerify.jsx","cmps/AppHeader/AppHeaderMenu/AppHeaderMenu.jsx","cmps/AppHeader/AppHeader.jsx","cmps/CardDetails/CardLabel/CardLabel.jsx","cmps/CardPreview/CardPreview.jsx","service/cardService.js","store/actions/cardActions.js","cmps/CardList/CardList.jsx","service/listService.js","store/actions/listActions.js","cmps/AddCard/AddCard.jsx","cmps/ListMenu/ListMenu.jsx","cmps/ChangeListTitle/ChangeListTitle.jsx","cmps/ListMenu/MoveList/MoveList.jsx","cmps/List/List.jsx","cmps/BoardBackground/BoardBackground.jsx","cmps/CardDetails/BlackScreen/BlackScreen.jsx","cmps/CardDetails/CardCover/CardCover.jsx","cmps/CardDetails/CopyCard/CopyCard.jsx","cmps/CardDetails/MoveCard/MoveCard.jsx","cmps/ColorPallette/ColorPallette.jsx","cmps/CardDetails/CardCoverMenu/CardCoverMenu.jsx","cmps/CardDetails/RightSideMenu/AddCheckList/AddCheckList.jsx","cmps/CardDetails/LabelsMenu/LabelsMenu.jsx","cmps/CardDetails/RightSideMenu/RightSideMenu.jsx","cmps/ProgressBar/ProgressBar.jsx","cmps/CardDetails/CardCheckList/ItemPreview/ItemPreview.jsx","cmps/CardDetails/CardCheckList/CardCheckList.jsx","cmps/CardDetails/Description/AddDescription/AddDescription.jsx","cmps/CardDetails/Description/Description.jsx","cmps/CardDetails/CardDetails.jsx","cmps/AddList/AddList.jsx","cmps/Board/Board.jsx","App.js","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["generatePassword","length","charset","retVal","i","n","charAt","Math","floor","random","loadFromStorage","key","val","localStorage","getItem","JSON","parse","getRandomIntInclusive","min","max","ceil","saveToStorage","setItem","stringify","module","exports","history","createBrowserHistory","BoardList","props","mainStore","useSelector","state","boards","favBoards","useState","boardList","setBoardList","getAllBoards","useCallback","allBoards","board","currBoard","push","init","useEffect","className","map","id","to","alt","src","backgroundImg","name","Object","values","boardName","a","UTILS","isFav","cards","lists","listOrder","navBarTheme","createdAt","Date","toLocaleDateString","title","content","cardIds","store","start","source","destination","draggableId","newCardIds","Array","from","splice","index","updatedList","finish","startCardIds","newStartList","finishCardIds","newFinishList","newListOrder","createBoard","createCard","createList","dragOutsideList","updateList","dragList","dragInsideList","dispatch","service","data","console","log","_dragInsideList","res","_dragOutsideList","_dragList","newBoard","_createBoard","removeSavedBoard","type","boardToRemove","changeBoardBackground","bgName","_changeBoardBg","setActiveBoard","boardId","activeBoard","_createList","_changeBoardName","ActionForm","placeholder","onSubmitFunc","toggleAdd","currRef","useRef","useForm","register","handleSubmit","current","focus","onSubmit","style","resize","ref","e","autoComplete","onClick","HomePage","useParams","useDispatch","isAddBoardVis","setAddBoardVis","onToggleAddBoard","boardTitle","DeleteVerify","onDelete","onToggle","itemToDelete","AppHeaderMenu","onRemoveSavedBoard","onToggleAppHeaderMenu","useHistory","isChangeNameVis","setChangeName","isAddListVisible","setAddListVisibility","isDeleteVerify","setDeleteVerify","onToggleAddList","onToggleBoardName","onToggleDleteBoard","changeBoardName","boardToDelete","listName","listTitle","boardService","newList","AppHeader","bottomNav","isBgBoardOpen","setIsBgBoardOpen","isHeaderMenuVisible","setHeaderMenu","home","icon","faHome","faBorderAll","plusSign","faPlus","info","faInfoCircle","notifications","faBell","star","faStar","favoriteBoard","CardLabel","label","backgroundColor","CardPreview","currCard","cardid","pencil","faPencilAlt","checklist","faTasks","clock","faClock","eye","faEye","clipBoard","faClipboardList","provided","snapshot","MainContainer","draggableProps","dragHandleProps","innerRef","isDragging","cardCover","labels","isWatched","dueDate","fontSize","substring","desc","keys","styled","div","CopyCard","cardToCopy","this","description","deleteCard","currList","cardId","filter","cardsId","copyCard","newCard","createCheckList","checkListName","list","createCheckListItem","itemName","text","isChecked","removeLabel","labelIndex","toggleCardDetails","isCardDetailShown","checkItem","currCheckList","currItem","_toggleCheckItem","setCardCover","color","_setCardCover","setDueDate","_setDueDate","_setCardDesc","_addChecklist","_removeCheckList","_addCheckListItem","_removeCheckListItem","_toggleCardWatch","_setLabel","_updateLabels","CardList","currListID","onToggleCardDetails","listId","idx","require","_deleteCards","cardID","newBoardCards","newLists","currListCardIds","forEach","listToCopy","copiedListTitle","matchingCards","newCards","cardIdsToCopy","_findMatchingCards","card","cardCopy","findIndex","element","end","copiedList","copiedCards","cardsToCopy","allCards","deleteList","cardTitle","copyList","getListCards","currCards","listService","updatedData","_deleteList","_createCard","_copyList","_moveList","_changeListName","AddCard","toggleAddCard","reset","ListMenu","toggleListMenu","toggleEditTitle","onToggleMoveList","clicked","window","addEventListener","removeEventListener","newListCopy","ChangeListTitle","changeListName","newTitle","width","MoveList","moveTo","setMoveTo","onChange","moveToBoardId","target","value","listToMove","currListCards","moveList","List","setCurrList","isAddCardShown","setAddCard","isListMenuShown","setListMenu","isEditTitle","setIsEditTitle","isMoveListVisible","setMoveList","plus","listMenu","faEllipsisH","getCurrList","onToggleAddCard","onToggleListMenu","MainDragContainer","droppableId","MainDropContainer","droppableProps","BoardBackground","toggleBgBoard","close","faTimes","changeBackgroundImg","nature","mountains","water","lake","boraBora","sky","BlackScreen","CardCover","onToggleCopyCard","listOptions","setListOptions","onCopyCard","copyToList","cardService","copiedCard","copyToListID","MoveCard","onToggleMoveCard","onMoveCard","moveToList","moveTocardIds","includes","moveToListID","moveCard","ColorPallette","onSelectColor","onToggleColor","code","CardCoverMenu","toggleCardVisibility","onCloseCover","onCloseColor","AddCheckList","onToggleCheckList","onAddCheckList","checklistName","marginBlockEnd","LabelsMenu","onSetLabel","RightSideMenu","onToggleCover","isCoverOn","listid","onToggleCardWatch","isCopyClicked","setCopyClick","isMoveClicked","setMoveClick","isDeleteClicked","setDeleteClick","isAddCheckList","setAddChecklist","isLabelMenuVis","setLabelMenuVis","date","setDates","isCalShown","toggleShowCal","avatar","faUser","faTag","paperClip","faPaperclip","arrow","faArrowRight","copy","faCopy","trash","faTrashAlt","share","faShareAlt","cover","faColumns","onToggleLabelMenu","onToggleDeleteCard","colorCode","newLabelList","labelColor","setLabel","newChecklist","currChecklist","newDate","toString","ProgressBar","bgcolor","completed","fillerStyles","borderRadius","textAlign","fontWeight","ItemPreview","onCheckItem","item","onRemoveCheckListItem","checked","CardCheckList","isAddItemVisible","setItemVisible","checkedItems","setCheckItems","currCheckItem","setCurrCheckItem","setCompleted","checkedItem","itemToRemove","removeCheckListItem","newCheckedItems","onToggleItemVisibility","calculatePercentage","number","percent","isNaN","toFixed","checkListToRemove","removeCheckList","listItem","newItem","addCheckListItem","AddDescription","onToggleCardDesc","setCardDesc","defaultValue","cols","rows","Description","isDescVisible","CardDetails","setCoverOn","istCoverVisibile","setCoverVisibility","setDescVisibility","ticket","faTicketAlt","height","toggleCardWatch","AddList","windowWidth","Board","isBgSideOpen","setAddList","boardStyle","setBoardStyle","setCurrBoard","boardRef","loadCurrBoard","backgroundImage","backgroundSize","backgroundRepeat","onDragEnd","useMemo","result","direction","MainDndArea","App","History","component","exact","path","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","newBoards","isItemChecked","newChecklistToSave","currListId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dee86626.chunk.js","sourcesContent":["function getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    const final = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return final\r\n}\r\n\r\n// function getRandomIntInclusive(min, max) {\r\n//     min = Math.ceil(min);\r\n//     max = Math.floor(max);\r\n//     return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \r\n// }\r\nfunction generatePassword(length) {\r\n    var charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\r\n        retVal = \"\";\r\n    for (var i = 0, n = charset.length; i < length; ++i) {\r\n        retVal += charset.charAt(Math.floor(Math.random() * n));\r\n    }\r\n    return retVal;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val)\r\n}\r\nexport default {\r\n    generatePassword,\r\n    loadFromStorage,\r\n    getRandomIntInclusive,\r\n    saveToStorage,\r\n}","module.exports = __webpack_public_path__ + \"static/media/purple_nature.72bb8802.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mountains.736266ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water.d264abfb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lake.c140c866.jpg\";","module.exports = __webpack_public_path__ + \"static/media/boraBora.989f4a87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sky.cc4c0d26.jpg\";","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport function BoardList(props) {\r\n    const mainStore = useSelector(state => state.mainStore)\r\n    const { boards, favBoards } = mainStore\r\n    const [boardList, setBoardList] = useState('')\r\n\r\n\r\n\r\n    const getAllBoards = useCallback(\r\n        () => {\r\n            const allBoards = []\r\n            for (const board in boards) {\r\n                const currBoard = boards[board];\r\n                allBoards.push(currBoard)\r\n            }\r\n            return allBoards\r\n        },\r\n        [boards],\r\n    )\r\n\r\n\r\n    const init = useCallback(\r\n        () => {\r\n            setBoardList(getAllBoards())\r\n        },\r\n        [getAllBoards],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [init])\r\n\r\n\r\n\r\n    if (!boardList) return 'LOADING...'\r\n    return (\r\n        <div className=\"board-list \">\r\n            <h2>All Boards</h2>\r\n            <div className=\"board-list-container justify-center flex wrap\">\r\n                {boardList.map(board => {\r\n                    return <div className=\"container margin-center flex\" key={board.id}>\r\n                        <div className=\"boards flex\">\r\n                            <Link to={`boards/${board.id}`}><img\r\n                                alt=\"board\"\r\n                                src={`/images/bgs/${board.backgroundImg}.jpg`}></img>\r\n                                <p>{board.name}</p>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"fav-boards \">\r\n                <h2>Favorite Boards</h2>\r\n                <div className=\"fav-boards-container flex wrap\">\r\n                    {Object.values(favBoards).map(board => {\r\n                        return <div className=\"container margin-center \" key={board.id}>\r\n                            <div className=\"boards flex \">\r\n                                <Link to={`boards/${board.id}`}>\r\n                                    <img\r\n                                        alt=\"boards\"\r\n                                        src={`/images/bgs/${board.backgroundImg}.jpg`}></img>\r\n                                    <p>{board.name}</p>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// const UTILS = require('./utils')\r\nimport UTILS from './utils'\r\nconst KEY = 'mainStore'\r\n\r\nasync function createBoard(boardName) {\r\n  return {\r\n    id: UTILS.generatePassword(4),\r\n    name: boardName,\r\n    isFav: false,\r\n    cards: {\r\n\r\n    },\r\n    lists: {\r\n\r\n    },\r\n    listOrder: [],\r\n    backgroundImg: 'sky',\r\n    navBarTheme: 'bright',\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function createCard(title) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: title,\r\n    content: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\nasync function createList(title) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: title,\r\n    cardIds: [],\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function saveToStorage(store) {\r\n  UTILS.saveToStorage(KEY, store)\r\n}\r\n\r\nasync function updateList(start, source, destination, draggableId) {\r\n  const newCardIds = Array.from(start.cardIds)\r\n  newCardIds.splice(source.index, 1)\r\n  newCardIds.splice(destination.index, 0, draggableId)\r\n  const updatedList = {\r\n    ...start,\r\n    cardIds: newCardIds\r\n  }\r\n  return updatedList\r\n}\r\n\r\nasync function dragOutsideList(start, source, destination, draggableId, finish) {\r\n  const startCardIds = start.cardIds\r\n  startCardIds.splice(source.index, 1);\r\n\r\n  const newStartList = {\r\n    ...start,\r\n    cardIds: startCardIds\r\n  }\r\n\r\n  const finishCardIds = finish.cardIds\r\n  finishCardIds.splice(destination.index, 0, draggableId);\r\n  const newFinishList = {\r\n    ...finish,\r\n    cardIds: finishCardIds\r\n  }\r\n  return {\r\n    newStartList: newStartList,\r\n    newFinishList: newFinishList\r\n  }\r\n}\r\nasync function dragList(source, destination, draggableId, currBoard) {\r\n\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(source.index, 1)\r\n  newListOrder.splice(destination.index, 0, draggableId)\r\n  return newListOrder\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  saveToStorage,\r\n  createBoard,\r\n  createCard,\r\n  createList,\r\n  dragOutsideList,\r\n  updateList,\r\n  dragList\r\n}\r\n","import service from '../../service/boardService'\r\n\r\n\r\nexport function dragInsideList(start, source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedList = await service.updateList(start, source, destination, draggableId)\r\n            const data = {\r\n                updatedList: updatedList,\r\n                currBoard: currBoard\r\n            }\r\n            console.log('currBoard', currBoard)\r\n            dispatch(_dragInsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragOutsideList(start, source, destination, draggableId, currBoard, finish) {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await service.dragOutsideList(start, source, destination, draggableId, finish)\r\n            const data = {\r\n                newStartList: res.newStartList,\r\n                newFinishList: res.newFinishList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragOutsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragList(source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const newListOrder = await service.dragList(source, destination, draggableId, currBoard)\r\n            const data = {\r\n                newListOrder: newListOrder,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragList(data));\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createBoard(boardName = \"New Board\") {\r\n    return async dispatch => {\r\n        try {\r\n            const newBoard = await service.createBoard(boardName)\r\n            const data = {\r\n                newBoard: newBoard,\r\n            }\r\n            dispatch(_createBoard(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteBoard(boardToDelete) {\r\n    return async dispatch => {\r\n        try {\r\n\r\n            dispatch(_deleteBoard(boardToDelete))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeBoardName(currBoard, boardName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                boardName: boardName\r\n            }\r\n            dispatch(_changeBoardName(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function createList(currBoard, listName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await service.createList(listName)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_createList(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function favoriteBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_favoriteBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeSavedBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_removeSavedBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeBoardBackground(currBoard, bgName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                bgName: bgName,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_changeBoardBg(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function setActiveBoard(boardId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setActiveBoard(boardId))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function saveToStorage(store) {\r\n    return async dispatch => {\r\n        try {\r\n            await service.saveToStorage(store)\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _setActiveBoard(activeBoard) {\r\n    return {\r\n        type: 'SET_ACTIVE_BOARD',\r\n        activeBoard\r\n    }\r\n}\r\n\r\n\r\nfunction _dragInsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _dragOutsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS',\r\n        data\r\n    }\r\n}\r\nfunction _dragList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS_ORDER',\r\n        data\r\n    }\r\n}\r\nfunction _createList(data) {\r\n\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardBg(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_BG',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}\r\nfunction _favoriteBoard(data) {\r\n    return {\r\n        type: 'TOGGLE_FAV_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _removeSavedBoard(boardToRemove) {\r\n    return {\r\n        type: 'REMOVE_SAVED_BOARD',\r\n        boardToRemove\r\n    }\r\n}\r\nfunction _createBoard(data) {\r\n    return {\r\n        type: 'CREATE_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardName(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_NAME',\r\n        data\r\n    }\r\n}\r\nfunction _deleteBoard(data) {\r\n    return {\r\n        type: 'DELETE_BOARD',\r\n        data\r\n    }\r\n}","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nexport function ActionForm({ placeholder, name, onSubmitFunc, toggleAdd }) {\r\n    const currRef = useRef(null);\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    useEffect(() => {\r\n        currRef.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"action-form\">\r\n            <form onSubmit={handleSubmit(onSubmitFunc)}>\r\n                <div className=\"flex column\">\r\n                    <input name={name} type=\"text\"\r\n                        style={{ resize: \"none\" }}\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            currRef.current = e\r\n                        }} placeholder={placeholder}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n                        <button className=\"add-btn\" >Add</button>\r\n                        <button onClick={toggleAdd} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BoardList } from '../../cmps/BoardList/BoardList'\r\nimport { useParams } from 'react-router-dom'\r\nimport { setActiveBoard, saveToStorage } from '../../store/actions/boardActions'\r\nimport { createBoard } from '../../store/actions/boardActions';\r\nimport { ActionForm } from '../../cmps/ActionForm/ActionForm';\r\n\r\nexport function HomePage(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { id } = useParams();\r\n    const currBoard = state.boards[id]\r\n    const dispatch = useDispatch()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAddBoard()\r\n    }\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setActiveBoard('0'))\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home-page margin-center\">\r\n            <div className=\"center-container margin-center\">\r\n                <div className=\"flex align-center space-between\">\r\n                    <h1>CHOOSE YOUR BOARD</h1>\r\n                    \r\n                    <div className=\"add-board-section flex\">\r\n                        {!isAddBoardVis &&\r\n                            <button onClick={onToggleAddBoard} className=\"create-board\">Create Board</button>\r\n                        }\r\n                        {isAddBoardVis &&\r\n                            <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'} toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"borad-list-container flex justify-center\">\r\n                    <div className=\"side-bar\">\r\n                    </div>\r\n                    <section className=\"board-list-section\">\r\n                        <BoardList />\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import boardService from '../../service/boardService';\r\n\r\nexport function createList(currBoard, listTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await boardService.createList(listTitle)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard,\r\n            }\r\n            dispatch(_createList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n\r\n}\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction _createList(data) {\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport function DeleteVerify({ onDelete, onToggle,itemToDelete }) {\r\n\r\n    return (\r\n        <div className=\"delete-verify\">\r\n            <div className=\"main-content-delete flex column\">\r\n                <p>Delete this {itemToDelete}?</p>\r\n                <div className=\"btns flex space-between\">\r\n\r\n                    <button className=\"dlt-btn\" onClick={onDelete}>Delete</button>\r\n                    <button onClick={onToggle}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createList } from '../../../store/actions/headerActions'\r\nimport { createBoard, changeBoardName, deleteBoard } from '../../../store/actions/boardActions';\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useHistory } from 'react-router';\r\nimport { DeleteVerify } from '../../CardDetails/DeleteVerify/DeleteVerify';\r\n\r\nexport function AppHeaderMenu({ onRemoveSavedBoard, activeBoard, onToggleAppHeaderMenu, currBoard }) {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n    const [isChangeNameVis, setChangeName] = useState(false)\r\n    const [isAddListVisible, setAddListVisibility] = useState(false)\r\n    const [isDeleteVerify, setDeleteVerify] = useState(false)\r\n\r\n    const onToggleAddList = () => {\r\n        setAddListVisibility(!isAddListVisible)\r\n    }\r\n\r\n    const onAddList = ({ listName }) => {\r\n        dispatch(createList(activeBoard, listName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n    const onToggleBoardName = () => {\r\n        setChangeName(!isChangeNameVis)\r\n    }\r\n\r\n    const onChangeBoardName = (data) => {\r\n        dispatch(changeBoardName(currBoard, data.boardName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onDeleteBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch( onRemoveSavedBoard(currBoard))\r\n        }\r\n        onToggleAppHeaderMenu()\r\n        dispatch(deleteBoard(currBoard))\r\n        history.push('/')\r\n    }\r\n\r\n\r\n    const onToggleDleteBoard = () => {\r\n        setDeleteVerify(!isDeleteVerify)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"app-header-menu\">\r\n            <div className=\"container\">\r\n                <div className=\"title flex justify-center\">\r\n                    <h3>Board Actions</h3>\r\n                </div>\r\n                <hr />\r\n                <div className=\"menu-actions\">\r\n                    {!isChangeNameVis &&\r\n                        <p onClick={onToggleBoardName}>Change Board Name...</p>\r\n                    }\r\n\r\n                    {isChangeNameVis &&\r\n                        <ActionForm name=\"boardName\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleBoardName} onSubmitFunc={onChangeBoardName} />\r\n                    }\r\n                    {!isAddBoardVis &&\r\n                        <p onClick={onToggleAddBoard}>Create Board...</p>\r\n                    }\r\n                    {isAddBoardVis &&\r\n                        <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                    }\r\n                    {!isDeleteVerify &&\r\n                        <p onClick={onToggleDleteBoard}>Delete Board...</p>\r\n                    }\r\n\r\n                    {isDeleteVerify &&\r\n                        <DeleteVerify itemToDelete={'board'} onToggle={onToggleDleteBoard} onDelete={onDeleteBoard} />\r\n                    }\r\n                    {!isAddListVisible &&\r\n                        <p onClick={onToggleAddList}>Add List...</p>\r\n                    }\r\n                    {isAddListVisible &&\r\n                        <ActionForm name=\"listName\" placeholder={'Add list Title'}\r\n                            toggleAdd={onToggleAddList} onSubmitFunc={onAddList} />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toggleBgSide } from '../../store/actions/headerActions'\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { favoriteBoard, removeSavedBoard } from '../../store/actions/boardActions'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBorderAll } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { AppHeaderMenu } from './AppHeaderMenu/AppHeaderMenu';\r\n\r\n\r\n\r\nexport function AppHeader(props) {\r\n\r\n    const state = useSelector(state => state.mainStore)\r\n    const { activeBoard } = state\r\n    const currBoard = state.boards[activeBoard]\r\n    const navBarTheme = currBoard?.navBarTheme\r\n    const bottomNav = currBoard?.bottomNav\r\n    const [isBgBoardOpen, setIsBgBoardOpen] = useState(false)\r\n    const [isHeaderMenuVisible, setHeaderMenu] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const home = <FontAwesomeIcon icon={faHome} />\r\n    const boards = <FontAwesomeIcon icon={faBorderAll} />\r\n    const plusSign = <FontAwesomeIcon icon={faPlus} />\r\n    const info = <FontAwesomeIcon icon={faInfoCircle} />\r\n    const notifications = <FontAwesomeIcon icon={faBell} />\r\n    const star = <FontAwesomeIcon icon={faStar} />\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        setIsBgBoardOpen(!isBgBoardOpen)\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onSaveBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch(removeSavedBoard(currBoard))\r\n            return\r\n        }\r\n        dispatch(favoriteBoard(currBoard))\r\n    }\r\n\r\n    const onToggleAppHeaderMenu = () => {\r\n        setHeaderMenu(!isHeaderMenuVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [activeBoard, navBarTheme])\r\n\r\n    return (\r\n        <nav className={`app-header flex column ${navBarTheme}`}>\r\n            <div className={`top-part flex ${navBarTheme}`}>\r\n                <div className=\"nav-tools flex space-between align-center\">\r\n                    <div className=\"left-side flex align-center\">\r\n                        <Link to=\"/\"><button className=\"home\">{home}</button></Link>\r\n                        <button>{boards} <span className=\"desktop-boards\">Boards</span> </button>\r\n                        <input type=\"text\" placeholder=\"SEARCH...\" />\r\n                    </div>\r\n                    <div className=\"logo\">\r\n                        <h1>TaskForce</h1>\r\n                    </div>\r\n                    <div className=\"right-side flex align-center\">\r\n                        <button onClick={onToggleAppHeaderMenu}>{plusSign}</button>\r\n                        <button>{info}</button>\r\n                        <button>{notifications}</button>\r\n                        <button>account</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            {activeBoard && currBoard &&\r\n                <div className={`bottom-nav flex align-center ${bottomNav}`}>\r\n                    <h1> {currBoard.name}</h1>\r\n                    <button className=\"btn\" onClick={toggleBgBoard}>Change Background</button>\r\n                    <button onClick={onSaveBoard} className={`btn btn-fav-board ${currBoard?.isFav ? 'saved' : ''}`}>{star}</button>\r\n                    <p>Total Lists: {currBoard.listOrder.length}</p>\r\n                    {isHeaderMenuVisible &&\r\n                        <AppHeaderMenu onRemoveSavedBoard={removeSavedBoard} currBoard={currBoard} activeBoard={activeBoard} onToggleAppHeaderMenu={onToggleAppHeaderMenu} />\r\n                    }\r\n                </div>\r\n            }\r\n        </nav >\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport function CardLabel({ label }) {\r\n    return (\r\n        <div style={{ backgroundColor: `${label}` }} className=\"card-label\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt, faTasks, faClock, faEye, faClipboardList } from '@fortawesome/free-solid-svg-icons'\r\nimport { CardLabel } from '../CardDetails/CardLabel/CardLabel'\r\nexport function CardPreview(props) {\r\n\r\n    const { cards, cardid, } = props\r\n    const currCard = cards[cardid]\r\n\r\n    const pencil = <FontAwesomeIcon icon={faPencilAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    if (!currCard) return 'loading...'\r\n    return (\r\n        <Draggable draggableId={currCard?.id} index={props.index}>\r\n            {(provided, snapshot) => (\r\n                <div>\r\n                    <MainContainer\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        <div className=\"card-preview flex column\">\r\n                            {currCard.cardCover &&\r\n                                <div style={{ backgroundColor: `${currCard.cardCover}` }} className=\"card-top-cover\">\r\n                                </div>\r\n                            }\r\n                            <div className=\"card-labels flex\">\r\n\r\n                                {currCard.labels && currCard.labels.map(label => {\r\n                                    return <CardLabel key={label} label={label} />\r\n                                })}\r\n                            </div>\r\n                            <div className=\"main-card-preview-content\">\r\n\r\n                                <div className=\"top-section flex space-between\">\r\n                                    <div className=\"title\">\r\n                                        <p>{currCard?.title}</p>\r\n                                    </div>\r\n                                    <span className=\"edit\" >{pencil}</span>\r\n                                </div>\r\n                                <div className=\"indicators flex align-center\">\r\n                                    {currCard.isWatched &&\r\n                                        eye\r\n                                    }\r\n                                    {currCard.dueDate &&\r\n                                        <span className=\"flex align-center\">\r\n                                            {clock}\r\n                                            <p style={{ fontSize: '10px' }}>\r\n\r\n                                                {currCard.dueDate.substring(4, 10)}\r\n                                            </p>\r\n                                        </span>\r\n                                    }\r\n                                    {currCard.desc &&\r\n                                        clipBoard\r\n                                    }\r\n                                    {Object.keys(currCard.checklist).length > 0 &&\r\n                                        checklist\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </MainContainer>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\n\r\nconst MainContainer = styled.div`\r\n\r\nwidth:100%;\r\n`;","import UTILS from '../service/utils'\r\n\r\n\r\n\r\n\r\nfunction deleteCard(currBoard, currList, cardId) {\r\n  const newCards = currBoard.cards\r\n  delete newCards[cardId]\r\n\r\n  const newCardIds = currList.cardIds.filter((cardsId) => cardsId !== cardId)\r\n  currList.cardIds = newCardIds\r\n\r\n  return { currBoard: currBoard, currList: currList, cardId }\r\n}\r\n\r\n\r\n\r\nfunction copyCard(newCard) {\r\n  return new CopyCard(newCard)\r\n}\r\n\r\n\r\nfunction CopyCard(cardToCopy) {\r\n    this.id = UTILS.generatePassword(5);\r\n    this.title = cardToCopy.title;\r\n    this.description = cardToCopy.description;\r\n    this.cardCover = cardToCopy.cardCover;\r\n    this.checklist = cardToCopy.checklist;\r\n    this.isWatched = false;\r\n    this.dueDate = cardToCopy.dueDate;\r\n    this.labels = cardToCopy.labels;\r\n    this.createdAt = new Date().toLocaleDateString()\r\n}\r\n\r\nfunction createCheckList(checkListName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    name: checkListName,\r\n    list: {},\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCheckListItem(itemName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    text: itemName,\r\n    isChecked: false,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\nfunction removeLabel(currCard, labelIndex) {\r\n  currCard.labels.splice(labelIndex, 1)\r\n  const newLabelList = currCard.labels\r\n  return newLabelList\r\n}\r\n\r\n\r\n\r\nexport default {\r\n  deleteCard,\r\n  copyCard,\r\n  createCheckList,\r\n  createCheckListItem,\r\n  removeLabel\r\n}","import cardService from '../../service/cardService';\r\n\r\nexport function toggleCardDetails(isCardDetailShown) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleCardDetails(isCardDetailShown));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateCurrList(listId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateCurrList(listId));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteCard(currBoard, currList, cardId) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await cardService.deleteCard(currBoard, currList, cardId)\r\n\r\n            dispatch(_deleteCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function copyCard(currBoard, copyToList, cardToCopy) {\r\n    console.log('cardToCopy:', cardToCopy)\r\n    return async dispatch => {\r\n        try {\r\n            const copiedCard = await cardService.copyCard(cardToCopy)\r\n            const updatedData = {\r\n                copiedCard: copiedCard,\r\n                currBoard: currBoard,\r\n                copyToListID: copyToList\r\n            }\r\n            dispatch(_copyCard(updatedData));\r\n            console.log('newCard is:', copiedCard)\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function moveCard(currBoard, moveToList, currCard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = {\r\n                currBoard: currBoard,\r\n                moveToListID: moveToList,\r\n                currCard: currCard,\r\n                currList: currList\r\n            }\r\n            dispatch(_moveCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setCardDesc(currBoard, currCard, desc) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                desc: desc,\r\n            }\r\n            dispatch(_setCardDesc(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function checkItem(currBoard, currCard, currCheckList, currItem, isChecked) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                currItem: currItem,\r\n                isChecked: isChecked\r\n            }\r\n            dispatch(_toggleCheckItem(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setLabel(currBoard, currCard, labelColor) {\r\n    console.log('currCardofLabels:', currCard)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        labelColor: labelColor\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setLabel(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeLabel(currBoard, currCard, labelIndex) {\r\n    const newLabelList = cardService.removeLabel(currCard, labelIndex)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        newLabelList: newLabelList\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateLabels(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function toggleCardWatch(currBoard, currCard, isWatched) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                isWatched: isWatched\r\n            }\r\n            dispatch(_toggleCardWatch(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createCheckList(currBoard, currCard, checklistName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newChecklist = await cardService.createCheckList(checklistName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currChecklist: newChecklist,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_addChecklist(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCheckListItem(currBoard, currCard, currCheckList, itemName) {\r\n    return async dispatch => {\r\n        try {\r\n            const currItem = await cardService.createCheckListItem(itemName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                newItem: currItem\r\n            }\r\n            dispatch(_addCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckListItem(currBoard, currCard, currCheckList, itemToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                itemToRemove: itemToRemove\r\n            }\r\n            dispatch(_removeCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckList(currBoard, currCard, checkListToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                checkListToRemove: checkListToRemove,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_removeCheckList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function setCardCover(currBoard, currCard, color) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                color: color,\r\n            }\r\n            dispatch(_setCardCover(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDueDate(currBoard, currCard, dueDate) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                dueDate: dueDate,\r\n            }\r\n            dispatch(_setDueDate(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _toggleCardDetails(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_DETAILS',\r\n        data\r\n    }\r\n}\r\nfunction _updateCurrList(data) {\r\n    return {\r\n        type: 'UPDATE_CURR_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _deleteCard(data) {\r\n    return {\r\n        type: 'DELETE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyCard(data) {\r\n    return {\r\n        type: 'COPY_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _moveCard(data) {\r\n    return {\r\n        type: 'MOVE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _setCardCover(data) {\r\n    return {\r\n        type: 'CARD_COVER',\r\n        data\r\n    }\r\n}\r\nfunction _setCardDesc(data) {\r\n    return {\r\n        type: 'SET_DESC',\r\n        data\r\n    }\r\n}\r\nfunction _addChecklist(data) {\r\n    return {\r\n        type: 'CREATE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckList(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _addCheckListItem(data) {\r\n    return {\r\n        type: 'ADD_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckListItem(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setDueDate(data) {\r\n    return {\r\n        type: 'SET_DUE_DATE',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCardWatch(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_WATCH',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCheckItem(data) {\r\n    return {\r\n        type: 'TOGGLE_CHECK_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setLabel(data) {\r\n    return {\r\n        type: 'SET_LABEL',\r\n        data\r\n    }\r\n}\r\nfunction _updateLabels(data) {\r\n    return {\r\n        type: 'UPDATE_LABELS',\r\n        data\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { CardPreview } from '../CardPreview/CardPreview';\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardDetails ,updateCurrList} from '../../store/actions/cardActions'\r\n\r\nexport function CardList(props) {\r\n    const { cards, provided, cardIds, currListID } = props\r\n    const params = useParams()\r\n    const { id } = params\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onToggleCardDetails = (cardid) => {\r\n        history.push(`/boards/${id}/${currListID}/${cardid}`)\r\n        dispatch(updateCurrList(currListID.id))\r\n        dispatch(toggleCardDetails(true))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [cardIds])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {cardIds.map((cardid, idx) => {\r\n                return <div key={cardid} onClick={() => onToggleCardDetails(cardid)}>\r\n\r\n                    <CardPreview\r\n                        key={cardid}\r\n                        cards={cards}\r\n                        index={idx}\r\n                        cardid={cardid} />\r\n\r\n                </div>\r\n            })}\r\n            {provided.placeholder}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","// const { createCard } = require('../store/actions/listActions')\r\nconst UTILS = require('./utils')\r\n\r\n\r\n// async function exampleFunction(cardsToSplit) {\r\n//   const cards = []\r\n//   for (let i = 0; i < cardsToSplit.length; i++) {\r\n//     const secondaryCard = {\r\n//       currCards: [],\r\n//       score: 0\r\n//     }\r\n\r\n//     secondaryCard.currCards[0] = cardsToSplit[i]\r\n//     secondaryCard.score = _scoreCal(secondaryCard.currCards)\r\n\r\n//     cards.push(secondaryCard)\r\n//   }\r\n//   return cards\r\n// }\r\n\r\n\r\nasync function deleteList(currBoard, currList) {\r\n  const newLists = currBoard.lists\r\n  delete newLists[currList.id]\r\n  const newListOrder = currBoard.listOrder.filter(list => list !== currList.id)\r\n\r\n  const currListCardIds = currList.cardIds\r\n  const newBoardCards = currBoard.cards\r\n\r\n\r\n  function _deleteCards(cardID) {\r\n    delete newBoardCards[cardID]\r\n  }\r\n  currListCardIds.forEach(cardID => _deleteCards(cardID))\r\n\r\n\r\n  return {\r\n    newLists: newLists,\r\n    newListOrder: newListOrder,\r\n    newBoardCards: newBoardCards\r\n  }\r\n\r\n}\r\n\r\n\r\nasync function copyList(currBoard, listToCopy) {\r\n  const copiedListTitle = 'Copy of - ' + listToCopy.title\r\n  const newList = await _createList(copiedListTitle)\r\n  const matchingCards = []\r\n  const newCards = {}\r\n  const cardIdsToCopy = listToCopy.cardIds\r\n  _findMatchingCards(matchingCards, cardIdsToCopy, currBoard.cards)\r\n\r\n  matchingCards.forEach(\r\n    card => {\r\n      const cardCopy = copyCard(card)\r\n      newCards[cardCopy.id] = cardCopy\r\n      return\r\n    }\r\n  )\r\n  newList.cardIds = Object.keys(newCards)\r\n\r\n  const start = currBoard.listOrder.findIndex(element => element === listToCopy.id)\r\n  const end = newList.id\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(start + 1, 0, end)\r\n\r\n  return {\r\n    copiedList: newList,\r\n    newListOrder: newListOrder,\r\n    copiedCards: newCards\r\n  }\r\n}\r\n\r\n\r\nfunction getListCards(cards, list) {\r\n  const currCards = {}\r\n  list.cardIds.forEach((cardID) => { return cards[cardID] ? currCards[cardID] = cards[cardID] : '' })\r\n  return currCards\r\n}\r\n\r\n\r\n\r\nfunction _findMatchingCards(matchingCards, cardsToCopy, allCards) {\r\n  cardsToCopy.forEach(cardId => {\r\n    const currCard = allCards[cardId]\r\n    if (currCard) {\r\n      matchingCards.push(currCard)\r\n    }\r\n\r\n  })\r\n\r\n}\r\n\r\nasync function _createList(listName,) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: listName,\r\n    cardIds: []\r\n  }\r\n}\r\n\r\nfunction copyCard(cardToCopy) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardToCopy.title,\r\n    desc: cardToCopy.desc,\r\n    cardCover: cardToCopy.cardCover,\r\n    checklist: cardToCopy.checklist,\r\n    isWatched: cardToCopy.isWatched,\r\n    dueDate: cardToCopy.dueDate,\r\n    labels: cardToCopy.labels,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCard(cardTitle, description = '') {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardTitle,\r\n    desc: description,\r\n    checklist: {},\r\n    cardCover: '',\r\n    isWatched: false,\r\n    labels: [],\r\n    dueDate: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  deleteList,\r\n  createCard,\r\n  copyList,\r\n  getListCards\r\n}\r\n","import listService from '../../service/listService'\r\n\r\nexport function createCard(currBoard, currList, cardTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newCard = await listService.createCard(cardTitle)\r\n            const data = {\r\n                newCard: newCard,\r\n                currBoard: currBoard,\r\n                currList: currList\r\n            }\r\n            dispatch(_createCard(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteList(currBoard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await listService.deleteList(currBoard, currList)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: currList,\r\n                newLists: updatedData.newLists,\r\n                newListOrder: updatedData.newListOrder,\r\n                newBoardCards: updatedData.newBoardCards\r\n            }\r\n            dispatch(_deleteList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function moveList(currBoard, listToMove, moveToBoardId) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const currListCards = listService.getListCards(currBoard.cards, listToMove)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                listToMove: listToMove,\r\n                moveToBoardId: moveToBoardId,\r\n                currListCards: currListCards\r\n            }\r\n            dispatch(_moveList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function copyList(currBoard, listToCopy) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const newListCopy = await listService.copyList(currBoard, listToCopy)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                copiedList: newListCopy.copiedList,\r\n                newListOrder: newListCopy.newListOrder,\r\n                copiedCards: newListCopy.copiedCards\r\n            }\r\n            dispatch(_copyList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeListName(currBoard, currList, listTitle) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            currList.title = listTitle\r\n            const newListTitle = currList\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: newListTitle,\r\n            }\r\n            dispatch(_changeListName(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _deleteList(data) {\r\n    return {\r\n        type: 'DELETE_LIST',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _createCard(data) {\r\n    return {\r\n        type: 'CREATE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyList(data) {\r\n    return {\r\n        type: 'COPY_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _moveList(data) {\r\n    return {\r\n        type: 'MOVE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeListName(data) {\r\n    return {\r\n        type: 'CHANGE_LIST_NANE',\r\n        data\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createCard } from '../../store/actions/listActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function AddCard(props) {\r\n    const { currBoard, currList, toggleAddCard } = props\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const cardTitle = useRef(null);\r\n\r\n    const onCreateCard = data => {\r\n        if (!data.cardTitle) return\r\n        dispatch(createCard(currBoard, currList, data.cardTitle))\r\n        reset()\r\n        toggleAddCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        cardTitle.current.focus();\r\n\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-card \">\r\n            <form onSubmit={handleSubmit(onCreateCard)}>\r\n                <div className=\"flex column\">\r\n                    <input name=\"cardTitle\" type=\"text\"\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            cardTitle.current = e\r\n                        }} placeholder={'Enter card title'}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n\r\n                        <button className=\"add-btn\" >Add Card</button>\r\n                        <button onClick={toggleAddCard} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect ,useCallback} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteList, copyList } from '../../store/actions/listActions'\r\n\r\n\r\nexport function ListMenu({ toggleListMenu, currBoard, currList, toggleAddCard, toggleEditTitle, onToggleMoveList }) {\r\n\r\n    const dispatch = useDispatch()\r\n    const onDeleteList = () => {\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    const onCreateCard = () => {\r\n        toggleAddCard()\r\n\r\n    }\r\n\r\n    const onCopyList = () => {\r\n        dispatch(copyList(currBoard, currList))\r\n\r\n\r\n    }\r\n\r\n    const onEditTitle = () => {\r\n        toggleEditTitle()\r\n\r\n    }\r\n\r\n\r\n\r\n    const clicked = useCallback(\r\n        () => {\r\n            toggleListMenu()\r\n        },\r\n        [toggleListMenu],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', clicked)\r\n        return () => {\r\n            window.removeEventListener('click', clicked)\r\n        }\r\n    }, [clicked])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"list-menu\">\r\n            <div className=\"menu-main-content\">\r\n                <div className=\"title margin-center\">\r\n                    <p onClick={toggleListMenu} className=\"close-btn\" >X</p>\r\n                    <p>List Actions</p>\r\n                </div>\r\n                <div className=\"menu-options \">\r\n                    <div className=\"option flex align-center\">\r\n                        <p onClick={onCreateCard}>Add Card...</p>\r\n                    </div>\r\n                    <div onClick={onCopyList} className=\"option flex align-center\">\r\n                        <p>Copy List...</p>\r\n                    </div>\r\n                    <div onClick={onToggleMoveList} className=\"option flex align-center\">\r\n                        <p>Move List...</p>\r\n                    </div>\r\n                    <div onClick={onEditTitle} className=\"option flex align-center\">\r\n                        <p>Edit Title...</p>\r\n                    </div>\r\n                    <div onClick={onDeleteList} className=\"option delete flex align-center\">\r\n                        <p>Delete List...</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeListName } from '../../store/actions/listActions'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function ChangeListTitle({ toggleEditTitle, currBoard, currList }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit} = useForm();\r\n    const title = useRef(null);\r\n    const onSaveNewTitle = (data) => {\r\n        dispatch(changeListName(currBoard, currList, data.newTitle))\r\n        toggleEditTitle()\r\n    }\r\n\r\n    useEffect(() => {\r\n        title.current.focus();\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"change-list-title\">\r\n            <form onSubmit={handleSubmit(onSaveNewTitle)}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    ref={(e) => {\r\n                        register(e)\r\n                        title.current = e\r\n                    }}\r\n                    name=\"newTitle\"\r\n                    style={{ width: '100%' }}\r\n                    type=\"text\" />\r\n                <div className=\"flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}} type=\"submit\">Save</button>\r\n                    <button onClick={toggleEditTitle}>X</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { moveList, deleteList } from '../../../store/actions/listActions'\r\n\r\n\r\nexport function MoveList({ onToggleMoveList, currBoard, currList }) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const boards = Object.values(state.boards)\r\n    const { activeBoard } = state\r\n    const dispatch = useDispatch()\r\n\r\n    const [moveTo, setMoveTo] = useState('')\r\n\r\n\r\n    const onMoveList = ({ target }) => {\r\n        const moveToBoardId = target.value\r\n        setMoveTo(moveToBoardId)\r\n    }\r\n\r\n    const MoveList = () => {\r\n\r\n        if (activeBoard === moveTo || !moveTo) return\r\n\r\n        dispatch(moveList(currBoard, currList, moveTo))\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"move-list\">\r\n            <div className=\"main-board-move-list\">\r\n                <select onChange={onMoveList} id=\"\">\r\n                    <option value=\"\">To...</option>\r\n                    {boards && boards.map((board) =>\r\n                        <option value={board.id} name={board.id} key={board.id}>{board.name}</option>\r\n                    )\r\n                    }\r\n                </select>\r\n                <div className=\"flex space-between\">\r\n\r\n                    <button onClick={MoveList}>Move</button>\r\n                    <button onClick={onToggleMoveList}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { CardList } from '../CardList/CardList'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { AddCard } from '../AddCard/AddCard'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons'\r\nimport { ListMenu } from '../ListMenu/ListMenu';\r\nimport { ChangeListTitle } from '../ChangeListTitle/ChangeListTitle'\r\nimport { MoveList } from '../ListMenu/MoveList/MoveList'\r\n\r\n\r\nexport function List({ listId, lists, cards, currBoard, index, }) {\r\n    const [currList, setCurrList] = useState('')\r\n    const [isAddCardShown, setAddCard] = useState(false)\r\n    const [isListMenuShown, setListMenu] = useState(false)\r\n    const [isEditTitle, setIsEditTitle] = useState(false)\r\n    const [isMoveListVisible, setMoveList] = useState(false)\r\n\r\n    const plus = <FontAwesomeIcon icon={faPlus} />\r\n    const listMenu = <FontAwesomeIcon icon={faEllipsisH} />\r\n\r\n\r\n    const getCurrList = useCallback(\r\n        () => {\r\n            const getCurrList = lists[listId]\r\n            setCurrList(getCurrList)\r\n        },\r\n        [lists, listId,],\r\n    )\r\n\r\n    const onToggleAddCard = () => {\r\n        setAddCard(!isAddCardShown)\r\n    }\r\n    const onToggleListMenu = () => {\r\n        setListMenu(!isListMenuShown)\r\n    }\r\n    const toggleEditTitle = () => {\r\n        setIsEditTitle(!isEditTitle)\r\n    }\r\n\r\n    const onToggleMoveList = () => {\r\n        setMoveList(!isMoveListVisible)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrList()\r\n        return () => {\r\n\r\n        }\r\n    }, [getCurrList])\r\n\r\n\r\n\r\n    if (!currList) return 'loading...'\r\n    return (\r\n        <Draggable\r\n            draggableId={currList.id}\r\n            index={index}\r\n        >\r\n            {(provided) => (\r\n                <MainDragContainer\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <div className=\"list flex column align-center\" >\r\n                        {isMoveListVisible &&\r\n                            <MoveList currBoard={currBoard} currList={currList} onToggleMoveList={onToggleMoveList} />\r\n                        }\r\n                        <div className=\"title-container align-center flex\">\r\n                            <span className=\"drag-handle flex space-between \"\r\n                                {...provided.dragHandleProps}\r\n                            >\r\n                                {!isEditTitle && <div>\r\n\r\n                                    <p className=\"list-title\">{currList.title}</p>\r\n\r\n                                    <p className=\"cards-count\">Total Cards: {currList.cardIds.length}</p>\r\n                                </div>\r\n                                }\r\n                                {isEditTitle && <span className=\"edit-title\">\r\n                                    <ChangeListTitle\r\n                                        toggleEditTitle={toggleEditTitle}\r\n                                        currBoard={currBoard}\r\n                                        currList={currList}\r\n                                    />\r\n                                </span>\r\n                                }\r\n                                <div className=\"menu-btn\">\r\n                                    <span className=\"list-menu-section align-center flex\"\r\n                                        onClick={onToggleListMenu}>\r\n                                        {listMenu}\r\n                                    </span>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                        {isListMenuShown &&\r\n                            <ListMenu\r\n\r\n\r\n                                toggleListMenu={onToggleListMenu}\r\n                                currBoard={currBoard}\r\n                                currList={currList}\r\n                                toggleAddCard={onToggleAddCard}\r\n                                toggleEditTitle={toggleEditTitle}\r\n                                onToggleMoveList={onToggleMoveList}\r\n                            />\r\n                        }\r\n                        <div className=\"main-container margin-center\">\r\n                            <Droppable droppableId={listId} type=\"card\">\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <MainDropContainer\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                <CardList\r\n                                                    cardIds={currList.cardIds}\r\n                                                    cards={cards}\r\n                                                    provided={provided}\r\n                                                    currListID={currList.id}\r\n                                                />\r\n                                            </MainDropContainer>\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                        <section className=\"add-card-section flex align-center\">\r\n                            {!isAddCardShown && <div onClick={onToggleAddCard}\r\n                                className=\"add-card-text flex align-center\">\r\n                                <div className=\"plus-sign\">{plus}</div>\r\n                                {currList.cardIds.length === 0 ? <p>Add a card</p> : <p>Add anoter card</p>}\r\n                            </div>\r\n                            }\r\n                            {isAddCardShown && <div className=\"add-card-section\">\r\n                                <AddCard toggleAddCard={onToggleAddCard}\r\n                                    currList={currList}\r\n                                    currBoard={currBoard} />\r\n                            </div>\r\n                            }\r\n                            <div className=\"div\">\r\n\r\n                            </div>\r\n\r\n                        </section>\r\n\r\n\r\n                    </div>\r\n                    {/* <div><p>add list</p></div> */}\r\n                </MainDragContainer>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\nconst MainDropContainer = styled.div`\r\n\r\nwidth:100%;\r\nmin-height:10px;\r\n\r\n`;\r\nconst MainDragContainer = styled.div`\r\n\r\n`;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    saveToStorage,\r\n    changeBoardBackground,\r\n} from '../../store/actions/boardActions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport nature from '../../assets/images/bgs/purple_nature.jpg'\r\nimport mountains from '../../assets/images/bgs/mountains.jpg'\r\nimport water from '../../assets/images/bgs/water.jpg'\r\nimport lake from '../../assets/images/bgs/lake.jpg'\r\nimport boraBora from '../../assets/images/bgs/boraBora.jpg'\r\nimport sky from '../../assets/images/bgs/sky.jpg'\r\n\r\n\r\n\r\n\r\n\r\nexport function BoardBackground({ state, currBoard, toggleBgBoard }) {\r\n    const dispatch = useDispatch()\r\n    const close = <FontAwesomeIcon icon={faTimes} />\r\n\r\n    const changeBackgroundImg = ({ target }) => {\r\n        const name = target.name\r\n        switch (name) {\r\n            case \"nature\":\r\n                dispatch(changeBoardBackground(currBoard, 'purple_nature'))\r\n                break;\r\n            case \"mountains\":\r\n                dispatch(changeBoardBackground(currBoard, 'mountains'))\r\n                break;\r\n            case \"water\":\r\n                dispatch(changeBoardBackground(currBoard, 'water',''))\r\n                break;\r\n            case \"lake\":\r\n                dispatch(changeBoardBackground(currBoard, 'lake',''))\r\n                break;\r\n            case \"boraBora\":\r\n                dispatch(changeBoardBackground(currBoard, 'boraBora',''))\r\n                break;\r\n            case \"sky\":\r\n                dispatch(changeBoardBackground(currBoard, 'sky',''))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"board-background \">\r\n            <div className=\"close-btn flex\">\r\n                <button onClick={toggleBgBoard}>{close}</button>\r\n            </div>\r\n            <div className=\"main-content flex align-center wrap\">\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={nature} alt=\"nature\" name=\"nature\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={mountains} alt=\"mountains\" name=\"mountains\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={water} alt=\"water\" name=\"water\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={lake} alt=\"lake\" name=\"lake\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={boraBora} alt=\"boraBora\" name=\"boraBora\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={sky} alt=\"sky\" name=\"sky\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {  useEffect } from 'react';\r\n\r\nexport function BlackScreen(props) {\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"black-screen\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function CardCover({currCard}) {\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor:`${currCard.cardCover}`}} className=\"card-cover\">\r\n            <div className=\"main-content-card-cover\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { copyCard } from '../../../store/actions/cardActions'\r\n\r\n\r\nexport function CopyCard({ currBoard, currCard, onToggleCopyCard }) {\r\n\r\n    const [listOptions, setListOptions] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onCopyCard = ({ target }) => {\r\n        const listName = target.value\r\n        const copyToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        dispatch(copyCard(currBoard, copyToList[0].id, currCard))\r\n        onToggleCopyCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onCopyCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { moveCard } from '../../../store/actions/cardActions'\r\n\r\nexport function MoveCard({ currBoard, currCard, currList, onToggleMoveCard, onToggleCardDetails }) {\r\n    const [listOptions, setListOptions] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onMoveCard = ({ target }) => {\r\n        const listName = target.value\r\n        const moveToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        console.log('moveToList:', moveToList)\r\n        const moveTocardIds = currBoard.lists[moveToList[0]?.id]?.cardIds\r\n        if (!moveTocardIds) return\r\n        if (moveTocardIds.includes(currCard.id)) return\r\n        if (moveToList[0].id === currList.id ) return\r\n        dispatch(moveCard(currBoard, moveToList[0].id, currCard, currList))\r\n        onToggleMoveCard()\r\n        onToggleCardDetails()\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard.lists])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onMoveCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function ColorPallette({ onSelectColor, onToggleColor }) {\r\n    const colors = [\r\n        { color: 'red', code: '#e04a4a' },\r\n        { color: 'lightGreen', code: '#4ae06d' },\r\n        { color: 'purpule', code: '#ab4ae0' },\r\n        { color: 'orange', code: '#f9af4d' },\r\n        { color: 'blue', code: '#3874ed' },\r\n        { color: 'yellow', code: '#ffff51' },\r\n        { color: 'noCover', code: '', text: 'None' }\r\n    ]\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"color-pallette\">\r\n            <div className=\"flex wrap space-between\">\r\n                {colors.map(color =>\r\n                    <div key={color.code} onClick={() => onSelectColor(color.code)} className=\"color\" style={{ backgroundColor: color.code }}>\r\n                        {color.text && <p>{color.text}</p>}\r\n                    </div>\r\n                )}\r\n                <button onClick={onToggleColor}>Close</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { setCardCover } from '../../../store/actions/cardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette'\r\nexport function CardCoverMenu({ onToggleColor, toggleCardVisibility, currCard, currBoard }) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onCloseCover = () => {\r\n        dispatch(setCardCover(currBoard, currCard, ''))\r\n        toggleCardVisibility()\r\n    }\r\n    const onSelectCover = (color) => {\r\n        if (color === 'noCover') return onCloseCover()\r\n        dispatch(setCardCover(currBoard, currCard, color))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-cover-menu\">\r\n            <div className=\"top-part flex space-between\">\r\n            </div>\r\n            <ColorPallette\r\n                onCloseColor={onCloseCover}\r\n                onSelectColor={onSelectCover}\r\n                currCard={currCard}\r\n                currBoard={currBoard}\r\n                onToggleColor={onToggleColor}\r\n                toggleCardVisibility={toggleCardVisibility} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function AddCheckList({ onToggleCheckList, onAddCheckList }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const checklistName = useRef(null)\r\n\r\n    useEffect(() => {\r\n        checklistName.current.focus();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"add-check-list\">\r\n            <form onSubmit={handleSubmit(onAddCheckList)}>\r\n                <input style={{ marginBlockEnd: '5px' }} autoComplete=\"off\" ref={(e) => {\r\n                    register(e)\r\n                    checklistName.current = e\r\n                }} name=\"checklistName\" type=\"text\" />\r\n                <div className=\"check-list-btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Add</button>\r\n                    <button onClick={onToggleCheckList}>Cancel</button>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette';\r\n\r\nexport function LabelsMenu({  onToggleColor ,onSetLabel}) {\r\n    return (\r\n        <div className=\"labels-menu\">\r\n            <ColorPallette onToggleColor={onToggleColor} onSelectColor={onSetLabel} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CopyCard } from '../CopyCard/CopyCard'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faTag, faTasks, faColumns, faClock, faPaperclip, faArrowRight, faCopy, faEye, faTrashAlt, faShareAlt, } from '@fortawesome/free-solid-svg-icons'\r\nimport { MoveCard } from '../MoveCard/MoveCard';\r\nimport { DeleteVerify } from '../DeleteVerify/DeleteVerify'\r\nimport { CardCoverMenu } from '../CardCoverMenu/CardCoverMenu'\r\nimport { createCheckList, setDueDate, deleteCard, setLabel, removeLabel } from '../../../store/actions/cardActions'\r\nimport { useDispatch } from 'react-redux';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport { AddCheckList } from './AddCheckList/AddCheckList';\r\nimport { LabelsMenu } from '../LabelsMenu/LabelsMenu';\r\n\r\n\r\nexport function RightSideMenu({ onToggleCardDetails, cardid, onToggleCover, isCoverOn,\r\n    listid,\r\n    currBoard,\r\n    currCard,\r\n    toggleCardVisibility,\r\n    onToggleCardWatch\r\n}) {\r\n    const currList = currBoard.lists[listid]\r\n    const [isCopyClicked, setCopyClick] = useState(false)\r\n    const [isMoveClicked, setMoveClick] = useState(false)\r\n    const [isDeleteClicked, setDeleteClick] = useState(false)\r\n    const [isAddCheckList, setAddChecklist] = useState(false)\r\n    const [isLabelMenuVis, setLabelMenuVis] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const [date, setDates] = useState(new Date())\r\n    const [isCalShown, toggleShowCal] = useState(false)\r\n\r\n    const avatar = <FontAwesomeIcon icon={faUser} />\r\n    const label = <FontAwesomeIcon icon={faTag} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const paperClip = <FontAwesomeIcon icon={faPaperclip} />\r\n    const arrow = <FontAwesomeIcon icon={faArrowRight} />\r\n    const copy = <FontAwesomeIcon icon={faCopy} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const share = <FontAwesomeIcon icon={faShareAlt} />\r\n    const cover = <FontAwesomeIcon icon={faColumns} />\r\n\r\n\r\n    const onToggleLabelMenu = () => {\r\n        setLabelMenuVis(!isLabelMenuVis)\r\n    }\r\n\r\n    const onSetLabel = (colorCode) => {\r\n        const index = currCard.labels.findIndex((label) => { return label === colorCode })\r\n        if (index >= 0) {\r\n            dispatch(removeLabel(currBoard, currCard, index))\r\n            return\r\n        }\r\n        dispatch(setLabel(currBoard, currCard, colorCode))\r\n    }\r\n\r\n    const onToggleDeleteCard = () => {\r\n        setDeleteClick(!isDeleteClicked)\r\n    }\r\n\r\n    const onDeleteCard = () => {\r\n        dispatch(deleteCard(currBoard, currList, cardid))\r\n        onToggleCardDetails()\r\n    }\r\n\r\n    const onToggleCopyCard = () => {\r\n        setCopyClick(!isCopyClicked)\r\n    }\r\n    const onToggleMoveCard = () => {\r\n        setMoveClick(!isMoveClicked)\r\n    }\r\n\r\n    const onToggleCheckList = () => {\r\n        setAddChecklist(!isAddCheckList)\r\n    }\r\n\r\n    const onAddCheckList = ({ checklistName }) => {\r\n        if (!checklistName) return\r\n        dispatch(createCheckList(currBoard, currCard, checklistName))\r\n        onToggleCheckList()\r\n    }\r\n    const onGetDates = date => {\r\n        const newDate = date.toString().substring(0, 15)\r\n        setDates(date)\r\n        dispatch(setDueDate(currBoard, currCard, newDate))\r\n        toggleShowCal(false)\r\n    }\r\n\r\n    const onToggleShowCal = () => {\r\n        toggleShowCal(!isCalShown)\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"right-side-menu flex column\">\r\n            <p>SUGGESTED</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                Join</button>\r\n            <p>ADD TO CARD</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                    Members\r\n            </button>\r\n            <button onClick={onToggleLabelMenu} className=\"btn-right-side\">\r\n                <span>{label}</span>\r\n                Labels\r\n                </button>\r\n            { isLabelMenuVis && <LabelsMenu onSetLabel={onSetLabel} onToggleColor={onToggleLabelMenu} currBoard={currBoard} currCard={currCard} />}\r\n            <button onClick={onToggleCheckList} className=\"btn-right-side\">\r\n                <span>{checklist}</span>\r\n                Checklist\r\n                </button>\r\n            {isAddCheckList &&\r\n                <AddCheckList\r\n                    onToggleCheckList={onToggleCheckList}\r\n                    onAddCheckList={onAddCheckList} />\r\n            }\r\n            <button onClick={onToggleShowCal} className=\"btn-right-side\">\r\n                <span>{clock}</span>\r\n                Due Date\r\n                </button>\r\n            {isCalShown && <div className=\"cal\">\r\n                <Calendar className=\"calendar\"\r\n                    onChange={onGetDates}\r\n                    value={date}\r\n                />\r\n            </div>\r\n            }\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {paperClip}\r\n                </span>\r\n                Attachment\r\n                </button>\r\n            <button className=\"btn-right-side\" onClick={onToggleCover}>\r\n                <span>\r\n                    {cover}\r\n                </span>\r\n                Cover\r\n                </button>\r\n            {isCoverOn &&\r\n                <CardCoverMenu\r\n                    currCard={currCard}\r\n                    toggleCardVisibility={toggleCardVisibility}\r\n                    currBoard={currBoard}\r\n                    onToggleColor={onToggleCover}\r\n                />\r\n            }\r\n\r\n            <p>ACTIONS</p>\r\n\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleMoveCard}>\r\n                        <span>\r\n                            {arrow}\r\n                        </span>\r\n                    Move\r\n                    </button>\r\n                </div>\r\n                {isMoveClicked && <MoveCard cardid={cardid}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    currList={currList}\r\n                    onToggleMoveCard={onToggleMoveCard}\r\n                    onToggleCardDetails={onToggleCardDetails}\r\n                />\r\n                }\r\n            </div>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleCopyCard}>\r\n                        <span>\r\n                            {copy}\r\n                        </span>\r\n                    Copy\r\n                    </button>\r\n                </div>\r\n                {isCopyClicked && <CopyCard cardid={cardid}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    onToggleCopyCard={onToggleCopyCard}\r\n                />\r\n                }\r\n            </div>\r\n            <button onClick={onToggleCardWatch} className=\"btn-right-side flex space-between align-center\">\r\n                <div className=\"flex\">\r\n                    <span>\r\n                        {eye}\r\n                    </span>\r\n                    Watch\r\n                </div>\r\n                {currCard.isWatched &&\r\n                    <span className=\"watched flex align-center justify-center\">V</span>\r\n                }\r\n            </button>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n\r\n                    <button className=\"btn-right-side\" onClick={onToggleDeleteCard}>\r\n                        <span>\r\n                            {trash}\r\n                        </span>\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n                {isDeleteClicked &&\r\n                    <DeleteVerify onDelete={onDeleteCard}\r\n                        onToggle={onToggleDeleteCard}\r\n                        itemToDelete={'card'}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {share}\r\n                </span>\r\n                Share\r\n                </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function ProgressBar({ bgcolor, completed }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const fillerStyles = {\r\n        width: `${completed}%`,\r\n        backgroundColor: bgcolor,\r\n        borderRadius: 'inherit',\r\n        textAlign: 'right'\r\n    }\r\n\r\n    const labelStyles = {\r\n        fontWeight: 'bold'\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"progress-bar flex align-center\">\r\n            <span style={labelStyles}>{` ${completed}%  `}</span>\r\n            <div></div>\r\n            <div className=\"wrapper\" style={fillerStyles}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function ItemPreview({ onCheckItem, item, onRemoveCheckListItem, trash }) {\r\n    \r\n    useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"item-preview\">\r\n            <div\r\n                key={item.id} className=\"main-content-checkbox flex space-between align-center\">\r\n                <div className=\"checkbox-container flex\">\r\n                    <input onChange={() => onCheckItem(item)} checked={item.isChecked} type=\"checkbox\" value={item.text} /> <p>\r\n                        {item.text}\r\n                    </p>\r\n                </div>\r\n                <button onClick={() => onRemoveCheckListItem(item)}><span>{trash}</span></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeCheckList, addCheckListItem, removeCheckListItem, checkItem } from '../../../store/actions/cardActions'\r\nimport { ProgressBar } from '../../ProgressBar/ProgressBar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTasks, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useCallback } from 'react';\r\nimport { ItemPreview } from './ItemPreview/ItemPreview'\r\n\r\nexport function CardCheckList({ currCheckList, currCard, currBoard }) {\r\n    const checklistName = currCheckList.name\r\n    const [isAddItemVisible, setItemVisible] = useState(false)\r\n    const [checkedItems, setCheckItems] = useState([])\r\n    const [currCheckItem, setCurrCheckItem] = useState()\r\n    const [completed, setCompleted] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n\r\n    const onAddCheckItem = ({ listItem }) => {\r\n        if (!listItem) return\r\n        dispatch(addCheckListItem(currBoard, currCard, currCheckList, listItem))\r\n        onToggleItemVisibility()\r\n    }\r\n\r\n\r\n    const onRemoveCheckList = () => { dispatch(removeCheckList(currBoard, currCard, currCheckList)) }\r\n    const onRemoveCheckListItem = useCallback(\r\n        (item) => {\r\n            const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n            dispatch(removeCheckListItem(currBoard, currCard, currCheckList, item))\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n        },\r\n        [currBoard, currCard, currCheckList, dispatch,checkedItems]\r\n    )\r\n\r\n    const onToggleItemVisibility = () => {\r\n        setItemVisible(!isAddItemVisible)\r\n    }\r\n\r\n\r\n    const onCheckItem = (item) => {\r\n        const currItem = currCheckList.list[item.id]\r\n        setCurrCheckItem(currItem)\r\n        const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n        if (item.isChecked) {\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n            dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n            calculatePercentage()\r\n            return\r\n        }\r\n\r\n        setCheckItems([...checkedItems, { ...item }])\r\n        dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n        calculatePercentage()\r\n    }\r\n\r\n\r\n    const calculatePercentage = useCallback(\r\n        () => {\r\n            var number = Object.values(currCheckList.list).length;\r\n            var currChecked = checkedItems.length;\r\n            var percent = (currChecked * 100) / number;\r\n            isNaN(percent) ? setCompleted(0) : setCompleted(percent.toFixed())\r\n        },\r\n        [currCheckList.list, checkedItems.length],\r\n    )\r\n\r\n    useEffect(() => {\r\n        calculatePercentage()\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [calculatePercentage, currCheckItem, currCheckList])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-check-list\">\r\n            <div className=\"card-check-list-section flex space-between\">\r\n                <div className=\"title-container flex align-center\">\r\n\r\n                    <div className=\"icon\">\r\n                        {checklist}\r\n                    </div>\r\n                    <div className=\"check-list-title\">\r\n                        <h3>{checklistName}</h3>\r\n                    </div>\r\n                </div>\r\n                <p className=\"delete-checklist\" onClick={onRemoveCheckList}>Delete</p>\r\n            </div>\r\n            <ProgressBar bgcolor=\"#c9c9ca\" completed={completed} />\r\n            <div className=\"list\">\r\n                {Object.values(currCheckList.list).map(item =>\r\n                    <ItemPreview key={item.id} onCheckItem={onCheckItem} onRemoveCheckListItem={onRemoveCheckListItem} trash={trash} item={item} />\r\n                )}\r\n            </div>\r\n            {!isAddItemVisible &&\r\n                <div className=\"add-item-btn\">\r\n                    <button onClick={onToggleItemVisibility}>Add an item</button>\r\n                </div>\r\n            }\r\n            <div className=\"check-list-action\">\r\n                {\r\n                    isAddItemVisible &&\r\n                    <ActionForm toggleAdd={onToggleItemVisibility} onSubmitFunc={onAddCheckItem} name={'listItem'} placeholder={'Item title'} />\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { setCardDesc } from '../../../../store/actions/cardActions'\r\n\r\n\r\n\r\n\r\nexport function AddDescription({ currCard, currBoard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    const dispatch = useDispatch()\r\n    // const [isDescClicked, setDescClicked] = useState(false)\r\n    const { register, handleSubmit } = useForm();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    const onAddDesc = ({ desc }) => {\r\n        dispatch(setCardDesc(currBoard, currCard, desc))\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-description\">\r\n            <form onSubmit={handleSubmit(onAddDesc)}>\r\n                <textarea defaultValue={currCard.desc} name=\"desc\" ref={register} cols=\"30\" rows=\"10\"></textarea>\r\n                <div className=\"btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Save</button>\r\n                    <button onClick={onCancel}>X</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\nimport { AddDescription } from '.././Description/AddDescription/AddDescription'\r\n\r\nexport function Description({isDescVisible, clipBoard, currBoard, currCard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"description flex\">\r\n            <div className=\"icon\">\r\n                {clipBoard}\r\n            </div>\r\n            <div className=\"description-title\">\r\n                <h3>Description</h3>\r\n                {!isDescVisible &&\r\n                    <div onClick={onToggleCardDesc} className=\"card-description-box\">\r\n                        <p>{currCard.desc}</p>\r\n                    </div>\r\n                }\r\n                {isDescVisible &&\r\n                    <AddDescription onToggleCardDesc={onToggleCardDesc}\r\n                        currBoard={currBoard} currCard={currCard} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleCardDetails, toggleCardWatch, setDueDate } from '../../store/actions/cardActions'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { CardCover } from './CardCover/CardCover'\r\nimport { RightSideMenu } from './RightSideMenu/RightSideMenu'\r\nimport { CardCheckList } from './CardCheckList/CardCheckList'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTicketAlt, faClipboardList, faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport { Description } from './Description/Description';\r\nimport { CardLabel } from './CardLabel/CardLabel';\r\n\r\nexport function CardDetails() {\r\n    const state = useSelector(state => state.mainStore)\r\n    const [isCoverOn, setCoverOn] = useState(false)\r\n    const [istCoverVisibile, setCoverVisibility] = useState(false)\r\n    const { activeBoard } = state\r\n    const [isDescVisible, setDescVisibility] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const currBoard = state.boards[activeBoard]\r\n    const { cardid, listid } = useParams();\r\n    const currCard = currBoard.cards[cardid]\r\n    const currCheckList = Object.values(currCard?.checklist)\r\n\r\n    const ticket = <FontAwesomeIcon icon={faTicketAlt} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n\r\n\r\n    const onToggleCardDetails = () => {\r\n        dispatch(toggleCardDetails(false))\r\n        history.push(`/boards/${activeBoard}`)\r\n    }\r\n\r\n\r\n    const onToggleCover = () => {\r\n        setCoverOn(!isCoverOn)\r\n    }\r\n\r\n    const toggleCardVisibility = () => {\r\n        setCoverVisibility(!istCoverVisibile)\r\n    }\r\n\r\n    const onToggleCardDesc = () => {\r\n        setDescVisibility(!isDescVisible)\r\n    }\r\n\r\n\r\n    const onToggleCardWatch = () => {\r\n        const isWatched = currCard.isWatched\r\n        dispatch(toggleCardWatch(currBoard, currCard, !isWatched))\r\n    }\r\n\r\n    const onRemoveDate = () => {\r\n        dispatch(setDueDate(currBoard, currCard, ''))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [state, currCard.isWatched])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-details\" >\r\n            <span onClick={onToggleCardDetails} >\r\n                <BlackScreen />\r\n            </span>\r\n            <div className=\"card-details-board \">\r\n                {currCard.cardCover &&\r\n                    <CardCover currCard={currCard} onToggleCover={onToggleCover} />\r\n                }\r\n                <div className=\"main flex space-between\">\r\n                    <div className=\"left-side\">\r\n                        <div className=\"title-section \">\r\n                            <div style={{ height: 'fit-content' }} className=\"align-center flex\">\r\n                                <div className=\"icon\">\r\n                                    {ticket}\r\n                                </div>\r\n                                <div className=\"title \">\r\n                                    <h3>{currCard.title} </h3>\r\n                                </div>\r\n                                {currCard.isWatched &&\r\n                                    <div className=\"watched-section\">\r\n                                        {eye}\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            {currCard.dueDate &&\r\n                                <div className=\"due-date-section margin-bottom flex space-between\">\r\n                                    <p>{currCard.dueDate}</p>\r\n                                    <p className=\"remove-date\" onClick={onRemoveDate}>Remove Date</p>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <section className=\"labels\">\r\n                            {currCard.labels.length > 0 &&\r\n                                <div>\r\n                                    <p>Labels</p>\r\n                                    <div className=\"flex\">\r\n                                        {currCard.labels.map(label => {\r\n                                            return <CardLabel key={label} label={label} />\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                        </section>\r\n                        <section className=\"description-section\">\r\n                            <Description clipBoard={clipBoard} isDescVisible={isDescVisible} currBoard={currBoard} currCard={currCard}\r\n                                onToggleCardDesc={onToggleCardDesc} />\r\n                        </section>\r\n                        <section className=\"checkList-section\">\r\n                            {currCheckList.length > 0 &&\r\n                                currCheckList.map(checklist => <div key={checklist.id} >\r\n                                    <CardCheckList currCheckList={checklist} currBoard={currBoard} currCard={currCard} />\r\n                                </div>)\r\n                            }\r\n                        </section>\r\n                    </div>\r\n                    <div className=\"right-side\">\r\n                        <div className=\"close-btn margin-bottom flex\">\r\n                            <button onClick={onToggleCardDetails}>X</button>\r\n                        </div>\r\n                        <RightSideMenu\r\n                            cardid={cardid}\r\n                            listid={listid}\r\n                            currBoard={currBoard}\r\n                            currCard={currCard}\r\n                            toggleCardVisibility={toggleCardVisibility}\r\n                            istCoverVisibile={istCoverVisibile}\r\n                            onToggleCardDetails={onToggleCardDetails}\r\n                            onToggleCardWatch={onToggleCardWatch}\r\n                            onToggleCover={onToggleCover}\r\n                            isCoverOn={isCoverOn}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createList } from '../../store/actions/boardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function AddList({ currBoard, onToggleAddList, windowWidth }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const listName = useRef(null);\r\n\r\n\r\n    const onCreateList = (data) => {\r\n        if (!data.listName) return\r\n        dispatch(createList(currBoard.id, data.listName))\r\n        reset()\r\n        onToggleAddList()\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        listName.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-list \">\r\n            <form onSubmit={handleSubmit(onCreateList)}>\r\n                <div className=\"flex column\">\r\n                    <input rows='1' name=\"listName\" type=\"text\"\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            listName.current = e\r\n                        }} placeholder={'Enter list title'}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n\r\n                        <button className=\"add-btn\" >Add List</button>\r\n                        <button onClick={onToggleAddList} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom'\r\nimport { List } from '../List/List'\r\nimport {\r\n    dragInsideList,\r\n    saveToStorage,\r\n    dragOutsideList,\r\n    dragList,\r\n    setActiveBoard,\r\n    toggleBgSide\r\n} from '../../store/actions/boardActions'\r\n\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { BoardBackground } from '../../cmps/BoardBackground/BoardBackground'\r\nimport { CardDetails } from '../CardDetails/CardDetails'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { AddList } from '../AddList/AddList'\r\n\r\n\r\nexport function Board(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { isCardDetailShown, isBgSideOpen } = state\r\n    const [isAddListVisible, setAddList] = useState(false)\r\n    const [boardStyle, setBoardStyle] = useState()\r\n    const [currBoard, setCurrBoard] = useState()\r\n\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch()\r\n    const boardRef = useRef(null)\r\n\r\n    const loadCurrBoard = useCallback(() => {\r\n        const currBoard = state.boards[id]\r\n        setCurrBoard(currBoard)\r\n        const style = {\r\n            backgroundImage: 'url(/images/bgs/' + currBoard.backgroundImg + '.jpg)',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'no-repeat'\r\n        }\r\n        setBoardStyle(style)\r\n        dispatch(setActiveBoard(currBoard))\r\n    },\r\n        [state.boards, id, dispatch,]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!currBoard) return\r\n    }, [currBoard])\r\n\r\n    const onDragEnd = useMemo(() => async (result) => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) { return }\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) return\r\n\r\n        const start = currBoard.lists[source.droppableId]\r\n        const finish = currBoard.lists[destination.droppableId]\r\n\r\n        if (start === finish && !type === 'list') {\r\n            await dispatch(dragInsideList(start, source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        if (type === 'list') {\r\n            await dispatch(dragList(source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        await dispatch(dragOutsideList(start, source, destination, draggableId, currBoard, finish))\r\n\r\n    }\r\n        , [currBoard, dispatch])\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onToggleAddList = () => {\r\n        setAddList(!isAddListVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        loadCurrBoard()\r\n        return () => {\r\n            dispatch(setActiveBoard(''))\r\n        }\r\n\r\n    }, [loadCurrBoard, dispatch])\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    if (!currBoard) return '...LOADING...'\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={onDragEnd}\r\n        >\r\n            <Droppable\r\n                droppableId=\"all-lists\"\r\n                direction=\"horizontal\"\r\n                type=\"list\"\r\n                className=\"droppable-board\"\r\n            >\r\n                {(provided) => {\r\n                    return (\r\n                        <div ref={boardRef} className=\"board margin-center align-center\" style={boardStyle}>\r\n                            <MainDndArea\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                <div className=\"main-content flex \">\r\n                                    {currBoard.listOrder.map((listId, idx) => {\r\n                                        return <div key={listId} className=\"list-section\">\r\n                                            <List index={idx} cards={currBoard.cards} currBoard={currBoard} lists={currBoard.lists} listId={listId}></List>\r\n                                        </div>\r\n                                    })}\r\n                                    {!isAddListVisible &&\r\n                                        <button onClick={onToggleAddList} className=\"add-list-btn\">Add list</button>\r\n                                    }\r\n                                    {isAddListVisible &&\r\n                                        <AddList currBoard={currBoard} onToggleAddList={onToggleAddList} />\r\n                                    }\r\n                                </div>\r\n                                {isBgSideOpen &&\r\n                                    <span onClick={toggleBgBoard} >\r\n                                        <BlackScreen />\r\n                                    </span>\r\n                                }\r\n                                <div className=\"between\">\r\n                                    <div className={`board-bg ${isBgSideOpen ? 'visible' : ''} `}>\r\n                                        <BoardBackground toggleBgBoard={toggleBgBoard} currBoard={currBoard} state={state} />\r\n                                    </div>\r\n                                </div>\r\n                                {provided.placeholder}\r\n\r\n                            </MainDndArea>\r\n                            {isCardDetailShown &&\r\n                                <CardDetails currBoard={currBoard} />\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Droppable>\r\n        </DragDropContext >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst MainDndArea = styled.div`\r\n    width: 100 %;\r\n    `;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './style/style.scss'\r\nimport { HomePage } from './pages/HomePage/HomePage'\r\nimport { AppHeader } from './cmps/AppHeader/AppHeader'\r\nimport { Board } from './cmps/Board/Board';\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App \">\r\n      <AppHeader history={History}/>\r\n\r\n      <Switch>\r\n      <Route component={HomePage} exact path=\"/\" />\r\n        <Route component={Board} path=\"/boards/:id/:listid?/:cardid?\"/>\r\n      </Switch>\r\n      {/* <Footer/> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import UTILS from '../../service/utils'\r\n\r\nvar initialState = UTILS.loadFromStorage('mainStore')\r\n\r\nif (!initialState)\r\n\r\n\r\n    initialState = {\r\n        boards: {\r\n            'board-1': {\r\n                id: 'board-1',\r\n                name: 'Demo-Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-1': {\r\n                        id: 'card-1',\r\n                        title: 'card-title-1',\r\n                        desc: 'card-desc-1',\r\n                        checklist: {\r\n                            'check-1': {\r\n                                id: 'check-1',\r\n                                name: 'checklist-1',\r\n                                list: {\r\n                                    'firstOne': {\r\n                                        id: 'firstOne', text: 'firstOne', isChecked: false\r\n                                    },\r\n                                    'secondOne': {\r\n                                        id: 'secondOne', text: 'secondOne', isChecked: true\r\n                                    }\r\n                                }\r\n                            },\r\n                            'check-2': {\r\n                                id: 'check-2',\r\n                                name: 'checklist-2',\r\n                                list: {\r\n                                    'firstOne': { id: 'firstOne', text: 'firstOne' }, 'secondOne': { id: 'secondOne', text: 'secondOne' }\r\n                                }\r\n                            }\r\n                        },\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-2': {\r\n                        id: 'card-2',\r\n                        title: 'card-title-2',\r\n                        desc: 'card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-3': {\r\n                        id: 'card-3',\r\n                        title: 'card-title-3',\r\n                        desc: 'card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-4': {\r\n                        id: 'card-4',\r\n                        title: 'card-title-4',\r\n                        desc: 'card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-5': {\r\n                        id: 'card-5',\r\n                        title: 'card-title-5',\r\n                        desc: 'card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-6': {\r\n                        id: 'card-6',\r\n                        title: 'card-title-6',\r\n                        desc: 'card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-7': {\r\n                        id: 'card-7',\r\n                        title: 'card-title-7',\r\n                        desc: 'card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-8': {\r\n                        id: 'card-8',\r\n                        title: 'card-title-8',\r\n                        desc: 'card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-9': {\r\n                        id: 'card-9',\r\n                        title: 'card-title-9',\r\n                        desc: 'card-desc-9',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-10': {\r\n                        id: 'card-10',\r\n                        title: 'card-title-10',\r\n                        desc: 'card-desc-10',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-11': {\r\n                        id: 'card-11',\r\n                        title: 'card-title-11',\r\n                        desc: 'card-desc-11',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-12': {\r\n                        id: 'card-12',\r\n                        title: 'card-title-12',\r\n                        desc: 'card-desc-12',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-1': {\r\n                        id: 'list-1',\r\n                        title: 'todo',\r\n                        cardIds: ['card-1', 'card-2', 'card-3', 'card-4',]\r\n                    },\r\n                    'list-2': {\r\n                        id: 'list-2',\r\n                        title: 'in progress',\r\n                        cardIds: ['card-5', 'card-6', 'card-7', 'card-8',]\r\n                    },\r\n                    'list-3': {\r\n                        id: 'list-3',\r\n                        title: 'done',\r\n                        cardIds: ['card-9', 'card-10', 'card-11', 'card-12',]\r\n                    },\r\n                },\r\n                listOrder: ['list-1', 'list-2', 'list-3'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n            },\r\n            'board-2': {\r\n                id: 'board-2',\r\n                name: 'Eyal\\'s Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-16': {\r\n                        id: 'card-16',\r\n                        title: 'new card-title-1',\r\n                        desc: 'new card-desc-1',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-26': {\r\n                        id: 'card-26',\r\n                        title: 'new card-title-2',\r\n                        desc: 'new card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-36': {\r\n                        id: 'card-36',\r\n                        title: 'new card-title-3',\r\n                        desc: 'new card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-46': {\r\n                        id: 'card-46',\r\n                        title: 'new card-title-4',\r\n                        desc: 'new card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-57': {\r\n                        id: 'card-57',\r\n                        title: 'new card-title-5',\r\n                        desc: 'new card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-67': {\r\n                        id: 'card-67',\r\n                        title: 'new card-title-6',\r\n                        desc: 'new card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-77': {\r\n                        id: 'card-77',\r\n                        title: 'new card-title-7',\r\n                        desc: 'new card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-87': {\r\n                        id: 'card-87',\r\n                        title: 'new card-title-8',\r\n                        desc: 'new card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-13': {\r\n                        id: 'list-13',\r\n                        title: 'todo2',\r\n                        cardIds: ['card-16', 'card-26', 'card-36', 'card-46',]\r\n                    },\r\n                    'list-23': {\r\n                        id: 'list-23',\r\n                        title: 'in progress2',\r\n                        cardIds: ['card-57', 'card-67', 'card-77', 'card-87',]\r\n                    },\r\n                },\r\n                listOrder: ['list-13', 'list-23'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n\r\n            },\r\n        },\r\n        favBoards: {},\r\n        activeBoard: '',\r\n        isCardDetailShown: false,\r\n        isBgSideOpen: false\r\n    };\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_STATE':\r\n            return {\r\n                state: action.state\r\n            };\r\n        case 'UPDATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.updatedList.id]: action.data.updatedList\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.newStartList.id]: action.data.newStartList,\r\n                            [action.data.newFinishList.id]: action.data.newFinishList,\r\n\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS_ORDER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        listOrder: [...action.data.newListOrder]\r\n                    }\r\n                }\r\n            };\r\n        case 'CREATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.newBoard.id]: {\r\n                        ...action.data.newBoard,\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_BOARD':\r\n            const newBoards = state.boards\r\n            delete newBoards[action.data.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...newBoards,\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_NAME':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        name: action.data.boardName\r\n                    },\r\n                },\r\n            };\r\n        case 'CREATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard]: {\r\n                        ...state.boards[action.data.currBoard],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard].lists,\r\n                            [action.data.newList.id]: action.data.newList,\r\n                        },\r\n                        listOrder: [...state.boards[action.data.currBoard].listOrder, action.data.newList.id]\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...action.data.newLists\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n                },\r\n            };\r\n        case 'MOVE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.moveToBoardId]: {\r\n                        ...state.boards[action.data.moveToBoardId],\r\n                        cards: {\r\n                            ...state.boards[action.data.moveToBoardId].cards,\r\n                            ...action.data.currListCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.moveToBoardId].lists,\r\n                            [action.data.listToMove.id]: {\r\n                                ...action.data.listToMove\r\n                            }\r\n                        },\r\n                        listOrder: [...state.boards[action.data.moveToBoardId].listOrder, action.data.listToMove.id]\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'COPY_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            ...action.data.copiedCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copiedList.id]: {\r\n                                ...action.data.copiedList\r\n                            }\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'CHANGE_LIST_NANE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...action.data.currList\r\n                            }\r\n                        },\r\n\r\n                    },\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_BG':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        backgroundImg: action.data.bgName,\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_ACTIVE_BOARD':\r\n            return {\r\n                ...state,\r\n                activeBoard: action.activeBoard.id\r\n            };\r\n        case 'CREATE_CARD':\r\n            console.log('created')\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.newCard.id]: action.data.newCard,\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: [\r\n                                    ...state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds, action.data.newCard.id\r\n                                ]\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            };\r\n        case 'COPY_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.copiedCard.id]: action.data.copiedCard\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copyToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.copyToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.copyToListID].cardIds, action.data.copiedCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'MOVE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds.filter(cardId => cardId !== action.data.currCard.id)\r\n                            },\r\n                            [action.data.moveToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.moveToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.moveToListID].cardIds, action.data.currCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'DELETE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...action.data.currBoard.lists,\r\n                            [action.data.currList.id]: action.data.currList\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'SET_DESC':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                desc: action.data.desc\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_LABEL':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: [...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].labels,action.data.labelColor]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LABELS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: action.data.newLabelList\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'TOGGLE_CARD_WATCH':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                isWatched: action.data.isWatched\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'TOGGLE_CHECK_ITEM':\r\n            const isItemChecked = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id].isChecked\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: {\r\n                                            ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list,\r\n                                            [action.data.currItem.id]: {\r\n                                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id],\r\n                                                isChecked: !isItemChecked\r\n                                            }\r\n                                        },\r\n                                    }\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n\r\n\r\n        case 'SET_DUE_DATE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                dueDate: action.data.dueDate\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CREATE_CHECKLIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist, [action.data.currChecklist.id]: action.data.currChecklist }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'ADD_CHECKLIST_ITEM':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list, [action.data.newItem.id]: action.data.newItem }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'REMOVE_CHECKLIST_ITEM':\r\n            const newChecklistToSave = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            [action.data.currCheckList.id]\r\n            delete newChecklistToSave.list[action.data.itemToRemove.id]\r\n\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: newChecklistToSave\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_CHECKLIST':\r\n            const newChecklist = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            delete newChecklist[action.data.checkListToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: newChecklist\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CARD_COVER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                                { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id], cardCover: action.data.color }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'UPDATE_CURR_LIST':\r\n            return {\r\n                ...state,\r\n                currListId: action.data\r\n            };\r\n        case 'TOGGLE_CARD_DETAILS':\r\n            return {\r\n                ...state,\r\n                isCardDetailShown: action.data\r\n            };\r\n        case 'TOGGLE_BG_SIDE':\r\n            return {\r\n                ...state,\r\n                isBgSideOpen: !state.isBgSideOpen\r\n            };\r\n        case 'TOGGLE_FAV_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.id]: {\r\n                        ...state.boards[action.data.id],\r\n                        isFav: !state.boards[action.data.id].isFav\r\n                    }\r\n                },\r\n                favBoards: {\r\n                    ...state.favBoards,\r\n                    [action.data.id]: action.data\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_SAVED_BOARD':\r\n            delete state.favBoards[action.boardToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.boardToRemove.id]: {\r\n                        ...state.boards[action.boardToRemove.id],\r\n                        isFav: !state.boards[action.boardToRemove.id].isFav\r\n                    }\r\n                },\r\n                favBoards: { ...state.favBoards }\r\n            }\r\n\r\n\r\n        case 'GET_STATE':\r\n            console.log('state:', state)\r\n            return {\r\n                ...state,\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport boardReducer from './boardReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  mainStore: boardReducer,\r\n})\r\n\r\nexport default rootReducer;","\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import history from './history';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router } from 'react-router-dom';\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}