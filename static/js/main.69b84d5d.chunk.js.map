{"version":3,"sources":["assets/images/bgs sync /^/.*/.jpg$","assets/images/bgs/boraBora.jpg","assets/images/bgs/lake.jpg","assets/images/bgs/mountains.jpg","assets/images/bgs/purple_nature.jpg","assets/images/bgs/sky.jpg","assets/images/bgs/water.jpg","assets/images/bgs/pink.jpg","history.js","cmps/BoardList/BoardList.jsx","service/utils.js","service/boardService.js","store/actions/boardActions.js","cmps/ActionForm/ActionForm.jsx","pages/HomePage/HomePage.jsx","store/actions/headerActions.js","cmps/CardDetails/DeleteVerify/DeleteVerify.jsx","cmps/AppHeader/AppHeaderMenu/AppHeaderMenu.jsx","cmps/AppHeader/AppHeader.jsx","cmps/CardDetails/CardLabel/CardLabel.jsx","cmps/CardPreview/CardPreview.jsx","service/cardService.js","store/actions/cardActions.js","cmps/CardList/CardList.jsx","service/listService.js","store/actions/listActions.js","cmps/AddCard/AddCard.jsx","cmps/ListMenu/ListMenu.jsx","cmps/ChangeListTitle/ChangeListTitle.jsx","cmps/ListMenu/MoveList/MoveList.jsx","cmps/List/List.jsx","cmps/BoardBackground/BoardBackground.jsx","cmps/CardDetails/BlackScreen/BlackScreen.jsx","cmps/CardDetails/CardCover/CardCover.jsx","cmps/CardDetails/CopyCard/CopyCard.jsx","cmps/CardDetails/MoveCard/MoveCard.jsx","cmps/ColorPallette/ColorPallette.jsx","cmps/CardDetails/CardCoverMenu/CardCoverMenu.jsx","cmps/CardDetails/RightSideMenu/AddCheckList/AddCheckList.jsx","cmps/CardDetails/LabelsMenu/LabelsMenu.jsx","cmps/CardDetails/RightSideMenu/RightSideMenu.jsx","cmps/ProgressBar/ProgressBar.jsx","cmps/CardDetails/CardCheckList/ItemPreview/ItemPreview.jsx","cmps/CardDetails/CardCheckList/CardCheckList.jsx","cmps/CardDetails/Description/AddDescription/AddDescription.jsx","cmps/CardDetails/Description/Description.jsx","cmps/CardDetails/CardDetails.jsx","cmps/AddList/AddList.jsx","cmps/Board/Board.jsx","App.js","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","history","createBrowserHistory","BoardList","props","mainStore","useSelector","state","boards","favBoards","useState","boardList","setBoardList","getAllBoards","useCallback","allBoards","board","currBoard","push","init","useEffect","className","key","to","alt","src","require","backgroundImg","name","values","generatePassword","length","charset","retVal","i","n","charAt","Math","floor","random","loadFromStorage","val","localStorage","getItem","JSON","parse","getRandomIntInclusive","min","max","ceil","saveToStorage","setItem","stringify","boardName","a","UTILS","isFav","cards","lists","listOrder","navBarTheme","createdAt","Date","toLocaleDateString","title","content","cardIds","store","start","source","destination","draggableId","newCardIds","Array","from","splice","index","updatedList","finish","startCardIds","newStartList","finishCardIds","newFinishList","newListOrder","createBoard","createCard","createList","dragOutsideList","updateList","dragList","dragInsideList","dispatch","service","data","console","log","_dragInsideList","res","_dragOutsideList","_dragList","newBoard","_createBoard","removeSavedBoard","type","boardToRemove","changeBoardBackground","bgName","_changeBoardBg","setActiveBoard","boardId","activeBoard","_createList","_changeBoardName","ActionForm","placeholder","onSubmitFunc","toggleAdd","currRef","useRef","useForm","register","handleSubmit","current","focus","onSubmit","style","resize","ref","autoComplete","onClick","HomePage","useParams","useDispatch","isAddBoardVis","setAddBoardVis","onToggleAddBoard","boardTitle","DeleteVerify","onDelete","onToggle","itemToDelete","AppHeaderMenu","onRemoveSavedBoard","onToggleAppHeaderMenu","useHistory","isChangeNameVis","setChangeName","isAddListVisible","setAddListVisibility","isDeleteVerify","setDeleteVerify","onToggleAddList","onToggleBoardName","onToggleDleteBoard","changeBoardName","boardToDelete","listName","listTitle","boardService","newList","AppHeader","setTheme","bottomNav","isBgBoardOpen","setIsBgBoardOpen","isHeaderMenuVisible","setHeaderMenu","showSavedTitle","setSaved","home","icon","faHome","faBorderAll","plusSign","faPlus","info","faInfoCircle","notifications","faBell","star","faStar","onHideSave","favoriteBoard","setTimeout","CardLabel","label","backgroundColor","CardPreview","currCard","cardid","pencil","faPencilAlt","checklist","faTasks","clock","faClock","eye","faEye","clipBoard","faClipboardList","provided","snapshot","MainContainer","draggableProps","dragHandleProps","innerRef","isDragging","cardCover","labels","isWatched","dueDate","fontSize","substring","desc","styled","div","CopyCard","cardToCopy","this","description","deleteCard","currList","cardId","filter","cardsId","copyCard","newCard","createCheckList","checkListName","list","createCheckListItem","itemName","text","isChecked","removeLabel","labelIndex","toggleCardDetails","isCardDetailShown","checkItem","currCheckList","currItem","_toggleCheckItem","setCardCover","color","_setCardCover","setDueDate","_setDueDate","_changeCardTitle","_setCardDesc","_addChecklist","_removeCheckList","_addCheckListItem","_removeCheckListItem","_toggleCardWatch","_setLabel","_updateLabels","CardList","currListID","onToggleCardDetails","listId","idx","_deleteCards","cardID","newBoardCards","newLists","currListCardIds","forEach","listToCopy","copiedListTitle","matchingCards","newCards","cardIdsToCopy","_findMatchingCards","card","cardCopy","findIndex","element","end","copiedList","copiedCards","cardsToCopy","allCards","deleteList","cardTitle","copyList","getListCards","currCards","listService","updatedData","_deleteList","_createCard","_copyList","_moveList","_changeListName","AddCard","toggleAddCard","reset","ListMenu","toggleListMenu","toggleEditTitle","onToggleMoveList","clicked","window","addEventListener","removeEventListener","newListCopy","ChangeListTitle","changeListName","newTitle","width","MoveList","moveTo","setMoveTo","onChange","moveToBoardId","target","value","listToMove","currListCards","moveList","List","setCurrList","isAddCardShown","setAddCard","isListMenuShown","setListMenu","isEditTitle","setIsEditTitle","isMoveListVisible","setMoveList","plus","listMenu","faEllipsisH","getCurrList","onToggleAddCard","onToggleListMenu","MainDragContainer","droppableId","MainDropContainer","droppableProps","BoardBackground","toggleBgBoard","close","faTimes","changeBackgroundImg","nature","mountains","water","lake","boraBora","sky","BlackScreen","CardCover","onToggleCopyCard","listOptions","setListOptions","onCopyCard","copyToList","cardService","copiedCard","copyToListID","MoveCard","onToggleMoveCard","onMoveCard","moveToList","moveTocardIds","includes","moveToListID","moveCard","ColorPallette","onSelectColor","onToggleColor","CardCoverMenu","toggleCardVisibility","onCloseCover","onCloseColor","AddCheckList","onToggleCheckList","onAddCheckList","checklistName","marginBlockEnd","LabelsMenu","onSetLabel","RightSideMenu","onToggleCover","isCoverOn","listid","onToggleCardWatch","isCopyClicked","setCopyClick","isMoveClicked","setMoveClick","isDeleteClicked","setDeleteClick","isAddCheckList","setAddChecklist","isLabelMenuVis","setLabelMenuVis","date","setDates","isCalShown","toggleShowCal","avatar","faUser","faTag","paperClip","faPaperclip","arrow","faArrowRight","copy","faCopy","trash","faTrashAlt","share","faShareAlt","cover","faColumns","onToggleLabelMenu","onToggleDeleteCard","colorCode","newLabelList","labelColor","setLabel","newChecklist","currChecklist","newDate","toString","ProgressBar","bgcolor","completed","fillerStyles","borderRadius","textAlign","fontWeight","ItemPreview","onCheckItem","item","onRemoveCheckListItem","checked","CardCheckList","isAddItemVisible","setItemVisible","checkedItems","setCheckItems","currCheckItem","setCurrCheckItem","setCompleted","checkedItem","itemToRemove","removeCheckListItem","newCheckedItems","onToggleItemVisibility","calculatePercentage","number","percent","isNaN","toFixed","checkListToRemove","removeCheckList","listItem","newItem","addCheckListItem","AddDescription","onToggleCardDesc","setCardDesc","defaultValue","cols","rows","Description","isDescVisible","CardDetails","setCoverOn","istCoverVisibile","setCoverVisibility","setDescVisibility","newCardTitle","setCardTitle","isCardTitleChange","onSetCardTitle","ticket","faTicketAlt","height","ev","preventDefault","changeCardTitle","prevTitle","toggleCardWatch","AddList","windowWidth","Board","isBgSideOpen","setAddList","setCurrBoard","boardRef","loadCurrBoard","onDragEnd","useMemo","result","direction","MainDndArea","App","History","component","exact","path","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","newBoards","isItemChecked","newChecklistToSave","currListId","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69b84d5d.chunk.js","sourcesContent":["var map = {\n\t\"./boraBora.jpg\": 31,\n\t\"./lake.jpg\": 32,\n\t\"./mountains.jpg\": 33,\n\t\"./pink.jpg\": 62,\n\t\"./purple_nature.jpg\": 34,\n\t\"./sky.jpg\": 35,\n\t\"./water.jpg\": 36\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 30;","module.exports = __webpack_public_path__ + \"static/media/boraBora.989f4a87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lake.c140c866.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mountains.736266ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/purple_nature.72bb8802.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sky.cc4c0d26.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water.d264abfb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pink.7e9ebd14.jpg\";","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport function BoardList(props) {\r\n    const mainStore = useSelector(state => state.mainStore)\r\n    const { boards, favBoards } = mainStore\r\n    const [boardList, setBoardList] = useState('')\r\n\r\n\r\n\r\n    const getAllBoards = useCallback(\r\n        () => {\r\n            const allBoards = []\r\n            for (const board in boards) {\r\n                const currBoard = boards[board];\r\n                allBoards.push(currBoard)\r\n            }\r\n            return allBoards\r\n        },\r\n        [boards],\r\n    )\r\n\r\n\r\n    const init = useCallback(\r\n        () => {\r\n            setBoardList(getAllBoards())\r\n        },\r\n        [getAllBoards],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [init])\r\n\r\n\r\n\r\n    if (!boardList) return 'LOADING...'\r\n    return (\r\n        <div className=\"board-list \">\r\n            <h2>All Boards</h2>\r\n            <div className=\"board-list-container justify-center flex wrap\">\r\n                {boardList.map(board => {\r\n                    return <div className=\"container margin-center flex\" key={board.id}>\r\n                        <div className=\"boards flex\">\r\n                            <Link to={`boards/${board.id}`}><img\r\n                                alt=\"board\"\r\n                                src={require(`../../assets/images/bgs/${board.backgroundImg}.jpg`)}></img>\r\n                                <p>{board.name}</p>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"fav-boards \">\r\n                <h2>Favorite Boards</h2>\r\n                <div className=\"fav-boards-container flex wrap\">\r\n                    {Object.values(favBoards).map(board => {\r\n                        return <div className=\"container margin-center \" key={board.id}>\r\n                            <div className=\"boards flex \">\r\n                                <Link to={`boards/${board.id}`}>\r\n                                    <img\r\n                                        alt=\"boards\"\r\n                                        src={require(`../../assets/images/bgs/${board.backgroundImg}.jpg`)}></img>\r\n                                    <p>{board.name}</p>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nfunction getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    const final = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return final\r\n}\r\n\r\nfunction generatePassword(length) {\r\n    var charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\r\n        retVal = \"\";\r\n    for (var i = 0, n = charset.length; i < length; ++i) {\r\n        retVal += charset.charAt(Math.floor(Math.random() * n));\r\n    }\r\n    return retVal;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val)\r\n}\r\nexport default {\r\n    generatePassword,\r\n    loadFromStorage,\r\n    getRandomIntInclusive,\r\n    saveToStorage,\r\n}\r\n","// const UTILS = require('./utils')\r\nimport UTILS from './utils'\r\nconst KEY = 'mainStore'\r\n\r\nasync function createBoard(boardName) {\r\n  return {\r\n    id: UTILS.generatePassword(4),\r\n    name: boardName,\r\n    isFav: false,\r\n    cards: {\r\n\r\n    },\r\n    lists: {\r\n\r\n    },\r\n    listOrder: [],\r\n    backgroundImg: 'sky',\r\n    navBarTheme: 'bright',\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function createCard(title) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: title,\r\n    content: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\nasync function createList(title) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: title,\r\n    cardIds: [],\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function saveToStorage(store) {\r\n  UTILS.saveToStorage(KEY, store)\r\n}\r\n\r\nasync function updateList(start, source, destination, draggableId) {\r\n  const newCardIds = Array.from(start.cardIds)\r\n  newCardIds.splice(source.index, 1)\r\n  newCardIds.splice(destination.index, 0, draggableId)\r\n  const updatedList = {\r\n    ...start,\r\n    cardIds: newCardIds\r\n  }\r\n  return updatedList\r\n}\r\n\r\nasync function dragOutsideList(start, source, destination, draggableId, finish) {\r\n  const startCardIds = start.cardIds\r\n  startCardIds.splice(source.index, 1);\r\n\r\n  const newStartList = {\r\n    ...start,\r\n    cardIds: startCardIds\r\n  }\r\n\r\n  const finishCardIds = finish.cardIds\r\n  finishCardIds.splice(destination.index, 0, draggableId);\r\n  const newFinishList = {\r\n    ...finish,\r\n    cardIds: finishCardIds\r\n  }\r\n  return {\r\n    newStartList: newStartList,\r\n    newFinishList: newFinishList\r\n  }\r\n}\r\nasync function dragList(source, destination, draggableId, currBoard) {\r\n\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(source.index, 1)\r\n  newListOrder.splice(destination.index, 0, draggableId)\r\n  return newListOrder\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  saveToStorage,\r\n  createBoard,\r\n  createCard,\r\n  createList,\r\n  dragOutsideList,\r\n  updateList,\r\n  dragList\r\n}\r\n","import service from '../../service/boardService'\r\n\r\n\r\nexport function dragInsideList(start, source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedList = await service.updateList(start, source, destination, draggableId)\r\n            const data = {\r\n                updatedList: updatedList,\r\n                currBoard: currBoard\r\n            }\r\n            console.log('currBoard', currBoard)\r\n            dispatch(_dragInsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragOutsideList(start, source, destination, draggableId, currBoard, finish) {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await service.dragOutsideList(start, source, destination, draggableId, finish)\r\n            const data = {\r\n                newStartList: res.newStartList,\r\n                newFinishList: res.newFinishList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragOutsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragList(source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const newListOrder = await service.dragList(source, destination, draggableId, currBoard)\r\n            const data = {\r\n                newListOrder: newListOrder,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragList(data));\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createBoard(boardName = \"New Board\") {\r\n    return async dispatch => {\r\n        try {\r\n            const newBoard = await service.createBoard(boardName)\r\n            const data = {\r\n                newBoard: newBoard,\r\n            }\r\n            dispatch(_createBoard(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteBoard(boardToDelete) {\r\n    return async dispatch => {\r\n        try {\r\n\r\n            dispatch(_deleteBoard(boardToDelete))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeBoardName(currBoard, boardName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                boardName: boardName\r\n            }\r\n            dispatch(_changeBoardName(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function createList(currBoard, listName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await service.createList(listName)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_createList(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function favoriteBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_favoriteBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeSavedBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_removeSavedBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeBoardBackground(currBoard, bgName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                bgName: bgName,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_changeBoardBg(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function setActiveBoard(boardId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setActiveBoard(boardId))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function saveToStorage(store) {\r\n    return async dispatch => {\r\n        try {\r\n            await service.saveToStorage(store)\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _setActiveBoard(activeBoard) {\r\n    return {\r\n        type: 'SET_ACTIVE_BOARD',\r\n        activeBoard\r\n    }\r\n}\r\n\r\n\r\nfunction _dragInsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _dragOutsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS',\r\n        data\r\n    }\r\n}\r\nfunction _dragList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS_ORDER',\r\n        data\r\n    }\r\n}\r\nfunction _createList(data) {\r\n\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardBg(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_BG',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}\r\nfunction _favoriteBoard(data) {\r\n    return {\r\n        type: 'TOGGLE_FAV_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _removeSavedBoard(boardToRemove) {\r\n    return {\r\n        type: 'REMOVE_SAVED_BOARD',\r\n        boardToRemove\r\n    }\r\n}\r\nfunction _createBoard(data) {\r\n    return {\r\n        type: 'CREATE_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardName(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_NAME',\r\n        data\r\n    }\r\n}\r\nfunction _deleteBoard(data) {\r\n    return {\r\n        type: 'DELETE_BOARD',\r\n        data\r\n    }\r\n}","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nexport function ActionForm({ placeholder, name, onSubmitFunc, toggleAdd }) {\r\n    const currRef = useRef(null);\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    useEffect(() => {\r\n        currRef.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"action-form\">\r\n            <form onSubmit={handleSubmit(onSubmitFunc)}>\r\n                <div className=\"flex column\">\r\n                    <input name={name} type=\"text\"\r\n                        style={{ resize: \"none\" }}\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            currRef.current = e\r\n                        }} placeholder={placeholder}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n                        <button className=\"add-btn\" >Add</button>\r\n                        <button onClick={toggleAdd} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BoardList } from '../../cmps/BoardList/BoardList'\r\nimport { useParams } from 'react-router-dom'\r\nimport { setActiveBoard, saveToStorage } from '../../store/actions/boardActions'\r\nimport { createBoard } from '../../store/actions/boardActions';\r\nimport { ActionForm } from '../../cmps/ActionForm/ActionForm';\r\n\r\nexport function HomePage(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { id } = useParams();\r\n    const currBoard = state.boards[id]\r\n    const dispatch = useDispatch()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAddBoard()\r\n    }\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setActiveBoard(''))\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home-page margin-center\">\r\n            <div className=\"center-container margin-center\">\r\n                <div className=\"flex align-center space-between\">\r\n                    <h1>CHOOSE YOUR BOARD</h1>\r\n                    \r\n                    <div className=\"add-board-section flex\">\r\n                        {!isAddBoardVis &&\r\n                            <button onClick={onToggleAddBoard} className=\"create-board\">Create Board</button>\r\n                        }\r\n                        {isAddBoardVis &&\r\n                            <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'} toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"borad-list-container flex justify-center\">\r\n                    <div className=\"side-bar\">\r\n                    </div>\r\n                    <section className=\"board-list-section\">\r\n                        <BoardList />\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import boardService from '../../service/boardService';\r\n\r\nexport function createList(currBoard, listTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await boardService.createList(listTitle)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard,\r\n            }\r\n            dispatch(_createList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n\r\n}\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction _createList(data) {\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport function DeleteVerify({ onDelete, onToggle,itemToDelete }) {\r\n\r\n    return (\r\n        <div className=\"delete-verify\">\r\n            <div className=\"main-content-delete flex column\">\r\n                <p>Delete this {itemToDelete}?</p>\r\n                <div className=\"btns flex space-between\">\r\n\r\n                    <button className=\"dlt-btn\" onClick={onDelete}>Delete</button>\r\n                    <button onClick={onToggle}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createList } from '../../../store/actions/headerActions'\r\nimport { createBoard, changeBoardName, deleteBoard } from '../../../store/actions/boardActions';\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useHistory } from 'react-router';\r\nimport { DeleteVerify } from '../../CardDetails/DeleteVerify/DeleteVerify';\r\n\r\nexport function AppHeaderMenu({ onRemoveSavedBoard, activeBoard, onToggleAppHeaderMenu, currBoard }) {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n    const [isChangeNameVis, setChangeName] = useState(false)\r\n    const [isAddListVisible, setAddListVisibility] = useState(false)\r\n    const [isDeleteVerify, setDeleteVerify] = useState(false)\r\n\r\n    const onToggleAddList = () => {\r\n        setAddListVisibility(!isAddListVisible)\r\n    }\r\n\r\n    const onAddList = ({ listName }) => {\r\n        dispatch(createList(activeBoard, listName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n    const onToggleBoardName = () => {\r\n        setChangeName(!isChangeNameVis)\r\n    }\r\n\r\n    const onChangeBoardName = (data) => {\r\n        dispatch(changeBoardName(currBoard, data.boardName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onDeleteBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch( onRemoveSavedBoard(currBoard))\r\n        }\r\n        onToggleAppHeaderMenu()\r\n        dispatch(deleteBoard(currBoard))\r\n        history.push('/')\r\n    }\r\n\r\n\r\n    const onToggleDleteBoard = () => {\r\n        setDeleteVerify(!isDeleteVerify)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"app-header-menu\">\r\n            <div className=\"container\">\r\n                <div className=\"title flex justify-center\">\r\n                    <h3>Board Actions</h3>\r\n                </div>\r\n                <hr />\r\n                <div className=\"menu-actions\">\r\n                    {!isChangeNameVis &&\r\n                        <p onClick={onToggleBoardName}>Change Board Name...</p>\r\n                    }\r\n\r\n                    {isChangeNameVis &&\r\n                        <ActionForm name=\"boardName\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleBoardName} onSubmitFunc={onChangeBoardName} />\r\n                    }\r\n                    {!isAddBoardVis &&\r\n                        <p onClick={onToggleAddBoard}>Create Board...</p>\r\n                    }\r\n                    {isAddBoardVis &&\r\n                        <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                    }\r\n                    {!isDeleteVerify &&\r\n                        <p onClick={onToggleDleteBoard}>Delete Board...</p>\r\n                    }\r\n\r\n                    {isDeleteVerify &&\r\n                        <DeleteVerify itemToDelete={'board'} onToggle={onToggleDleteBoard} onDelete={onDeleteBoard} />\r\n                    }\r\n                    {!isAddListVisible &&\r\n                        <p onClick={onToggleAddList}>Add List...</p>\r\n                    }\r\n                    {isAddListVisible &&\r\n                        <ActionForm name=\"listName\" placeholder={'Add list Title'}\r\n                            toggleAdd={onToggleAddList} onSubmitFunc={onAddList} />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { toggleBgSide } from '../../store/actions/headerActions'\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { favoriteBoard, removeSavedBoard } from '../../store/actions/boardActions'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBorderAll } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { AppHeaderMenu } from './AppHeaderMenu/AppHeaderMenu';\r\n\r\n\r\n\r\nexport function AppHeader(props) {\r\n\r\n    const state = useSelector(state => state.mainStore)\r\n    const { activeBoard } = state\r\n    const currBoard = state.boards[activeBoard]\r\n    const [navBarTheme, setTheme] = useState()\r\n    const bottomNav = currBoard?.bottomNav\r\n    const [isBgBoardOpen, setIsBgBoardOpen] = useState(false)\r\n    const [isHeaderMenuVisible, setHeaderMenu] = useState(false)\r\n    const [showSavedTitle, setSaved] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const home = <FontAwesomeIcon icon={faHome} />\r\n    const boards = <FontAwesomeIcon icon={faBorderAll} />\r\n    const plusSign = <FontAwesomeIcon icon={faPlus} />\r\n    const info = <FontAwesomeIcon icon={faInfoCircle} />\r\n    const notifications = <FontAwesomeIcon icon={faBell} />\r\n    const star = <FontAwesomeIcon icon={faStar} />\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        setIsBgBoardOpen(!isBgBoardOpen)\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onSaveBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch(removeSavedBoard(currBoard))\r\n            return\r\n        }\r\n        dispatch(favoriteBoard(currBoard))\r\n        setSaved(true)\r\n        setTimeout(() => {\r\n            onHideSave()\r\n\r\n        }, 500);\r\n    }\r\n\r\n    const onHideSave = () => {\r\n        setSaved(false)\r\n    }\r\n\r\n\r\n    const onToggleAppHeaderMenu = () => {\r\n        setHeaderMenu(!isHeaderMenuVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        activeBoard ? setTheme('') : setTheme('dark')\r\n        return () => {\r\n        }\r\n    }, [activeBoard])\r\n\r\n    return (\r\n        <nav className={`app-header flex column ${navBarTheme}`}>\r\n            <div className={`top-part flex ${navBarTheme}`}>\r\n                <div className=\"nav-tools flex space-between align-center\">\r\n                    <div className=\"left-side flex align-center\">\r\n                        <Link to=\"/\"><button className=\"home\">{home}</button></Link>\r\n                        <button>{boards} <span className=\"desktop-boards\">Boards</span> </button>\r\n                        <input type=\"text\" placeholder=\"SEARCH...\" />\r\n                    </div>\r\n                    <div className=\"logo\">\r\n                        <h1>TaskForce</h1>\r\n                    </div>\r\n                    <div className=\"right-side flex align-center\">\r\n                        <button onClick={onToggleAppHeaderMenu}>{plusSign}</button>\r\n                        <button>{info}</button>\r\n                        <button>{notifications}</button>\r\n                        <button>account</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            {activeBoard && currBoard &&\r\n                <div className={`bottom-nav flex align-center ${bottomNav}`}>\r\n                    <h1> {currBoard.name}</h1>\r\n                    <button className=\"btn\" onClick={toggleBgBoard}>Change Background</button>\r\n                    <button onClick={onSaveBoard} className={`btn btn-fav-board ${currBoard?.isFav ? 'saved' : ''}`}>{star}</button>\r\n                    <p>Total Lists: {currBoard.listOrder.length}</p>\r\n                    {showSavedTitle &&\r\n                        <p className=\"save-notification\">saved!</p>\r\n                    }\r\n                    {isHeaderMenuVisible &&\r\n                        <AppHeaderMenu onRemoveSavedBoard={removeSavedBoard} currBoard={currBoard} activeBoard={activeBoard} onToggleAppHeaderMenu={onToggleAppHeaderMenu} />\r\n                    }\r\n                </div>\r\n            }\r\n        </nav >\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport function CardLabel({ label }) {\r\n    return (\r\n        <div style={{ backgroundColor: `${label}` }} className=\"card-label\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt, faTasks, faClock, faEye, faClipboardList } from '@fortawesome/free-solid-svg-icons'\r\nimport { CardLabel } from '../CardDetails/CardLabel/CardLabel'\r\nexport function CardPreview(props) {\r\n\r\n    const { cards, cardid, } = props\r\n    const currCard = cards[cardid]\r\n\r\n    const pencil = <FontAwesomeIcon icon={faPencilAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    if (!currCard) return 'loading...'\r\n    return (\r\n        <Draggable draggableId={currCard?.id} index={props.index}>\r\n            {(provided, snapshot) => (\r\n                <div>\r\n                    <MainContainer\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        <div className=\"card-preview flex column\">\r\n                            {currCard.cardCover &&\r\n                                <div style={{ backgroundColor: `${currCard.cardCover}` }} className=\"card-top-cover\">\r\n                                </div>\r\n                            }\r\n                            <div className=\"card-labels flex\">\r\n\r\n                                {currCard.labels && currCard.labels.map(label => {\r\n                                    return <CardLabel key={label} label={label} />\r\n                                })}\r\n                            </div>\r\n                            <div className=\"main-card-preview-content\">\r\n\r\n                                <div className=\"top-section flex space-between\">\r\n                                    <div className=\"title\">\r\n                                        <p>{currCard?.title}</p>\r\n                                    </div>\r\n                                    <span className=\"edit\" >{pencil}</span>\r\n                                </div>\r\n                                <div className=\"indicators flex align-center\">\r\n                                    {currCard.isWatched &&\r\n                                        eye\r\n                                    }\r\n                                    {currCard.dueDate &&\r\n                                        <span className=\"flex align-center\">\r\n                                            {clock}\r\n                                            <p style={{ fontSize: '10px' }}>\r\n\r\n                                                {currCard.dueDate.substring(4, 10)}\r\n                                            </p>\r\n                                        </span>\r\n                                    }\r\n                                    {currCard.desc &&\r\n                                        clipBoard\r\n                                    }\r\n                                    {Object.keys(currCard.checklist).length > 0 &&\r\n                                        checklist\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </MainContainer>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\n\r\nconst MainContainer = styled.div`\r\n\r\nwidth:100%;\r\n`;","import UTILS from '../service/utils'\r\n\r\n\r\n\r\n\r\nfunction deleteCard(currBoard, currList, cardId) {\r\n  const newCards = currBoard.cards\r\n  delete newCards[cardId]\r\n\r\n  const newCardIds = currList.cardIds.filter((cardsId) => cardsId !== cardId)\r\n  currList.cardIds = newCardIds\r\n\r\n  return { currBoard: currBoard, currList: currList, cardId }\r\n}\r\n\r\n\r\n\r\nfunction copyCard(newCard) {\r\n  return new CopyCard(newCard)\r\n}\r\n\r\n\r\nfunction CopyCard(cardToCopy) {\r\n    this.id = UTILS.generatePassword(5);\r\n    this.title = cardToCopy.title;\r\n    this.description = cardToCopy.description;\r\n    this.cardCover = cardToCopy.cardCover;\r\n    this.checklist = cardToCopy.checklist;\r\n    this.isWatched = false;\r\n    this.dueDate = cardToCopy.dueDate;\r\n    this.labels = cardToCopy.labels;\r\n    this.createdAt = new Date().toLocaleDateString()\r\n}\r\n\r\nfunction createCheckList(checkListName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    name: checkListName,\r\n    list: {},\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCheckListItem(itemName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    text: itemName,\r\n    isChecked: false,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\nfunction removeLabel(currCard, labelIndex) {\r\n  currCard.labels.splice(labelIndex, 1)\r\n  const newLabelList = currCard.labels\r\n  return newLabelList\r\n}\r\n\r\n\r\n\r\nexport default {\r\n  deleteCard,\r\n  copyCard,\r\n  createCheckList,\r\n  createCheckListItem,\r\n  removeLabel\r\n}","import cardService from '../../service/cardService';\r\n\r\nexport function toggleCardDetails(isCardDetailShown) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleCardDetails(isCardDetailShown));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateCurrList(listId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateCurrList(listId));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeCardTitle(currCard, cardTitle, currBoard) {\r\n    return async dispatch => {\r\n        const data = {\r\n            currCard: currCard,\r\n            cardTitle: cardTitle,\r\n            currBoard: currBoard\r\n        }\r\n        try {\r\n            dispatch(_changeCardTitle(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function deleteCard(currBoard, currList, cardId) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await cardService.deleteCard(currBoard, currList, cardId)\r\n\r\n            dispatch(_deleteCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function copyCard(currBoard, copyToList, cardToCopy) {\r\n    console.log('cardToCopy:', cardToCopy)\r\n    return async dispatch => {\r\n        try {\r\n            const copiedCard = await cardService.copyCard(cardToCopy)\r\n            const updatedData = {\r\n                copiedCard: copiedCard,\r\n                currBoard: currBoard,\r\n                copyToListID: copyToList\r\n            }\r\n            dispatch(_copyCard(updatedData));\r\n            console.log('newCard is:', copiedCard)\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function moveCard(currBoard, moveToList, currCard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = {\r\n                currBoard: currBoard,\r\n                moveToListID: moveToList,\r\n                currCard: currCard,\r\n                currList: currList\r\n            }\r\n            dispatch(_moveCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setCardDesc(currBoard, currCard, desc) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                desc: desc,\r\n            }\r\n            dispatch(_setCardDesc(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function checkItem(currBoard, currCard, currCheckList, currItem, isChecked) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                currItem: currItem,\r\n                isChecked: isChecked\r\n            }\r\n            dispatch(_toggleCheckItem(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setLabel(currBoard, currCard, labelColor) {\r\n    console.log('currCardofLabels:', currCard)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        labelColor: labelColor\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setLabel(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeLabel(currBoard, currCard, labelIndex) {\r\n    const newLabelList = cardService.removeLabel(currCard, labelIndex)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        newLabelList: newLabelList\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateLabels(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function toggleCardWatch(currBoard, currCard, isWatched) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                isWatched: isWatched\r\n            }\r\n            dispatch(_toggleCardWatch(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createCheckList(currBoard, currCard, checklistName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newChecklist = await cardService.createCheckList(checklistName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currChecklist: newChecklist,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_addChecklist(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCheckListItem(currBoard, currCard, currCheckList, itemName) {\r\n    return async dispatch => {\r\n        try {\r\n            const currItem = await cardService.createCheckListItem(itemName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                newItem: currItem\r\n            }\r\n            dispatch(_addCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckListItem(currBoard, currCard, currCheckList, itemToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                itemToRemove: itemToRemove\r\n            }\r\n            dispatch(_removeCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckList(currBoard, currCard, checkListToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                checkListToRemove: checkListToRemove,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_removeCheckList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function setCardCover(currBoard, currCard, color) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                color: color,\r\n            }\r\n            dispatch(_setCardCover(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDueDate(currBoard, currCard, dueDate) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                dueDate: dueDate,\r\n            }\r\n            dispatch(_setDueDate(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _toggleCardDetails(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_DETAILS',\r\n        data\r\n    }\r\n}\r\nfunction _updateCurrList(data) {\r\n    return {\r\n        type: 'UPDATE_CURR_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _deleteCard(data) {\r\n    return {\r\n        type: 'DELETE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyCard(data) {\r\n    return {\r\n        type: 'COPY_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _changeCardTitle(data) {\r\n    return {\r\n        type: 'SET_CARD_TITLE',\r\n        data\r\n    }\r\n}\r\nfunction _moveCard(data) {\r\n    return {\r\n        type: 'MOVE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _setCardCover(data) {\r\n    return {\r\n        type: 'CARD_COVER',\r\n        data\r\n    }\r\n}\r\nfunction _setCardDesc(data) {\r\n    return {\r\n        type: 'SET_DESC',\r\n        data\r\n    }\r\n}\r\nfunction _addChecklist(data) {\r\n    return {\r\n        type: 'CREATE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckList(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _addCheckListItem(data) {\r\n    return {\r\n        type: 'ADD_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckListItem(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setDueDate(data) {\r\n    return {\r\n        type: 'SET_DUE_DATE',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCardWatch(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_WATCH',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCheckItem(data) {\r\n    return {\r\n        type: 'TOGGLE_CHECK_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setLabel(data) {\r\n    return {\r\n        type: 'SET_LABEL',\r\n        data\r\n    }\r\n}\r\nfunction _updateLabels(data) {\r\n    return {\r\n        type: 'UPDATE_LABELS',\r\n        data\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { CardPreview } from '../CardPreview/CardPreview';\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardDetails ,updateCurrList} from '../../store/actions/cardActions'\r\n\r\nexport function CardList(props) {\r\n    const { cards, provided, cardIds, currListID } = props\r\n    const params = useParams()\r\n    const { id } = params\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onToggleCardDetails = (cardid) => {\r\n        history.push(`/boards/${id}/${currListID}/${cardid}`)\r\n        dispatch(updateCurrList(currListID.id))\r\n        dispatch(toggleCardDetails(true))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [cardIds])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {cardIds.map((cardid, idx) => {\r\n                return <div key={cardid} onClick={() => onToggleCardDetails(cardid)}>\r\n\r\n                    <CardPreview\r\n                        key={cardid}\r\n                        cards={cards}\r\n                        index={idx}\r\n                        cardid={cardid} />\r\n\r\n                </div>\r\n            })}\r\n            {provided.placeholder}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import UTILS from './utils'\r\n\r\nasync function deleteList(currBoard, currList) {\r\n  const newLists = currBoard.lists\r\n  delete newLists[currList.id]\r\n  const newListOrder = currBoard.listOrder.filter(list => list !== currList.id)\r\n\r\n  const currListCardIds = currList.cardIds\r\n  const newBoardCards = currBoard.cards\r\n\r\n\r\n  function _deleteCards(cardID) {\r\n    delete newBoardCards[cardID]\r\n  }\r\n  currListCardIds.forEach(cardID => _deleteCards(cardID))\r\n\r\n\r\n  return {\r\n    newLists: newLists,\r\n    newListOrder: newListOrder,\r\n    newBoardCards: newBoardCards\r\n  }\r\n\r\n}\r\n\r\n\r\nasync function copyList(currBoard, listToCopy) {\r\n  const copiedListTitle = 'Copy of - ' + listToCopy.title\r\n  const newList = await _createList(copiedListTitle)\r\n  const matchingCards = []\r\n  const newCards = {}\r\n  const cardIdsToCopy = listToCopy.cardIds\r\n  _findMatchingCards(matchingCards, cardIdsToCopy, currBoard.cards)\r\n\r\n  matchingCards.forEach(\r\n    card => {\r\n      const cardCopy = copyCard(card)\r\n      newCards[cardCopy.id] = cardCopy\r\n      return\r\n    }\r\n  )\r\n  newList.cardIds = Object.keys(newCards)\r\n\r\n  const start = currBoard.listOrder.findIndex(element => element === listToCopy.id)\r\n  const end = newList.id\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(start + 1, 0, end)\r\n\r\n  return {\r\n    copiedList: newList,\r\n    newListOrder: newListOrder,\r\n    copiedCards: newCards\r\n  }\r\n}\r\n\r\n\r\nfunction getListCards(cards, list) {\r\n  const currCards = {}\r\n  list.cardIds.forEach((cardID) => { return cards[cardID] ? currCards[cardID] = cards[cardID] : '' })\r\n  return currCards\r\n}\r\n\r\n\r\n\r\nfunction _findMatchingCards(matchingCards, cardsToCopy, allCards) {\r\n  cardsToCopy.forEach(cardId => {\r\n    const currCard = allCards[cardId]\r\n    if (currCard) {\r\n      matchingCards.push(currCard)\r\n    }\r\n\r\n  })\r\n\r\n}\r\n\r\nasync function _createList(listName,) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: listName,\r\n    cardIds: []\r\n  }\r\n}\r\n\r\nfunction copyCard(cardToCopy) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardToCopy.title,\r\n    desc: cardToCopy.desc,\r\n    cardCover: cardToCopy.cardCover,\r\n    checklist: cardToCopy.checklist,\r\n    isWatched: cardToCopy.isWatched,\r\n    dueDate: cardToCopy.dueDate,\r\n    labels: cardToCopy.labels,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCard(cardTitle, description = '') {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardTitle,\r\n    desc: description,\r\n    checklist: {},\r\n    cardCover: '',\r\n    isWatched: false,\r\n    labels: [],\r\n    dueDate: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  deleteList,\r\n  createCard,\r\n  copyList,\r\n  getListCards\r\n}\r\n","import listService from '../../service/listService'\r\n\r\nexport function createCard(currBoard, currList, cardTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newCard = await listService.createCard(cardTitle)\r\n            const data = {\r\n                newCard: newCard,\r\n                currBoard: currBoard,\r\n                currList: currList\r\n            }\r\n            dispatch(_createCard(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteList(currBoard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await listService.deleteList(currBoard, currList)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: currList,\r\n                newLists: updatedData.newLists,\r\n                newListOrder: updatedData.newListOrder,\r\n                newBoardCards: updatedData.newBoardCards\r\n            }\r\n            dispatch(_deleteList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function moveList(currBoard, listToMove, moveToBoardId) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const currListCards = listService.getListCards(currBoard.cards, listToMove)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                listToMove: listToMove,\r\n                moveToBoardId: moveToBoardId,\r\n                currListCards: currListCards\r\n            }\r\n            dispatch(_moveList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function copyList(currBoard, listToCopy) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const newListCopy = await listService.copyList(currBoard, listToCopy)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                copiedList: newListCopy.copiedList,\r\n                newListOrder: newListCopy.newListOrder,\r\n                copiedCards: newListCopy.copiedCards\r\n            }\r\n            dispatch(_copyList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeListName(currBoard, currList, listTitle) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            currList.title = listTitle\r\n            const newListTitle = currList\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: newListTitle,\r\n            }\r\n            dispatch(_changeListName(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _deleteList(data) {\r\n    return {\r\n        type: 'DELETE_LIST',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _createCard(data) {\r\n    return {\r\n        type: 'CREATE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyList(data) {\r\n    return {\r\n        type: 'COPY_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _moveList(data) {\r\n    return {\r\n        type: 'MOVE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeListName(data) {\r\n    return {\r\n        type: 'CHANGE_LIST_NANE',\r\n        data\r\n    }\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createCard } from '../../store/actions/listActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function AddCard(props) {\r\n    const { currBoard, currList, toggleAddCard } = props\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const cardTitle = useRef(null);\r\n\r\n    const onCreateCard = data => {\r\n        if (!data.cardTitle) return\r\n        dispatch(createCard(currBoard, currList, data.cardTitle))\r\n        reset()\r\n        toggleAddCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        cardTitle.current.focus();\r\n\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-card \">\r\n            <form onSubmit={handleSubmit(onCreateCard)}>\r\n                <div className=\"flex column\">\r\n                    <input name=\"cardTitle\" type=\"text\"\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            cardTitle.current = e\r\n                        }} placeholder={'Enter card title'}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n\r\n                        <button className=\"add-btn\" >Add Card</button>\r\n                        <button onClick={toggleAddCard} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect ,useCallback} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteList, copyList } from '../../store/actions/listActions'\r\n\r\n\r\nexport function ListMenu({ toggleListMenu, currBoard, currList, toggleAddCard, toggleEditTitle, onToggleMoveList }) {\r\n\r\n    const dispatch = useDispatch()\r\n    const onDeleteList = () => {\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    const onCreateCard = () => {\r\n        toggleAddCard()\r\n\r\n    }\r\n\r\n    const onCopyList = () => {\r\n        dispatch(copyList(currBoard, currList))\r\n\r\n\r\n    }\r\n\r\n    const onEditTitle = () => {\r\n        toggleEditTitle()\r\n\r\n    }\r\n\r\n\r\n\r\n    const clicked = useCallback(\r\n        () => {\r\n            toggleListMenu()\r\n        },\r\n        [toggleListMenu],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', clicked)\r\n        return () => {\r\n            window.removeEventListener('click', clicked)\r\n        }\r\n    }, [clicked])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"list-menu\">\r\n            <div className=\"menu-main-content\">\r\n                <div className=\"title margin-center\">\r\n                    <p onClick={toggleListMenu} className=\"close-btn\" >X</p>\r\n                    <p>List Actions</p>\r\n                </div>\r\n                <div className=\"menu-options \">\r\n                    <div className=\"option flex align-center\">\r\n                        <p onClick={onCreateCard}>Add Card...</p>\r\n                    </div>\r\n                    <div onClick={onCopyList} className=\"option flex align-center\">\r\n                        <p>Copy List...</p>\r\n                    </div>\r\n                    <div onClick={onToggleMoveList} className=\"option flex align-center\">\r\n                        <p>Move List...</p>\r\n                    </div>\r\n                    <div onClick={onEditTitle} className=\"option flex align-center\">\r\n                        <p>Edit Title...</p>\r\n                    </div>\r\n                    <div onClick={onDeleteList} className=\"option delete flex align-center\">\r\n                        <p>Delete List...</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeListName } from '../../store/actions/listActions'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function ChangeListTitle({ toggleEditTitle, currBoard, currList }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit} = useForm();\r\n    const title = useRef(null);\r\n    const onSaveNewTitle = (data) => {\r\n        dispatch(changeListName(currBoard, currList, data.newTitle))\r\n        toggleEditTitle()\r\n    }\r\n\r\n    useEffect(() => {\r\n        title.current.focus();\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"change-list-title\">\r\n            <form onSubmit={handleSubmit(onSaveNewTitle)}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    ref={(e) => {\r\n                        register(e)\r\n                        title.current = e\r\n                    }}\r\n                    name=\"newTitle\"\r\n                    style={{ width: '100%' }}\r\n                    type=\"text\" />\r\n                <div className=\"flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}} type=\"submit\">Save</button>\r\n                    <button onClick={toggleEditTitle}>X</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { moveList, deleteList } from '../../../store/actions/listActions'\r\n\r\n\r\nexport function MoveList({ onToggleMoveList, currBoard, currList }) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const boards = Object.values(state.boards)\r\n    const { activeBoard } = state\r\n    const dispatch = useDispatch()\r\n\r\n    const [moveTo, setMoveTo] = useState('')\r\n\r\n\r\n    const onMoveList = ({ target }) => {\r\n        const moveToBoardId = target.value\r\n        setMoveTo(moveToBoardId)\r\n    }\r\n\r\n    const MoveList = () => {\r\n\r\n        if (activeBoard === moveTo || !moveTo) return\r\n\r\n        dispatch(moveList(currBoard, currList, moveTo))\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"move-list\">\r\n            <div className=\"main-board-move-list\">\r\n                <select onChange={onMoveList} id=\"\">\r\n                    <option value=\"\">To...</option>\r\n                    {boards && boards.map((board) =>\r\n                        <option value={board.id} name={board.id} key={board.id}>{board.name}</option>\r\n                    )\r\n                    }\r\n                </select>\r\n                <div className=\"flex space-between\">\r\n\r\n                    <button onClick={MoveList}>Move</button>\r\n                    <button onClick={onToggleMoveList}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { CardList } from '../CardList/CardList'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { AddCard } from '../AddCard/AddCard'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons'\r\nimport { ListMenu } from '../ListMenu/ListMenu';\r\nimport { ChangeListTitle } from '../ChangeListTitle/ChangeListTitle'\r\nimport { MoveList } from '../ListMenu/MoveList/MoveList'\r\n\r\n\r\nexport function List({ listId, lists, cards, currBoard, index, }) {\r\n    const [currList, setCurrList] = useState('')\r\n    const [isAddCardShown, setAddCard] = useState(false)\r\n    const [isListMenuShown, setListMenu] = useState(false)\r\n    const [isEditTitle, setIsEditTitle] = useState(false)\r\n    const [isMoveListVisible, setMoveList] = useState(false)\r\n\r\n    const plus = <FontAwesomeIcon icon={faPlus} />\r\n    const listMenu = <FontAwesomeIcon icon={faEllipsisH} />\r\n\r\n\r\n    const getCurrList = useCallback(\r\n        () => {\r\n            const getCurrList = lists[listId]\r\n            setCurrList(getCurrList)\r\n        },\r\n        [lists, listId,],\r\n    )\r\n\r\n    const onToggleAddCard = () => {\r\n        setAddCard(!isAddCardShown)\r\n    }\r\n    const onToggleListMenu = () => {\r\n        setListMenu(!isListMenuShown)\r\n    }\r\n    const toggleEditTitle = () => {\r\n        setIsEditTitle(!isEditTitle)\r\n    }\r\n\r\n    const onToggleMoveList = () => {\r\n        setMoveList(!isMoveListVisible)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrList()\r\n        return () => {\r\n\r\n        }\r\n    }, [getCurrList])\r\n\r\n\r\n\r\n    if (!currList) return 'loading...'\r\n    return (\r\n        <Draggable\r\n            draggableId={currList.id}\r\n            index={index}\r\n        >\r\n            {(provided) => (\r\n                <MainDragContainer\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <div className=\"list flex column align-center\" >\r\n                        {isMoveListVisible &&\r\n                            <MoveList currBoard={currBoard} currList={currList} onToggleMoveList={onToggleMoveList} />\r\n                        }\r\n                        <div className=\"title-container align-center flex\">\r\n                            <span className=\"drag-handle flex space-between \"\r\n                                {...provided.dragHandleProps}\r\n                            >\r\n                                {!isEditTitle && <div>\r\n\r\n                                    <p className=\"list-title\">{currList.title}</p>\r\n\r\n                                    <p className=\"cards-count\">Total Cards: {currList.cardIds.length}</p>\r\n                                </div>\r\n                                }\r\n                                {isEditTitle && <span className=\"edit-title\">\r\n                                    <ChangeListTitle\r\n                                        toggleEditTitle={toggleEditTitle}\r\n                                        currBoard={currBoard}\r\n                                        currList={currList}\r\n                                    />\r\n                                </span>\r\n                                }\r\n                                <div className=\"menu-btn\">\r\n                                    <span className=\"list-menu-section align-center flex\"\r\n                                        onClick={onToggleListMenu}>\r\n                                        {listMenu}\r\n                                    </span>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                        {isListMenuShown &&\r\n                            <ListMenu\r\n\r\n\r\n                                toggleListMenu={onToggleListMenu}\r\n                                currBoard={currBoard}\r\n                                currList={currList}\r\n                                toggleAddCard={onToggleAddCard}\r\n                                toggleEditTitle={toggleEditTitle}\r\n                                onToggleMoveList={onToggleMoveList}\r\n                            />\r\n                        }\r\n                        <div className=\"main-container margin-center\">\r\n                            <Droppable droppableId={listId} type=\"card\">\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <MainDropContainer\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                <CardList\r\n                                                    cardIds={currList.cardIds}\r\n                                                    cards={cards}\r\n                                                    provided={provided}\r\n                                                    currListID={currList.id}\r\n                                                />\r\n                                            </MainDropContainer>\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                        <section className=\"add-card-section flex align-center\">\r\n                            {!isAddCardShown && <div onClick={onToggleAddCard}\r\n                                className=\"add-card-text flex align-center\">\r\n                                <div className=\"plus-sign\">{plus}</div>\r\n                                {currList.cardIds.length === 0 ? <p>Add a card</p> : <p>Add anoter card</p>}\r\n                            </div>\r\n                            }\r\n                            {isAddCardShown && <div className=\"add-card-section\">\r\n                                <AddCard toggleAddCard={onToggleAddCard}\r\n                                    currList={currList}\r\n                                    currBoard={currBoard} />\r\n                            </div>\r\n                            }\r\n                            <div className=\"div\">\r\n\r\n                            </div>\r\n\r\n                        </section>\r\n\r\n\r\n                    </div>\r\n                </MainDragContainer>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\nconst MainDropContainer = styled.div`\r\n\r\nwidth:100%;\r\nmin-height:10px;\r\n\r\n`;\r\nconst MainDragContainer = styled.div`\r\n\r\n`;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    saveToStorage,\r\n    changeBoardBackground,\r\n} from '../../store/actions/boardActions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport nature from '../../assets/images/bgs/purple_nature.jpg'\r\nimport mountains from '../../assets/images/bgs/mountains.jpg'\r\nimport water from '../../assets/images/bgs/water.jpg'\r\nimport lake from '../../assets/images/bgs/lake.jpg'\r\nimport boraBora from '../../assets/images/bgs/boraBora.jpg'\r\nimport sky from '../../assets/images/bgs/sky.jpg'\r\n\r\n\r\n\r\n\r\n\r\nexport function BoardBackground({ state, currBoard, toggleBgBoard }) {\r\n    const dispatch = useDispatch()\r\n    const close = <FontAwesomeIcon icon={faTimes} />\r\n\r\n    const changeBackgroundImg = ({ target }) => {\r\n        const name = target.name\r\n        switch (name) {\r\n            case \"nature\":\r\n                dispatch(changeBoardBackground(currBoard, 'purple_nature'))\r\n                break;\r\n            case \"mountains\":\r\n                dispatch(changeBoardBackground(currBoard, 'mountains'))\r\n                break;\r\n            case \"water\":\r\n                dispatch(changeBoardBackground(currBoard, 'water',''))\r\n                break;\r\n            case \"lake\":\r\n                dispatch(changeBoardBackground(currBoard, 'lake',''))\r\n                break;\r\n            case \"boraBora\":\r\n                dispatch(changeBoardBackground(currBoard, 'boraBora',''))\r\n                break;\r\n            case \"sky\":\r\n                dispatch(changeBoardBackground(currBoard, 'sky',''))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"board-background \">\r\n            <div className=\"close-btn flex\">\r\n                <button onClick={toggleBgBoard}>{close}</button>\r\n            </div>\r\n            <div className=\"main-content flex align-center wrap\">\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={nature} alt=\"nature\" name=\"nature\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={mountains} alt=\"mountains\" name=\"mountains\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={water} alt=\"water\" name=\"water\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={lake} alt=\"lake\" name=\"lake\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={boraBora} alt=\"boraBora\" name=\"boraBora\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={sky} alt=\"sky\" name=\"sky\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {  useEffect } from 'react';\r\n\r\nexport function BlackScreen(props) {\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"black-screen\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function CardCover({currCard}) {\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor:`${currCard.cardCover}`}} className=\"card-cover\">\r\n            <div className=\"main-content-card-cover\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { copyCard } from '../../../store/actions/cardActions'\r\n\r\n\r\nexport function CopyCard({ currBoard, currCard, onToggleCopyCard }) {\r\n\r\n    const [listOptions, setListOptions] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onCopyCard = ({ target }) => {\r\n        const listName = target.value\r\n        const copyToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        dispatch(copyCard(currBoard, copyToList[0].id, currCard))\r\n        onToggleCopyCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onCopyCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { moveCard } from '../../../store/actions/cardActions'\r\n\r\nexport function MoveCard({ currBoard, currCard, currList, onToggleMoveCard, onToggleCardDetails }) {\r\n    const [listOptions, setListOptions] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onMoveCard = ({ target }) => {\r\n        const listName = target.value\r\n        const moveToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        console.log('moveToList:', moveToList)\r\n        const moveTocardIds = currBoard.lists[moveToList[0]?.id]?.cardIds\r\n        if (!moveTocardIds) return\r\n        if (moveTocardIds.includes(currCard.id)) return\r\n        if (moveToList[0].id === currList.id ) return\r\n        dispatch(moveCard(currBoard, moveToList[0].id, currCard, currList))\r\n        onToggleMoveCard()\r\n        onToggleCardDetails()\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard.lists])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onMoveCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function ColorPallette({ onSelectColor, onToggleColor }) {\r\n    const colors = [\r\n        { color: 'red', code: '#e04a4a' },\r\n        { color: 'lightGreen', code: '#4ae06d' },\r\n        { color: 'purpule', code: '#ab4ae0' },\r\n        { color: 'orange', code: '#f9af4d' },\r\n        { color: 'blue', code: '#3874ed' },\r\n        { color: 'yellow', code: '#ffff51' },\r\n        { color: 'noCover', code: '', text: 'None' }\r\n    ]\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"color-pallette\">\r\n            <div className=\"flex wrap space-between\">\r\n                {colors.map(color =>\r\n                    <div key={color.code} onClick={() => onSelectColor(color.code)} className=\"color\" style={{ backgroundColor: color.code }}>\r\n                        {color.text && <p>{color.text}</p>}\r\n                    </div>\r\n                )}\r\n                <button onClick={onToggleColor}>Close</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { setCardCover } from '../../../store/actions/cardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette'\r\nexport function CardCoverMenu({ onToggleColor, toggleCardVisibility, currCard, currBoard }) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onCloseCover = () => {\r\n        dispatch(setCardCover(currBoard, currCard, ''))\r\n        toggleCardVisibility()\r\n    }\r\n    const onSelectCover = (color) => {\r\n        if (color === 'noCover') return onCloseCover()\r\n        dispatch(setCardCover(currBoard, currCard, color))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-cover-menu\">\r\n            <div className=\"top-part flex space-between\">\r\n            </div>\r\n            <ColorPallette\r\n                onCloseColor={onCloseCover}\r\n                onSelectColor={onSelectCover}\r\n                currCard={currCard}\r\n                currBoard={currBoard}\r\n                onToggleColor={onToggleColor}\r\n                toggleCardVisibility={toggleCardVisibility} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function AddCheckList({ onToggleCheckList, onAddCheckList }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const checklistName = useRef(null)\r\n\r\n    useEffect(() => {\r\n        checklistName.current.focus();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"add-check-list\">\r\n            <form onSubmit={handleSubmit(onAddCheckList)}>\r\n                <input style={{ marginBlockEnd: '5px' }} autoComplete=\"off\" ref={(e) => {\r\n                    register(e)\r\n                    checklistName.current = e\r\n                }} name=\"checklistName\" type=\"text\" />\r\n                <div className=\"check-list-btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Add</button>\r\n                    <button onClick={onToggleCheckList}>Cancel</button>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette';\r\n\r\nexport function LabelsMenu({  onToggleColor ,onSetLabel}) {\r\n    return (\r\n        <div className=\"labels-menu\">\r\n            <ColorPallette onToggleColor={onToggleColor} onSelectColor={onSetLabel} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CopyCard } from '../CopyCard/CopyCard'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faTag, faTasks, faColumns, faClock, faPaperclip, faArrowRight, faCopy, faEye, faTrashAlt, faShareAlt, } from '@fortawesome/free-solid-svg-icons'\r\nimport { MoveCard } from '../MoveCard/MoveCard';\r\nimport { DeleteVerify } from '../DeleteVerify/DeleteVerify'\r\nimport { CardCoverMenu } from '../CardCoverMenu/CardCoverMenu'\r\nimport { createCheckList, setDueDate, deleteCard, setLabel, removeLabel } from '../../../store/actions/cardActions'\r\nimport { useDispatch } from 'react-redux';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport { AddCheckList } from './AddCheckList/AddCheckList';\r\nimport { LabelsMenu } from '../LabelsMenu/LabelsMenu';\r\n\r\n\r\nexport function RightSideMenu({ onToggleCardDetails, cardid, onToggleCover, isCoverOn,\r\n    listid,\r\n    currBoard,\r\n    currCard,\r\n    toggleCardVisibility,\r\n    onToggleCardWatch\r\n}) {\r\n    const currList = currBoard.lists[listid]\r\n    const [isCopyClicked, setCopyClick] = useState(false)\r\n    const [isMoveClicked, setMoveClick] = useState(false)\r\n    const [isDeleteClicked, setDeleteClick] = useState(false)\r\n    const [isAddCheckList, setAddChecklist] = useState(false)\r\n    const [isLabelMenuVis, setLabelMenuVis] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const [date, setDates] = useState(new Date())\r\n    const [isCalShown, toggleShowCal] = useState(false)\r\n\r\n    const avatar = <FontAwesomeIcon icon={faUser} />\r\n    const label = <FontAwesomeIcon icon={faTag} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const paperClip = <FontAwesomeIcon icon={faPaperclip} />\r\n    const arrow = <FontAwesomeIcon icon={faArrowRight} />\r\n    const copy = <FontAwesomeIcon icon={faCopy} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const share = <FontAwesomeIcon icon={faShareAlt} />\r\n    const cover = <FontAwesomeIcon icon={faColumns} />\r\n\r\n\r\n    const onToggleLabelMenu = () => {\r\n        setLabelMenuVis(!isLabelMenuVis)\r\n    }\r\n\r\n    const onSetLabel = (colorCode) => {\r\n        const index = currCard.labels.findIndex((label) => { return label === colorCode })\r\n        if (index >= 0) {\r\n            dispatch(removeLabel(currBoard, currCard, index))\r\n            return\r\n        }\r\n        dispatch(setLabel(currBoard, currCard, colorCode))\r\n    }\r\n\r\n    const onToggleDeleteCard = () => {\r\n        setDeleteClick(!isDeleteClicked)\r\n    }\r\n\r\n    const onDeleteCard = () => {\r\n        dispatch(deleteCard(currBoard, currList, cardid))\r\n        onToggleCardDetails()\r\n    }\r\n\r\n    const onToggleCopyCard = () => {\r\n        setCopyClick(!isCopyClicked)\r\n    }\r\n    const onToggleMoveCard = () => {\r\n        setMoveClick(!isMoveClicked)\r\n    }\r\n\r\n    const onToggleCheckList = () => {\r\n        setAddChecklist(!isAddCheckList)\r\n    }\r\n\r\n    const onAddCheckList = ({ checklistName }) => {\r\n        if (!checklistName) return\r\n        dispatch(createCheckList(currBoard, currCard, checklistName))\r\n        onToggleCheckList()\r\n    }\r\n    const onGetDates = date => {\r\n        const newDate = date.toString().substring(0, 15)\r\n        setDates(date)\r\n        dispatch(setDueDate(currBoard, currCard, newDate))\r\n        toggleShowCal(false)\r\n    }\r\n\r\n    const onToggleShowCal = () => {\r\n        toggleShowCal(!isCalShown)\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"right-side-menu flex column\">\r\n            <p>SUGGESTED</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                Join</button>\r\n            <p>ADD TO CARD</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                    Members\r\n            </button>\r\n            <button onClick={onToggleLabelMenu} className=\"btn-right-side\">\r\n                <span>{label}</span>\r\n                Labels\r\n                </button>\r\n            { isLabelMenuVis && <LabelsMenu onSetLabel={onSetLabel} onToggleColor={onToggleLabelMenu} currBoard={currBoard} currCard={currCard} />}\r\n            <button onClick={onToggleCheckList} className=\"btn-right-side\">\r\n                <span>{checklist}</span>\r\n                Checklist\r\n                </button>\r\n            {isAddCheckList &&\r\n                <AddCheckList\r\n                    onToggleCheckList={onToggleCheckList}\r\n                    onAddCheckList={onAddCheckList} />\r\n            }\r\n            <button onClick={onToggleShowCal} className=\"btn-right-side\">\r\n                <span>{clock}</span>\r\n                Due Date\r\n                </button>\r\n            {isCalShown && <div className=\"cal\">\r\n                <Calendar className=\"calendar\"\r\n                    onChange={onGetDates}\r\n                    value={date}\r\n                />\r\n            </div>\r\n            }\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {paperClip}\r\n                </span>\r\n                Attachment\r\n                </button>\r\n            <button className=\"btn-right-side\" onClick={onToggleCover}>\r\n                <span>\r\n                    {cover}\r\n                </span>\r\n                Cover\r\n                </button>\r\n            {isCoverOn &&\r\n                <CardCoverMenu\r\n                    currCard={currCard}\r\n                    toggleCardVisibility={toggleCardVisibility}\r\n                    currBoard={currBoard}\r\n                    onToggleColor={onToggleCover}\r\n                />\r\n            }\r\n\r\n            <p>ACTIONS</p>\r\n\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleMoveCard}>\r\n                        <span>\r\n                            {arrow}\r\n                        </span>\r\n                    Move\r\n                    </button>\r\n                </div>\r\n                {isMoveClicked && <MoveCard cardid={cardid}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    currList={currList}\r\n                    onToggleMoveCard={onToggleMoveCard}\r\n                    onToggleCardDetails={onToggleCardDetails}\r\n                />\r\n                }\r\n            </div>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleCopyCard}>\r\n                        <span>\r\n                            {copy}\r\n                        </span>\r\n                    Copy\r\n                    </button>\r\n                </div>\r\n                {isCopyClicked && <CopyCard cardid={cardid}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    onToggleCopyCard={onToggleCopyCard}\r\n                />\r\n                }\r\n            </div>\r\n            <button onClick={onToggleCardWatch} className=\"btn-right-side flex space-between align-center\">\r\n                <div className=\"flex\">\r\n                    <span>\r\n                        {eye}\r\n                    </span>\r\n                    Watch\r\n                </div>\r\n                {currCard.isWatched &&\r\n                    <span className=\"watched flex align-center justify-center\">V</span>\r\n                }\r\n            </button>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n\r\n                    <button className=\"btn-right-side\" onClick={onToggleDeleteCard}>\r\n                        <span>\r\n                            {trash}\r\n                        </span>\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n                {isDeleteClicked &&\r\n                    <DeleteVerify onDelete={onDeleteCard}\r\n                        onToggle={onToggleDeleteCard}\r\n                        itemToDelete={'card'}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {share}\r\n                </span>\r\n                Share\r\n                </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function ProgressBar({ bgcolor, completed }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const fillerStyles = {\r\n        width: `${completed}%`,\r\n        backgroundColor: bgcolor,\r\n        borderRadius: 'inherit',\r\n        textAlign: 'right'\r\n    }\r\n\r\n    const labelStyles = {\r\n        fontWeight: 'bold'\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"progress-bar flex align-center\">\r\n            <span style={labelStyles}>{` ${completed}%  `}</span>\r\n            <div></div>\r\n            <div className=\"wrapper\" style={fillerStyles}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function ItemPreview({ onCheckItem, item, onRemoveCheckListItem, trash }) {\r\n    \r\n    useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"item-preview\">\r\n            <div\r\n                key={item.id} className=\"main-content-checkbox flex space-between align-center\">\r\n                <div className=\"checkbox-container flex\">\r\n                    <input onChange={() => onCheckItem(item)} checked={item.isChecked} type=\"checkbox\" value={item.text} /> <p>\r\n                        {item.text}\r\n                    </p>\r\n                </div>\r\n                <button onClick={() => onRemoveCheckListItem(item)}><span>{trash}</span></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeCheckList, addCheckListItem, removeCheckListItem, checkItem } from '../../../store/actions/cardActions'\r\nimport { ProgressBar } from '../../ProgressBar/ProgressBar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTasks, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useCallback } from 'react';\r\nimport { ItemPreview } from './ItemPreview/ItemPreview'\r\n\r\nexport function CardCheckList({ currCheckList, currCard, currBoard }) {\r\n    const checklistName = currCheckList.name\r\n    const [isAddItemVisible, setItemVisible] = useState(false)\r\n    const [checkedItems, setCheckItems] = useState([])\r\n    const [currCheckItem, setCurrCheckItem] = useState()\r\n    const [completed, setCompleted] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n\r\n    const onAddCheckItem = ({ listItem }) => {\r\n        if (!listItem) return\r\n        dispatch(addCheckListItem(currBoard, currCard, currCheckList, listItem))\r\n        onToggleItemVisibility()\r\n    }\r\n\r\n\r\n    const onRemoveCheckList = () => { dispatch(removeCheckList(currBoard, currCard, currCheckList)) }\r\n    const onRemoveCheckListItem = useCallback(\r\n        (item) => {\r\n            const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n            dispatch(removeCheckListItem(currBoard, currCard, currCheckList, item))\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n        },\r\n        [currBoard, currCard, currCheckList, dispatch,checkedItems]\r\n    )\r\n\r\n    const onToggleItemVisibility = () => {\r\n        setItemVisible(!isAddItemVisible)\r\n    }\r\n\r\n\r\n    const onCheckItem = (item) => {\r\n        const currItem = currCheckList.list[item.id]\r\n        setCurrCheckItem(currItem)\r\n        const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n        if (item.isChecked) {\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n            dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n            calculatePercentage()\r\n            return\r\n        }\r\n\r\n        setCheckItems([...checkedItems, { ...item }])\r\n        dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n        calculatePercentage()\r\n    }\r\n\r\n\r\n    const calculatePercentage = useCallback(\r\n        () => {\r\n            var number = Object.values(currCheckList.list).length;\r\n            var currChecked = checkedItems.length;\r\n            var percent = (currChecked * 100) / number;\r\n            isNaN(percent) ? setCompleted(0) : setCompleted(percent.toFixed())\r\n        },\r\n        [currCheckList.list, checkedItems.length],\r\n    )\r\n\r\n    useEffect(() => {\r\n        calculatePercentage()\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [calculatePercentage, currCheckItem, currCheckList])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-check-list\">\r\n            <div className=\"card-check-list-section flex space-between\">\r\n                <div className=\"title-container flex align-center\">\r\n\r\n                    <div className=\"icon\">\r\n                        {checklist}\r\n                    </div>\r\n                    <div className=\"check-list-title\">\r\n                        <h3>{checklistName}</h3>\r\n                    </div>\r\n                </div>\r\n                <p className=\"delete-checklist\" onClick={onRemoveCheckList}>Delete</p>\r\n            </div>\r\n            <ProgressBar bgcolor=\"#c9c9ca\" completed={completed} />\r\n            <div className=\"list\">\r\n                {Object.values(currCheckList.list).map(item =>\r\n                    <ItemPreview key={item.id} onCheckItem={onCheckItem} onRemoveCheckListItem={onRemoveCheckListItem} trash={trash} item={item} />\r\n                )}\r\n            </div>\r\n            {!isAddItemVisible &&\r\n                <div className=\"add-item-btn\">\r\n                    <button onClick={onToggleItemVisibility}>Add an item</button>\r\n                </div>\r\n            }\r\n            <div className=\"check-list-action\">\r\n                {\r\n                    isAddItemVisible &&\r\n                    <ActionForm toggleAdd={onToggleItemVisibility} onSubmitFunc={onAddCheckItem} name={'listItem'} placeholder={'Item title'} />\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { setCardDesc } from '../../../../store/actions/cardActions'\r\n\r\n\r\n\r\n\r\nexport function AddDescription({ currCard, currBoard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    const dispatch = useDispatch()\r\n    // const [isDescClicked, setDescClicked] = useState(false)\r\n    const { register, handleSubmit } = useForm();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    const onAddDesc = ({ desc }) => {\r\n        dispatch(setCardDesc(currBoard, currCard, desc))\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-description\">\r\n            <form onSubmit={handleSubmit(onAddDesc)}>\r\n                <textarea defaultValue={currCard.desc} name=\"desc\" ref={register} cols=\"30\" rows=\"10\"></textarea>\r\n                <div className=\"btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Save</button>\r\n                    <button onClick={onCancel}>X</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\nimport { AddDescription } from '.././Description/AddDescription/AddDescription'\r\n\r\nexport function Description({isDescVisible, clipBoard, currBoard, currCard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"description flex\">\r\n            <div className=\"icon\">\r\n                {clipBoard}\r\n            </div>\r\n            <div className=\"description-title\">\r\n                <h3>Description</h3>\r\n                {!isDescVisible &&\r\n                    <div onClick={onToggleCardDesc} className=\"card-description-box\">\r\n                        <p>{currCard.desc}</p>\r\n                    </div>\r\n                }\r\n                {isDescVisible &&\r\n                    <AddDescription onToggleCardDesc={onToggleCardDesc}\r\n                        currBoard={currBoard} currCard={currCard} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleCardDetails, toggleCardWatch, setDueDate, changeCardTitle } from '../../store/actions/cardActions'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { CardCover } from './CardCover/CardCover'\r\nimport { RightSideMenu } from './RightSideMenu/RightSideMenu'\r\nimport { CardCheckList } from './CardCheckList/CardCheckList'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTicketAlt, faClipboardList, faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport { Description } from './Description/Description';\r\nimport { CardLabel } from './CardLabel/CardLabel';\r\n\r\nexport function CardDetails() {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { activeBoard } = state\r\n    const { cardid, listid } = useParams();\r\n    const currBoard = state.boards[activeBoard]\r\n    const currCard = currBoard.cards[cardid]\r\n    const [isCoverOn, setCoverOn] = useState(false)\r\n    const [istCoverVisibile, setCoverVisibility] = useState(false)\r\n    const [isDescVisible, setDescVisibility] = useState(false)\r\n    const [newCardTitle, setCardTitle] = useState({ title: '' })\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [isCardTitleChange, onSetCardTitle] = useState(false)\r\n    const currCheckList = Object.values(currCard?.checklist)\r\n\r\n    const ticket = <FontAwesomeIcon icon={faTicketAlt} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n\r\n\r\n    const onToggleCardDetails = () => {\r\n        dispatch(toggleCardDetails(false))\r\n        history.push(`/boards/${activeBoard}`)\r\n    }\r\n\r\n\r\n    const onToggleCover = () => {\r\n        setCoverOn(!isCoverOn)\r\n    }\r\n\r\n    const toggleCardVisibility = () => {\r\n        setCoverVisibility(!istCoverVisibile)\r\n    }\r\n\r\n    const onToggleCardDesc = () => {\r\n        setDescVisibility(!isDescVisible)\r\n    }\r\n\r\n\r\n    const onToggleCardWatch = () => {\r\n        const isWatched = currCard.isWatched\r\n        dispatch(toggleCardWatch(currBoard, currCard, !isWatched))\r\n    }\r\n\r\n    const onRemoveDate = () => {\r\n        dispatch(setDueDate(currBoard, currCard, ''))\r\n    }\r\n\r\n\r\n\r\n\r\n    const onHandleChange = ({ target }) => {\r\n        const key = target.name\r\n        const value = target.value\r\n        newCardTitle[key] = value\r\n        setCardTitle((prevTitle) => ({\r\n            ...prevTitle,\r\n            title: value\r\n        }))\r\n    };\r\n\r\n    const onChangeTitle = (ev) => {\r\n        const cardTitle = newCardTitle.title\r\n        ev.preventDefault()\r\n        dispatch(changeCardTitle(currCard, cardTitle, currBoard))\r\n        onSetCardTitle(false)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [state, currCard.isWatched])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-details\" >\r\n            <span onClick={onToggleCardDetails} >\r\n                <BlackScreen />\r\n            </span>\r\n            <div className=\"card-details-board \">\r\n                {currCard.cardCover &&\r\n                    <CardCover currCard={currCard} onToggleCover={onToggleCover} />\r\n                }\r\n                <div className=\"main flex space-between\">\r\n                    <div className=\"left-side\">\r\n                        <div className=\"title-section \">\r\n                            <div style={{ height: 'fit-content' }} className=\"align-center flex\">\r\n                                <div className=\"icon\">\r\n                                    {ticket}\r\n                                </div>\r\n                                <div onClick={() => onSetCardTitle(true)} className=\"title\">\r\n                                    {!isCardTitleChange &&\r\n                                        <h3>{currCard.title} </h3>\r\n                                    }\r\n                                </div>\r\n                                {isCardTitleChange &&\r\n                                    <form onSubmit={onChangeTitle}>\r\n                                        <input onChange={onHandleChange} name=\"title\" placeholder={currCard.title} type=\"text\" />\r\n                                    </form>\r\n                                }\r\n                                {currCard.isWatched &&\r\n                                    <div className=\"watched-section\">\r\n                                        {eye}\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            {currCard.dueDate &&\r\n                                <div className=\"due-date-section margin-bottom flex space-between\">\r\n                                    <p>{currCard.dueDate}</p>\r\n                                    <p className=\"remove-date\" onClick={onRemoveDate}>Remove Date</p>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <section className=\"labels\">\r\n                            {currCard.labels.length > 0 &&\r\n                                <div>\r\n                                    <p>Labels</p>\r\n                                    <div className=\"flex\">\r\n                                        {currCard.labels.map(label => {\r\n                                            return <CardLabel key={label} label={label} />\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                        </section>\r\n                        <section className=\"description-section\">\r\n                            <Description clipBoard={clipBoard} isDescVisible={isDescVisible} currBoard={currBoard} currCard={currCard}\r\n                                onToggleCardDesc={onToggleCardDesc} />\r\n                        </section>\r\n                        <section className=\"checkList-section\">\r\n                            {currCheckList.length > 0 &&\r\n                                currCheckList.map(checklist => <div key={checklist.id} >\r\n                                    <CardCheckList currCheckList={checklist} currBoard={currBoard} currCard={currCard} />\r\n                                </div>)\r\n                            }\r\n                        </section>\r\n                    </div>\r\n                    <div className=\"right-side\">\r\n                        <div className=\"close-btn margin-bottom flex\">\r\n                            <button onClick={onToggleCardDetails}>X</button>\r\n                        </div>\r\n                        <RightSideMenu\r\n                            cardid={cardid}\r\n                            listid={listid}\r\n                            currBoard={currBoard}\r\n                            currCard={currCard}\r\n                            toggleCardVisibility={toggleCardVisibility}\r\n                            istCoverVisibile={istCoverVisibile}\r\n                            onToggleCardDetails={onToggleCardDetails}\r\n                            onToggleCardWatch={onToggleCardWatch}\r\n                            onToggleCover={onToggleCover}\r\n                            isCoverOn={isCoverOn}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createList } from '../../store/actions/boardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\n\r\nexport function AddList({ currBoard, onToggleAddList, windowWidth }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit, reset } = useForm();\r\n    const listName = useRef(null);\r\n\r\n\r\n    const onCreateList = (data) => {\r\n        if (!data.listName) return\r\n        dispatch(createList(currBoard.id, data.listName))\r\n        reset()\r\n        onToggleAddList()\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        listName.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-list \">\r\n            <form onSubmit={handleSubmit(onCreateList)}>\r\n                <div className=\"flex column\">\r\n                    <input rows='1' name=\"listName\" type=\"text\"\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            listName.current = e\r\n                        }} placeholder={'Enter list title'}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n\r\n                        <button className=\"add-btn\" >Add List</button>\r\n                        <button onClick={onToggleAddList} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom'\r\nimport { List } from '../List/List'\r\nimport {\r\n    dragInsideList,\r\n    saveToStorage,\r\n    dragOutsideList,\r\n    dragList,\r\n    setActiveBoard,\r\n    toggleBgSide\r\n} from '../../store/actions/boardActions'\r\n\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { BoardBackground } from '../../cmps/BoardBackground/BoardBackground'\r\nimport { CardDetails } from '../CardDetails/CardDetails'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { AddList } from '../AddList/AddList'\r\n\r\n\r\nexport function Board(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { isCardDetailShown, isBgSideOpen } = state\r\n    const [isAddListVisible, setAddList] = useState(false)\r\n    const [currBoard, setCurrBoard] = useState()\r\n\r\n    const { id } = useParams();\r\n    const dispatch = useDispatch()\r\n    const boardRef = useRef(null)\r\n\r\n    const loadCurrBoard = useCallback(() => {\r\n        const currBoard = state.boards[id]\r\n        setCurrBoard(currBoard)\r\n        dispatch(setActiveBoard(currBoard))\r\n    },\r\n        [state.boards, id, dispatch,]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!currBoard) return\r\n    }, [currBoard])\r\n\r\n    const onDragEnd = useMemo(() => async (result) => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) { return }\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) return\r\n\r\n        const start = currBoard.lists[source.droppableId]\r\n        const finish = currBoard.lists[destination.droppableId]\r\n\r\n        if (start === finish && !type === 'list') {\r\n            await dispatch(dragInsideList(start, source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        if (type === 'list') {\r\n            await dispatch(dragList(source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        await dispatch(dragOutsideList(start, source, destination, draggableId, currBoard, finish))\r\n\r\n    }\r\n        , [currBoard, dispatch])\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onToggleAddList = () => {\r\n        setAddList(!isAddListVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        loadCurrBoard()\r\n        return () => {\r\n            dispatch(setActiveBoard(''))\r\n        }\r\n\r\n    }, [loadCurrBoard, dispatch])\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    if (!currBoard) return '...LOADING...'\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={onDragEnd}\r\n        >\r\n            <Droppable\r\n                droppableId=\"all-lists\"\r\n                direction=\"horizontal\"\r\n                type=\"list\"\r\n                className=\"droppable-board\"\r\n            >\r\n                {(provided) => {\r\n                    return (\r\n                        <div ref={boardRef} className=\"board margin-center align-center\">\r\n                            <img className=\"board-background\" src={require(`../../assets/images/bgs/${currBoard.backgroundImg}.jpg`)} alt=\"\"/>\r\n                            <MainDndArea\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                <div className=\"main-content flex \">\r\n                                    {currBoard.listOrder.map((listId, idx) => {\r\n                                        return <div key={listId} className=\"list-section\">\r\n                                            <List index={idx} cards={currBoard.cards} currBoard={currBoard} lists={currBoard.lists} listId={listId}></List>\r\n                                        </div>\r\n                                    })}\r\n                                    {!isAddListVisible &&\r\n                                        <button onClick={onToggleAddList} className=\"add-list-btn\">Add list</button>\r\n                                    }\r\n                                    {isAddListVisible &&\r\n                                        <AddList currBoard={currBoard} onToggleAddList={onToggleAddList} />\r\n                                    }\r\n                                </div>\r\n                                {isBgSideOpen &&\r\n                                    <span onClick={toggleBgBoard} >\r\n                                        <BlackScreen />\r\n                                    </span>\r\n                                }\r\n                                <div className=\"between\">\r\n                                    <div className={`board-bg ${isBgSideOpen ? 'visible' : ''} `}>\r\n                                        <BoardBackground toggleBgBoard={toggleBgBoard} currBoard={currBoard} state={state} />\r\n                                    </div>\r\n                                </div>\r\n                                {provided.placeholder}\r\n\r\n                            </MainDndArea>\r\n                            {isCardDetailShown &&\r\n                                <CardDetails currBoard={currBoard} />\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Droppable>\r\n        </DragDropContext >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst MainDndArea = styled.div`\r\n    width: 100 %;\r\n    `;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './style/style.scss'\r\nimport { HomePage } from './pages/HomePage/HomePage'\r\nimport { AppHeader } from './cmps/AppHeader/AppHeader'\r\nimport { Board } from './cmps/Board/Board';\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App \">\r\n      <AppHeader history={History}/>\r\n\r\n      <Switch>\r\n      <Route component={HomePage} exact path=\"/\" />\r\n        <Route component={Board} path=\"/boards/:id/:listid?/:cardid?\"/>\r\n      </Switch>\r\n      {/* <Footer/> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import UTILS from '../../service/utils'\r\n\r\nvar initialState = UTILS.loadFromStorage('mainStore')\r\n\r\nif (!initialState)\r\n\r\n\r\n    initialState = {\r\n        boards: {\r\n            'board-1': {\r\n                id: 'board-1',\r\n                name: 'Demo-Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-1': {\r\n                        id: 'card-1',\r\n                        title: 'card-title-1',\r\n                        desc: 'card-desc-1',\r\n                        checklist: {\r\n                            'check-1': {\r\n                                id: 'check-1',\r\n                                name: 'checklist-1',\r\n                                list: {\r\n                                    'firstOne': {\r\n                                        id: 'firstOne', text: 'firstOne', isChecked: false\r\n                                    },\r\n                                    'secondOne': {\r\n                                        id: 'secondOne', text: 'secondOne', isChecked: true\r\n                                    }\r\n                                }\r\n                            },\r\n                            'check-2': {\r\n                                id: 'check-2',\r\n                                name: 'checklist-2',\r\n                                list: {\r\n                                    'firstOne': { id: 'firstOne', text: 'firstOne' }, 'secondOne': { id: 'secondOne', text: 'secondOne' }\r\n                                }\r\n                            }\r\n                        },\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-2': {\r\n                        id: 'card-2',\r\n                        title: 'card-title-2',\r\n                        desc: 'card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-3': {\r\n                        id: 'card-3',\r\n                        title: 'card-title-3',\r\n                        desc: 'card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-4': {\r\n                        id: 'card-4',\r\n                        title: 'card-title-4',\r\n                        desc: 'card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-5': {\r\n                        id: 'card-5',\r\n                        title: 'card-title-5',\r\n                        desc: 'card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-6': {\r\n                        id: 'card-6',\r\n                        title: 'card-title-6',\r\n                        desc: 'card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-7': {\r\n                        id: 'card-7',\r\n                        title: 'card-title-7',\r\n                        desc: 'card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-8': {\r\n                        id: 'card-8',\r\n                        title: 'card-title-8',\r\n                        desc: 'card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-9': {\r\n                        id: 'card-9',\r\n                        title: 'card-title-9',\r\n                        desc: 'card-desc-9',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-10': {\r\n                        id: 'card-10',\r\n                        title: 'card-title-10',\r\n                        desc: 'card-desc-10',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-11': {\r\n                        id: 'card-11',\r\n                        title: 'card-title-11',\r\n                        desc: 'card-desc-11',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-12': {\r\n                        id: 'card-12',\r\n                        title: 'card-title-12',\r\n                        desc: 'card-desc-12',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-1': {\r\n                        id: 'list-1',\r\n                        title: 'todo',\r\n                        cardIds: ['card-1', 'card-2', 'card-3', 'card-4',]\r\n                    },\r\n                    'list-2': {\r\n                        id: 'list-2',\r\n                        title: 'in progress',\r\n                        cardIds: ['card-5', 'card-6', 'card-7', 'card-8',]\r\n                    },\r\n                    'list-3': {\r\n                        id: 'list-3',\r\n                        title: 'done',\r\n                        cardIds: ['card-9', 'card-10', 'card-11', 'card-12',]\r\n                    },\r\n                },\r\n                listOrder: ['list-1', 'list-2', 'list-3'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n            },\r\n            'board-2': {\r\n                id: 'board-2',\r\n                name: 'Eyal\\'s Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-16': {\r\n                        id: 'card-16',\r\n                        title: 'new card-title-1',\r\n                        desc: 'new card-desc-1',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-26': {\r\n                        id: 'card-26',\r\n                        title: 'new card-title-2',\r\n                        desc: 'new card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-36': {\r\n                        id: 'card-36',\r\n                        title: 'new card-title-3',\r\n                        desc: 'new card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-46': {\r\n                        id: 'card-46',\r\n                        title: 'new card-title-4',\r\n                        desc: 'new card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-57': {\r\n                        id: 'card-57',\r\n                        title: 'new card-title-5',\r\n                        desc: 'new card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-67': {\r\n                        id: 'card-67',\r\n                        title: 'new card-title-6',\r\n                        desc: 'new card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-77': {\r\n                        id: 'card-77',\r\n                        title: 'new card-title-7',\r\n                        desc: 'new card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-87': {\r\n                        id: 'card-87',\r\n                        title: 'new card-title-8',\r\n                        desc: 'new card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-13': {\r\n                        id: 'list-13',\r\n                        title: 'todo2',\r\n                        cardIds: ['card-16', 'card-26', 'card-36', 'card-46',]\r\n                    },\r\n                    'list-23': {\r\n                        id: 'list-23',\r\n                        title: 'in progress2',\r\n                        cardIds: ['card-57', 'card-67', 'card-77', 'card-87',]\r\n                    },\r\n                },\r\n                listOrder: ['list-13', 'list-23'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n\r\n            },\r\n        },\r\n        favBoards: {},\r\n        activeBoard: '',\r\n        isCardDetailShown: false,\r\n        isBgSideOpen: false\r\n    };\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_STATE':\r\n            return {\r\n                state: action.state\r\n            };\r\n        case 'UPDATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.updatedList.id]: action.data.updatedList\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.newStartList.id]: action.data.newStartList,\r\n                            [action.data.newFinishList.id]: action.data.newFinishList,\r\n\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS_ORDER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        listOrder: [...action.data.newListOrder]\r\n                    }\r\n                }\r\n            };\r\n        case 'CREATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.newBoard.id]: {\r\n                        ...action.data.newBoard,\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_BOARD':\r\n            const newBoards = state.boards\r\n            delete newBoards[action.data.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...newBoards,\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_NAME':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        name: action.data.boardName\r\n                    },\r\n                },\r\n            };\r\n        case 'CREATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard]: {\r\n                        ...state.boards[action.data.currBoard],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard].lists,\r\n                            [action.data.newList.id]: action.data.newList,\r\n                        },\r\n                        listOrder: [...state.boards[action.data.currBoard].listOrder, action.data.newList.id]\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...action.data.newLists\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n                },\r\n            };\r\n        case 'MOVE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.moveToBoardId]: {\r\n                        ...state.boards[action.data.moveToBoardId],\r\n                        cards: {\r\n                            ...state.boards[action.data.moveToBoardId].cards,\r\n                            ...action.data.currListCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.moveToBoardId].lists,\r\n                            [action.data.listToMove.id]: {\r\n                                ...action.data.listToMove\r\n                            }\r\n                        },\r\n                        listOrder: [...state.boards[action.data.moveToBoardId].listOrder, action.data.listToMove.id]\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'COPY_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            ...action.data.copiedCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copiedList.id]: {\r\n                                ...action.data.copiedList\r\n                            }\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'CHANGE_LIST_NANE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...action.data.currList\r\n                            }\r\n                        },\r\n\r\n                    },\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_BG':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        backgroundImg: action.data.bgName,\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_ACTIVE_BOARD':\r\n            return {\r\n                ...state,\r\n                activeBoard: action.activeBoard.id\r\n            };\r\n        case 'CREATE_CARD':\r\n            console.log('created')\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.newCard.id]: action.data.newCard,\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: [\r\n                                    ...state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds, action.data.newCard.id\r\n                                ]\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            };\r\n        case 'COPY_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.copiedCard.id]: action.data.copiedCard\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copyToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.copyToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.copyToListID].cardIds, action.data.copiedCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'SET_CARD_TITLE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]: { ...action.data.currCard, title: action.data.cardTitle },\r\n                        },\r\n\r\n                    }\r\n                }\r\n            };\r\n        case 'MOVE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds.filter(cardId => cardId !== action.data.currCard.id)\r\n                            },\r\n                            [action.data.moveToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.moveToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.moveToListID].cardIds, action.data.currCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'DELETE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...action.data.currBoard.lists,\r\n                            [action.data.currList.id]: action.data.currList\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'SET_DESC':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                desc: action.data.desc\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_LABEL':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: [...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].labels, action.data.labelColor]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LABELS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: action.data.newLabelList\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'TOGGLE_CARD_WATCH':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                isWatched: action.data.isWatched\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'TOGGLE_CHECK_ITEM':\r\n            const isItemChecked = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id].isChecked\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: {\r\n                                            ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list,\r\n                                            [action.data.currItem.id]: {\r\n                                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id],\r\n                                                isChecked: !isItemChecked\r\n                                            }\r\n                                        },\r\n                                    }\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n\r\n\r\n        case 'SET_DUE_DATE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                dueDate: action.data.dueDate\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CREATE_CHECKLIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist, [action.data.currChecklist.id]: action.data.currChecklist }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'ADD_CHECKLIST_ITEM':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list, [action.data.newItem.id]: action.data.newItem }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'REMOVE_CHECKLIST_ITEM':\r\n            const newChecklistToSave = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            [action.data.currCheckList.id]\r\n            delete newChecklistToSave.list[action.data.itemToRemove.id]\r\n\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: newChecklistToSave\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_CHECKLIST':\r\n            const newChecklist = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            delete newChecklist[action.data.checkListToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: newChecklist\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CARD_COVER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                                { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id], cardCover: action.data.color }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'UPDATE_CURR_LIST':\r\n            return {\r\n                ...state,\r\n                currListId: action.data\r\n            };\r\n        case 'TOGGLE_CARD_DETAILS':\r\n            return {\r\n                ...state,\r\n                isCardDetailShown: action.data\r\n            };\r\n        case 'TOGGLE_BG_SIDE':\r\n            return {\r\n                ...state,\r\n                isBgSideOpen: !state.isBgSideOpen\r\n            };\r\n        case 'TOGGLE_FAV_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.id]: {\r\n                        ...state.boards[action.data.id],\r\n                        isFav: !state.boards[action.data.id].isFav\r\n                    }\r\n                },\r\n                favBoards: {\r\n                    ...state.favBoards,\r\n                    [action.data.id]: action.data\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_SAVED_BOARD':\r\n            delete state.favBoards[action.boardToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.boardToRemove.id]: {\r\n                        ...state.boards[action.boardToRemove.id],\r\n                        isFav: !state.boards[action.boardToRemove.id].isFav\r\n                    }\r\n                },\r\n                favBoards: { ...state.favBoards }\r\n            }\r\n\r\n\r\n        case 'GET_STATE':\r\n            console.log('state:', state)\r\n            return {\r\n                ...state,\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport boardReducer from './boardReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  mainStore: boardReducer,\r\n})\r\n\r\nexport default rootReducer;","\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import history from './history';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router } from 'react-router-dom';\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}