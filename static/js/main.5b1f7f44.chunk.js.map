{"version":3,"sources":["assets/images/bgs sync /^/.*/.jpg$","assets/images/bgs/boraBora.jpg","assets/images/bgs/lake.jpg","assets/images/bgs/mountains.jpg","assets/images/bgs/purple_nature.jpg","assets/images/bgs/sky.jpg","assets/images/bgs/water.jpg","assets/images/bgs/pink.jpg","history.js","cmps/BoardList/BoardList.jsx","service/utils.js","service/boardService.js","store/actions/boardActions.js","cmps/ActionForm/ActionForm.jsx","pages/HomePage/HomePage.jsx","store/actions/headerActions.js","cmps/CardDetails/DeleteVerify/DeleteVerify.jsx","cmps/AppHeader/AppHeaderMenu/AppHeaderMenu.jsx","cmps/AppHeader/BoardsMenu/BoardsMenu.jsx","cmps/AppHeader/AppHeader.jsx","cmps/CardDetails/CardLabel/CardLabel.jsx","cmps/CardPreview/CardPreview.jsx","service/cardService.js","store/actions/cardActions.js","cmps/CardList/CardList.jsx","service/listService.js","store/actions/listActions.js","cmps/AddCard/AddCard.jsx","cmps/ListMenu/ListMenu.jsx","cmps/ChangeListTitle/ChangeListTitle.jsx","cmps/ListMenu/MoveList/MoveList.jsx","cmps/List/List.jsx","cmps/BoardBackground/BoardBackground.jsx","cmps/CardDetails/BlackScreen/BlackScreen.jsx","cmps/CardDetails/CardCover/CardCover.jsx","cmps/CardDetails/CopyCard/CopyCard.jsx","cmps/CardDetails/MoveCard/MoveCard.jsx","cmps/ColorPallette/ColorPallette.jsx","cmps/CardDetails/CardCoverMenu/CardCoverMenu.jsx","cmps/CardDetails/RightSideMenu/AddCheckList/AddCheckList.jsx","cmps/CardDetails/LabelsMenu/LabelsMenu.jsx","cmps/CardDetails/RightSideMenu/RightSideMenu.jsx","cmps/ProgressBar/ProgressBar.jsx","cmps/CardDetails/CardCheckList/ItemPreview/ItemPreview.jsx","cmps/CardDetails/CardCheckList/CardCheckList.jsx","cmps/CardDetails/Description/AddDescription/AddDescription.jsx","cmps/CardDetails/Description/Description.jsx","cmps/CardDetails/CardDetails.jsx","cmps/AddList/AddList.jsx","cmps/Board/Board.jsx","App.js","serviceWorker.js","store/reducers/boardReducer.js","store/reducers/index.js","store/store.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","history","createBrowserHistory","BoardList","props","mainStore","useSelector","state","boards","favBoards","useState","boardList","setBoardList","getAllBoards","useCallback","allBoards","board","currBoard","push","init","useEffect","className","key","to","alt","src","require","backgroundImg","name","generatePassword","length","charset","retVal","i","n","charAt","Math","floor","random","loadFromStorage","val","localStorage","getItem","JSON","parse","getRandomIntInclusive","min","max","ceil","saveToStorage","setItem","stringify","boardName","a","UTILS","isFav","cards","lists","listOrder","navBarTheme","createdAt","Date","toLocaleDateString","title","content","cardIds","store","start","source","destination","draggableId","newCardIds","Array","from","splice","index","updatedList","finish","startCardIds","newStartList","finishCardIds","newFinishList","newListOrder","createBoard","createCard","createList","dragOutsideList","updateList","dragList","dragInsideList","dispatch","service","data","console","log","_dragInsideList","res","_dragOutsideList","_dragList","newBoard","_createBoard","removeSavedBoard","type","boardToRemove","changeBoardBackground","bgName","_changeBoardBg","setActiveBoard","boardId","activeBoard","_createList","_changeBoardName","ActionForm","currRef","placeholder","onSubmitFunc","toggleAdd","useForm","register","handleSubmit","current","focus","onSubmit","style","resize","ref","autoComplete","onClick","HomePage","useParams","useDispatch","isAddBoardVis","setAddBoardVis","onToggleAddBoard","boardTitle","DeleteVerify","onDelete","onToggle","itemToDelete","AppHeaderMenu","onRemoveSavedBoard","onToggleAppHeaderMenu","useHistory","isChangeNameVis","setChangeName","isAddListVisible","setAddListVisibility","isDeleteVerify","setDeleteVerify","onToggleAddList","useRef","onToggleBoardName","onToggleDleteBoard","changeBoardName","boardToDelete","listName","listTitle","boardService","newList","BoardsMenu","boardid","check","icon","faCheck","width","AppHeader","setTheme","bottomNav","isBgBoardOpen","setIsBgBoardOpen","isHeaderMenuVisible","setHeaderMenu","showSavedTitle","setSaved","isBoardsMenuVis","setBoardsMenuVis","home","faHome","faBorderAll","plusSign","faPlus","info","faInfoCircle","notifications","faBell","star","faStar","onHideSave","savedBoard","favoriteBoard","setTimeout","CardLabel","label","backgroundColor","CardPreview","currCard","cardid","pencil","faPencilAlt","checklist","faTasks","clock","faClock","eye","faEye","clipBoard","faClipboardList","provided","snapshot","MainContainer","draggableProps","dragHandleProps","innerRef","isDragging","cardCover","labels","isWatched","dueDate","fontSize","substring","desc","styled","div","CopyCard","cardToCopy","this","description","deleteCard","currList","cardId","filter","cardsId","copyCard","newCard","createCheckList","checkListName","list","createCheckListItem","itemName","text","isChecked","removeLabel","labelIndex","toggleCardDetails","isCardDetailShown","checkItem","currCheckList","currItem","_toggleCheckItem","setCardCover","color","_setCardCover","setDueDate","_setDueDate","_changeCardTitle","_setCardDesc","_addChecklist","_removeCheckList","_addCheckListItem","_removeCheckListItem","_toggleCardWatch","_setLabel","_updateLabels","CardList","currListID","onToggleCardDetails","listId","idx","_deleteCards","cardID","newBoardCards","newLists","currListCardIds","forEach","listToCopy","copiedListTitle","matchingCards","newCards","cardIdsToCopy","_findMatchingCards","card","cardCopy","findIndex","element","end","copiedList","copiedCards","cardsToCopy","allCards","deleteList","cardTitle","copyList","getListCards","currCards","listService","updatedData","_deleteList","_createCard","_copyList","_moveList","_changeListName","AddCard","toggleAddCard","reset","ListMenu","toggleListMenu","toggleEditTitle","onToggleMoveList","clicked","window","addEventListener","removeEventListener","newListCopy","ChangeListTitle","changeListName","newTitle","MoveList","values","moveToBoard","setMoveTo","onChange","moveToBoardId","target","value","listToMove","currListCards","moveList","List","setCurrList","isAddCardShown","setAddCard","isListMenuShown","setListMenu","isEditTitle","setIsEditTitle","isMoveListVisible","setMoveList","plus","listMenu","faEllipsisH","getCurrList","onToggleAddCard","onToggleListMenu","MainDragContainer","droppableId","MainDropContainer","droppableProps","BoardBackground","toggleBgBoard","close","faTimes","changeBackgroundImg","nature","mountains","water","lake","boraBora","sky","BlackScreen","CardCover","onToggleCopyCard","listOptions","setListOptions","onCopyCard","copyToList","cardService","copiedCard","copyToListID","MoveCard","onToggleMoveCard","onMoveCard","moveToList","moveTocardIds","includes","moveToListID","moveCard","ColorPallette","onSelectColor","onToggleColor","CardCoverMenu","toggleCardVisibility","onCloseCover","onCloseColor","AddCheckList","onToggleCheckList","onAddCheckList","checklistName","marginBlockEnd","LabelsMenu","onSetLabel","RightSideMenu","onToggleCover","isCoverOn","listid","onToggleCardWatch","isCopyClicked","setCopyClick","isMoveClicked","setMoveClick","isDeleteClicked","setDeleteClick","isAddCheckList","setAddChecklist","isLabelMenuVis","setLabelMenuVis","date","setDates","isCalShown","toggleShowCal","avatar","faUser","faTag","paperClip","faPaperclip","arrow","faArrowRight","copy","faCopy","trash","faTrashAlt","share","faShareAlt","cover","faColumns","onToggleLabelMenu","onToggleDeleteCard","colorCode","newLabelList","labelColor","setLabel","newChecklist","currChecklist","newDate","toString","ProgressBar","bgcolor","completed","fillerStyles","borderRadius","textAlign","fontWeight","ItemPreview","onCheckItem","item","onRemoveCheckListItem","checked","CardCheckList","isAddItemVisible","setItemVisible","checkedItems","setCheckItems","currCheckItem","setCurrCheckItem","setCompleted","checkedItem","itemToRemove","removeCheckListItem","newCheckedItems","onToggleItemVisibility","calculatePercentage","number","percent","isNaN","toFixed","checkListToRemove","removeCheckList","listItem","newItem","addCheckListItem","AddDescription","onToggleCardDesc","setCardDesc","defaultValue","cols","rows","Description","isDescVisible","CardDetails","setCoverOn","istCoverVisibile","setCoverVisibility","setDescVisibility","newCardTitle","setCardTitle","isCardTitleChange","onSetCardTitle","isMouseOver","setMouseOver","ticket","faTicketAlt","height","onMouseEnter","onMouseLeave","ev","preventDefault","changeCardTitle","prevTitle","toggleCardWatch","AddList","Board","isBgSideOpen","setAddList","setCurrBoard","boardRef","loadCurrBoard","onDragEnd","useMemo","result","direction","MainDndArea","App","component","exact","path","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","newBoards","isItemChecked","newChecklistToSave","currListId","newFavBoards","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kGAAA,IAAIA,EAAM,CACT,iBAAkB,GAClB,aAAc,GACd,kBAAmB,GACnB,aAAc,GACd,sBAAuB,GACvB,YAAa,GACb,cAAe,IAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,mBC5BpBU,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,mDCG5BC,EAFCC,c,uECIT,SAASC,EAAUC,GACtB,IAAMC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aACrCG,EAAsBH,EAAtBG,OAAQC,EAAcJ,EAAdI,UAFa,EAGKC,mBAAS,IAHd,mBAGtBC,EAHsB,KAGXC,EAHW,KAOvBC,EAAeC,uBACjB,WACI,IAAMC,EAAY,GAClB,IAAK,IAAMC,KAASR,EAAQ,CACxB,IAAMS,EAAYT,EAAOQ,GACzBD,EAAUG,KAAKD,GAEnB,OAAOF,IAEX,CAACP,IAICW,EAAOL,uBACT,WACIF,EAAaC,OAEjB,CAACA,IAUL,OANAO,qBAAU,WACND,MACD,CAACA,IAICR,EAED,yBAAKU,UAAU,eACX,0CACA,yBAAKA,UAAU,iDACVV,EAAUzB,KAAI,SAAA8B,GACX,OAAO,yBAAKK,UAAU,+BAA+BC,IAAKN,EAAM3B,IAC5D,yBAAKgC,UAAU,eACX,kBAAC,IAAD,CAAME,GAAE,iBAAYP,EAAM3B,KAAM,yBAC5BmC,IAAI,QACJC,IAAKC,MAAQ,YAA2BV,EAAMW,cAAlC,WACZ,2BAAIX,EAAMY,aAM9B,yBAAKP,UAAU,eACX,+CACA,yBAAKA,UAAU,kCACVZ,GAAaA,EAAUvB,KAAI,SAAA8B,GACxB,IAAMC,EAAYT,EAAOQ,GACzB,OAAO,yBAAKK,UAAU,2BAA2BC,IAAKN,GAClD,yBAAKK,UAAU,gBACX,kBAAC,IAAD,CAAME,GAAE,iBAAYP,IAChB,yBACIQ,IAAI,SACJC,IAAKC,MAAQ,YAA2BT,EAAUU,cAAtC,WAChB,2BAAIV,EAAUW,eA5BvB,a,kCCdZ,OACXC,iBAlBJ,SAA0BC,GAGtB,IAFA,IAAIC,EAAU,iEACVC,EAAS,GACJC,EAAI,EAAGC,EAAIH,EAAQD,OAAQG,EAAIH,IAAUG,EAC9CD,GAAUD,EAAQI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,IAExD,OAAOF,GAaPO,gBANJ,SAAyBjB,GACrB,IAAIkB,EAAMC,aAAaC,QAAQpB,GAC/B,OAAOqB,KAAKC,MAAMJ,IAKlBK,sBA3BJ,SAA+BC,EAAKC,GAIhC,OAHAD,EAAMV,KAAKY,KAAKF,GAChBC,EAAMX,KAAKC,MAAMU,GACHX,KAAKC,MAAMD,KAAKE,UAAYS,EAAMD,EAAM,IAAMA,GAyB5DG,cAZJ,SAAuB3B,EAAKkB,GACxBC,aAAaS,QAAQ5B,EAAKqB,KAAKQ,UAAUX,M,4CCd7C,WAA2BY,GAA3B,SAAAC,EAAA,+EACS,CACLhE,GAAIiE,EAAMzB,iBAAiB,GAC3BD,KAAMwB,EACNG,OAAO,EACPC,MAAO,GAGPC,MAAO,GAGPC,UAAW,GACX/B,cAAe,MACfgC,YAAa,SACbC,WAAW,IAAIC,MAAOC,uBAd1B,4C,kEAmBA,WAA0BC,GAA1B,SAAAV,EAAA,+EACS,CACLhE,GAAIiE,EAAMzB,iBAAiB,GAC3BkC,MAAOA,EACPC,QAAS,GACTJ,WAAW,IAAIC,MAAOC,uBAL1B,4C,kEAQA,WAA0BC,GAA1B,SAAAV,EAAA,+EACS,CACLhE,GAAIiE,EAAMzB,iBAAiB,GAC3BkC,MAAOA,EACPE,QAAS,GACTL,WAAW,IAAIC,MAAOC,uBAL1B,4C,kEAUA,WAA6BI,GAA7B,SAAAb,EAAA,sDACEC,EAAML,cAxCI,YAwCeiB,GAD3B,4C,kEAIA,WAA0BC,EAAOC,EAAQC,EAAaC,GAAtD,iBAAAjB,EAAA,6DACQkB,EAAaC,MAAMC,KAAKN,EAAMF,UACzBS,OAAON,EAAOO,MAAO,GAChCJ,EAAWG,OAAOL,EAAYM,MAAO,EAAGL,GAClCM,EAJR,2BAKOT,GALP,IAMIF,QAASM,IANb,kBAQSK,GART,4C,kEAWA,WAA+BT,EAAOC,EAAQC,EAAaC,EAAaO,GAAxE,qBAAAxB,EAAA,6DACQyB,EAAeX,EAAMF,SACdS,OAAON,EAAOO,MAAO,GAE5BI,EAJR,2BAKOZ,GALP,IAMIF,QAASa,KAGLE,EAAgBH,EAAOZ,SACfS,OAAOL,EAAYM,MAAO,EAAGL,GACrCW,EAXR,2BAYOJ,GAZP,IAaIZ,QAASe,IAbb,kBAeS,CACLD,aAAcA,EACdE,cAAeA,IAjBnB,4C,kEAoBA,WAAwBb,EAAQC,EAAaC,EAAarD,GAA1D,eAAAoC,EAAA,6DAEQ6B,EAAejE,EAAUyC,WAClBgB,OAAON,EAAOO,MAAO,GAClCO,EAAaR,OAAOL,EAAYM,MAAO,EAAGL,GAJ5C,kBAKSY,GALT,4C,sBAae,OACbjC,c,4CACAkC,Y,4CACAC,W,4CACAC,W,4CACAC,gB,oDACAC,W,kDACAC,S,mDC7FK,SAASC,EAAetB,EAAOC,EAAQC,EAAaC,EAAarD,GACpE,8CAAO,WAAMyE,GAAN,iBAAArC,EAAA,+EAE2BsC,EAAQJ,WAAWpB,EAAOC,EAAQC,EAAaC,GAF1E,OAEOM,EAFP,OAGOgB,EAAO,CACThB,YAAaA,EACb3D,UAAWA,GAEf4E,QAAQC,IAAI,YAAa7E,GACzByE,EAASK,EAAgBH,IAR1B,oHAAP,sDAgBG,SAASN,EAAgBnB,EAAOC,EAAQC,EAAaC,EAAarD,EAAW4D,GAChF,8CAAO,WAAMa,GAAN,iBAAArC,EAAA,+EAEmBsC,EAAQL,gBAAgBnB,EAAOC,EAAQC,EAAaC,EAAaO,GAFpF,OAEOmB,EAFP,OAGOJ,EAAO,CACTb,aAAciB,EAAIjB,aAClBE,cAAee,EAAIf,cACnBhE,UAAWA,GAEfyE,EAASO,EAAiBL,IAR3B,sDAYCC,QAAQC,IAAI,sBAZb,8DAAP,sDAiBG,SAASN,EAASpB,EAAQC,EAAaC,EAAarD,GACvD,8CAAO,WAAMyE,GAAN,eAAArC,EAAA,+EAE4BsC,EAAQH,SAASpB,EAAQC,EAAaC,EAAarD,GAF/E,OAEOiE,EAFP,OAOCQ,EAASQ,EAJI,CACThB,aAAcA,EACdjE,UAAWA,KALhB,sDAUC4E,QAAQC,IAAI,sBAVb,8DAAP,sDAgBG,SAASX,IAAsC,IAA1B/B,EAAyB,uDAAb,YACpC,8CAAO,WAAMsC,GAAN,eAAArC,EAAA,+EAEwBsC,EAAQR,YAAY/B,GAF5C,OAEO+C,EAFP,OAMCT,EAASU,EAHI,CACTD,SAAUA,KAJf,sDASCN,QAAQC,IAAI,sBATb,8DAAP,sDA0EG,SAASO,EAAiBpF,GAC7B,8CAAO,WAAMyE,GAAN,SAAArC,EAAA,+DAECqC,EAiID,CACHY,KAAM,qBACNC,cAnI+BtF,IAF5B,qDAKC4E,QAAQC,IAAI,sBALb,6DAAP,sDAYG,SAASU,EAAsBvF,EAAWwF,GAC7C,8CAAO,WAAMf,GAAN,SAAArC,EAAA,+DAMCqC,EAASgB,EAJI,CACTD,OAAQA,EACRxF,UAAWA,KAJhB,qDAUC4E,QAAQC,IAAI,sBAVb,6DAAP,sDA8BG,SAASa,EAAeC,GAC3B,8CAAO,WAAMlB,GAAN,SAAArC,EAAA,+DAECqC,EAkCD,CACHY,KAAM,mBACNO,YApC6BD,IAF1B,qDAMCf,QAAQC,IAAI,sBANb,6DAAP,sDAWG,SAAS7C,EAAciB,GAC1B,8CAAO,WAAMwB,GAAN,SAAArC,EAAA,+EAEOsC,EAAQ1C,cAAciB,GAF7B,4DAMC2B,QAAQC,IAAI,sBANb,6DAAP,sDA+BJ,SAASC,EAAgBH,GACrB,MAAO,CACHU,KAAM,cACNV,QAGR,SAASK,EAAiBL,GACtB,MAAO,CACHU,KAAM,eACNV,QAGR,SAASM,EAAUN,GACf,MAAO,CACHU,KAAM,qBACNV,QAGR,SAASkB,EAAYlB,GAEjB,MAAO,CACHU,KAAM,cACNV,QAGR,SAASc,EAAed,GACpB,MAAO,CACHU,KAAM,kBACNV,QAqBR,SAASQ,EAAaR,GAClB,MAAO,CACHU,KAAM,eACNV,QAGR,SAASmB,EAAiBnB,GACtB,MAAO,CACHU,KAAM,oBACNV,Q,YClRD,SAASoB,EAAT,GAA8E,IAAxDC,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,YAAatF,EAAiC,EAAjCA,KAAMuF,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UAAa,EAE7CC,cAA3BC,EAFwE,EAExEA,SAAUC,EAF8D,EAE9DA,aAYlB,OAVAnG,qBAAU,WAGN,OADA6F,EAAQO,QAAQC,QACT,eAGR,CAACR,IAKA,yBAAK5F,UAAU,eACX,0BAAMqG,SAAUH,EAAaJ,IACzB,yBAAK9F,UAAU,eACX,2BAAOO,KAAMA,EAAM0E,KAAK,OACpBqB,MAAO,CAAEC,OAAQ,QACjBC,IAAK,SAACpI,GACF6H,EAAS7H,GACTwH,EAAQO,QAAU/H,GACnByH,YAAaA,EAChBY,aAAa,QAEjB,yBAAKzG,UAAU,mCACX,4BAAQA,UAAU,WAAlB,OACA,4BAAQ0G,QAASX,GAAjB,SCtBjB,SAASY,EAAS5H,GACrB,IAAMG,EAAQD,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aACjChB,EAAO4I,cAAP5I,GACF4B,EAAYV,EAAMC,OAAOnB,GACzBqG,EAAWwC,cAJW,EAKYxH,oBAAS,GALrB,mBAKrByH,EALqB,KAKNC,EALM,KActBC,EAAmB,WACrBD,GAAgBD,IAgBpB,OAZA/G,qBAAU,WAAQsE,EAASzC,EAAc1C,MAAW,CAACA,EAAOmF,EAAUzE,IAGtEG,qBAAU,WAGN,OAFAsE,EAASiB,EAAe,KAEjB,eAER,CAACjB,IAKA,yBAAKrE,UAAU,2BACX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,mCACX,iDAEA,yBAAKA,UAAU,2BACT8G,GACE,4BAAQJ,QAASM,EAAkBhH,UAAU,gBAA7C,gBAEH8G,GACG,kBAACnB,EAAD,CAAYpF,KAAK,aAAasF,YAAa,kBAAmBE,UAAWiB,EAAkBlB,aAlC7F,SAACvB,GACnB,IAAM7B,EAAQ6B,EAAK0C,WACdvE,IACL2B,EAASP,EAAYpB,IACrBsE,UAmCQ,yBAAKhH,UAAU,4CACX,yBAAKA,UAAU,aAEf,6BAASA,UAAU,sBACf,kBAAClB,EAAD,UCzBxB,SAAS2G,EAAYlB,GACjB,MAAO,CACHU,KAAM,cACNV,Q,mBClCD,SAAS2C,EAAT,GAA4D,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAASC,EAAgB,EAAhBA,aAE9C,OACI,yBAAKrH,UAAU,iBACX,yBAAKA,UAAU,mCACX,0CAAgBqH,EAAhB,KACA,yBAAKrH,UAAU,2BAEX,4BAAQA,UAAU,UAAU0G,QAASS,GAArC,UACA,4BAAQT,QAASU,GAAjB,QCJb,SAASE,EAAT,GAA+F,IAAtEC,EAAqE,EAArEA,mBAAoB/B,EAAiD,EAAjDA,YAAagC,EAAoC,EAApCA,sBAAuB5H,EAAa,EAAbA,UAC9EyE,EAAWwC,cACXjI,EAAU6I,cAFiF,EAGzDpI,oBAAS,GAHgD,mBAG1FyH,EAH0F,KAG3EC,EAH2E,OAIxD1H,oBAAS,GAJ+C,mBAI1FqI,EAJ0F,KAIzEC,EAJyE,OAKhDtI,oBAAS,GALuC,mBAK1FuI,EAL0F,KAKxEC,EALwE,OAMvDxI,oBAAS,GAN8C,mBAM1FyI,EAN0F,KAM1EC,EAN0E,KAO3FC,EAAkB,WACpBH,GAAsBD,IAEpBhC,EAAUqC,iBAAO,MAcjBjB,EAAmB,WACrBD,GAAgBD,IAGdoB,EAAoB,WACtBP,GAAeD,IAmBbS,EAAqB,WACvBJ,GAAiBD,IAYrB,OARA/H,qBAAU,WACN,OAAO,eAGR,IAKC,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,6BACX,8CAEJ,6BACA,yBAAKA,UAAU,iBACT0H,GACE,uBAAGhB,QAASwB,GAAZ,wBAGHR,GACG,kBAAC/B,EAAD,CAAYpF,KAAK,YAAYsF,YAAa,kBACtCE,UAAWmC,EAAmBpC,aA3C5B,SAACvB,GACvBF,EL0CD,SAAyBzE,EAAWmC,GACvC,8CAAO,WAAMsC,GAAN,SAAArC,EAAA,+DAMCqC,EAASqB,EAJI,CACT9F,UAAWA,EACXmC,UAAWA,KAJhB,qDASCyC,QAAQC,IAAI,sBATb,6DAAP,sDK3Ca2D,CAAgBxI,EAAW2E,EAAKxC,YACzCyF,KAyCmF5B,QAASA,KAE9EkB,GACE,uBAAGJ,QAASM,GAAZ,mBAEHF,GACG,kBAACnB,EAAD,CAAYpF,KAAK,aAAasF,YAAa,kBACvCE,UAAWiB,EAAkBlB,aAhE/B,SAACvB,GACnBF,EAASP,EAAYS,EAAK0C,aAC1BO,KA8D8E5B,QAASA,KAEzEkC,GACE,uBAAGpB,QAASyB,GAAZ,mBAGHL,GACG,kBAACZ,EAAD,CAAcG,aAAc,QAASD,SAAUe,EAAoBhB,SAnDjE,WLwBnB,IAAqBkB,EKvBhBzI,EAAUsC,OACVmC,EAASkD,EAAmB3H,IAEhC4H,IACAnD,GLmBoBgE,EKnBCzI,ELoBzB,uCAAO,WAAMyE,GAAN,SAAArC,EAAA,+DAGCqC,EA8MD,CACHY,KAAM,eACNV,KAhN0B8D,IAHvB,qDAMC7D,QAAQC,IAAI,sBANb,6DAAP,wDKnBI7F,EAAQiB,KAAK,SA+CC+H,GACE,uBAAGlB,QAASsB,GAAZ,eAEHJ,GACG,kBAACjC,EAAD,CAAYpF,KAAK,WAAWsF,YAAa,iBACrCD,QAASA,EAASG,UAAWiC,EAAiBlC,aApFpD,SAAC,GAAkB,IAAhBwC,EAAe,EAAfA,SACjBjE,EFnBD,SAAoBzE,EAAW2I,GAClC,8CAAO,WAAMlE,GAAN,eAAArC,EAAA,+EAEuBwG,EAAaxE,WAAWuE,GAF/C,OAEOE,EAFP,OAOCpE,EAASoB,EAJI,CACTgD,QAASA,EACT7I,UAAWA,KALhB,oHAAP,sDEkBaoE,CAAWwB,EAAa8C,IACjCd,UCfD,SAASkB,EAAT,GAAoC,IAAd9I,EAAa,EAAbA,UACnBV,EAAQD,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aACnCG,EAASX,OAAOD,KAAKW,EAAMC,QAC3BwJ,EAAU/I,EAAU5B,GACpB4K,EAAQ,kBAAC,IAAD,CAAiBC,KAAMC,MAGrC,OAAKH,EAED,yBAAK3I,UAAU,eACX,yBAAKA,UAAU,0CACVb,EAAOtB,KAAI,SAAA8B,GACR,IAAMC,EAAYV,EAAMC,OAAOQ,GAC/B,OAAO,kBAAC,IAAD,CAAMM,IAAKN,EAAOO,GAAE,kBAAaP,IACpC,yBAAKK,UAAU,mBACX,yBAAKsG,MAAO,CAAEyC,MAAO,QAAU3I,IAAKC,MAAQ,YAA8BT,EAAUU,cAAzC,SAA+DH,IAAI,qBAC9G,uBAAGF,IAAKN,GAAQC,EAAUW,MACzBoI,IAAY/I,EAAU5B,GAAK,0BAAMgC,UAAU,SAAS4I,GAAgB,UAVxE,aCGlB,SAASI,EAAUjK,GAEtB,IAAMG,EAAQD,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aACjCwG,EAAgBtG,EAAhBsG,YACF5F,EAAYV,EAAMC,OAAOqG,GAJF,EAKGnG,qBALH,mBAKtBiD,EALsB,KAKT2G,EALS,KAMvBC,EAAS,OAAGtJ,QAAH,IAAGA,OAAH,EAAGA,EAAWsJ,UANA,EAOa7J,oBAAS,GAPtB,mBAOtB8J,EAPsB,KAOPC,EAPO,OAQgB/J,oBAAS,GARzB,mBAQtBgK,EARsB,KAQDC,EARC,OASMjK,oBAAS,GATf,mBAStBkK,EATsB,KASNC,EATM,OAUenK,oBAAS,GAVxB,mBAUtBoK,EAVsB,KAULC,EAVK,KAWvBrF,EAAWwC,cAGX8C,EAAO,kBAAC,IAAD,CAAiBd,KAAMe,MAC9BzK,EAAS,kBAAC,IAAD,CAAiB0J,KAAMgB,MAChCC,EAAW,kBAAC,IAAD,CAAiBjB,KAAMkB,MAClCC,EAAO,kBAAC,IAAD,CAAiBnB,KAAMoB,MAC9BC,EAAgB,kBAAC,IAAD,CAAiBrB,KAAMsB,MACvCC,EAAO,kBAAC,IAAD,CAAiBvB,KAAMwB,MAqB9BC,EAAa,WACfd,GAAS,IAIPhC,EAAwB,WAC1B8B,GAAeD,IAanB,OANAtJ,qBAAU,WAEN,OADckJ,EAAdzD,EAAuB,GAAe,QAC/B,eAER,CAACA,IAGA,yBAAKxF,UAAS,iCAA4BsC,IACtC,yBAAKtC,UAAS,wBAAmBsC,IAC7B,yBAAKtC,UAAU,6CACX,yBAAKA,UAAU,+BACVJ,GACG,kBAAC,IAAD,CAAMM,GAAG,KAAI,4BAAQF,UAAU,OAAO0G,QAAS,kBAAMgD,GAAiB,KAASC,IAElF/J,GACG,4BAAQ8G,QAnBL,WACvBgD,GAAkBD,KAkBwCtK,EAAtC,IAA8C,0BAAMa,UAAU,kBAAhB,UAA9C,KAEHyJ,GACG,6BACI,kBAACf,EAAD,CAAY9I,UAAWA,KAI/B,2BAAOqF,KAAK,OAAOY,YAAY,eAEnC,yBAAK7F,UAAU,QACX,0CAEJ,yBAAKA,UAAU,gCACVJ,GACG,4BAAQ8G,QAASc,GAAwBsC,GAE7C,gCAASE,GACT,gCAASE,GACT,8CAMX1E,GAAe5F,GACZ,yBAAKI,UAAS,uCAAkCkJ,IAC5C,gCAAMtJ,EAAUW,MAChB,4BAAQP,UAAU,MAAM0G,QA1ElB,WAClB0C,GAAkBD,GAClB9E,EJrBJ,uCAAO,WAAMA,GAAN,SAAArC,EAAA,+DAECqC,EAmBD,CACHY,KAAM,mBAtBH,kHAAP,yDI6FgB,qBACA,4BAAQyB,QAtEJ,WACZ9G,EAAUsC,MACVmC,EAASW,EAAiBpF,KAG9ByE,EPqED,SAAuBzE,GAC1B,8CAAO,WAAMyE,GAAN,SAAArC,EAAA,+DAECqC,EAuID,CACHY,KAAM,mBACNsF,WAzI4B3K,IAFzB,qDAKC4E,QAAQC,IAAI,sBALb,6DAAP,sDOtEa+F,CAAc5K,IACvB4J,GAAS,GACTiB,YAAW,WACPH,MAED,OA4DuCtK,UAAS,6BAAgC,OAATJ,QAAS,IAATA,OAAA,EAAAA,EAAWsC,OAAQ,QAAU,KAAOkI,GAClG,2CAAiBxK,EAAUyC,UAAU5B,QACpC8I,GACG,uBAAGvJ,UAAU,qBAAb,UAEHqJ,GACG,kBAAC/B,EAAD,CACIC,mBAAoBvC,EACpBpF,UAAWA,EACX4F,YAAaA,EACbgC,sBAAuBA,M,6BC1H5C,SAASkD,GAAT,GAA+B,IAAVC,EAAS,EAATA,MACxB,OACI,yBAAKrE,MAAO,CAAEsE,gBAAgB,GAAD,OAAKD,IAAW3K,UAAU,e,wFCGxD,SAAS6K,GAAY9L,GAAQ,IAG1B+L,EADqB/L,EAAnBoD,MAAmBpD,EAAZgM,QAGTC,EAAS,kBAAC,IAAD,CAAiBnC,KAAMoC,MAChCC,EAAY,kBAAC,IAAD,CAAiBrC,KAAMsC,MACnCC,EAAQ,kBAAC,IAAD,CAAiBvC,KAAMwC,MAC/BC,EAAM,kBAAC,IAAD,CAAiBzC,KAAM0C,MAC7BC,EAAY,kBAAC,IAAD,CAAiB3C,KAAM4C,MASzC,OANA1L,qBAAU,WACN,OAAO,eAGR,IAEE+K,EAED,kBAAC,KAAD,CAAW7H,YAAW,OAAE6H,QAAF,IAAEA,OAAF,EAAEA,EAAU9M,GAAIsF,MAAOvE,EAAMuE,QAC9C,SAACoI,EAAUC,GAAX,OACG,6BACI,kBAACC,GAAD,iBACQF,EAASG,eACTH,EAASI,gBAFjB,CAGItF,IAAKkF,EAASK,SACdC,WAAYL,EAASK,aAErB,yBAAKhM,UAAU,4BACV8K,EAASmB,WACN,yBAAK3F,MAAO,CAAEsE,gBAAgB,GAAD,OAAKE,EAASmB,YAAejM,UAAU,mBAGxE,yBAAKA,UAAU,oBAEV8K,EAASoB,QAAUpB,EAASoB,OAAOrO,KAAI,SAAA8M,GACpC,OAAO,kBAACD,GAAD,CAAWzK,IAAK0K,EAAOA,MAAOA,QAG7C,yBAAK3K,UAAU,6BAEX,yBAAKA,UAAU,kCACX,yBAAKA,UAAU,SACX,kCAAI8K,QAAJ,IAAIA,OAAJ,EAAIA,EAAUpI,QAElB,0BAAM1C,UAAU,QAASgL,IAE7B,yBAAKhL,UAAU,gCACV8K,EAASqB,WACNb,EAEHR,EAASsB,SACN,0BAAMpM,UAAU,qBACXoL,EACD,uBAAG9E,MAAO,CAAE+F,SAAU,SAEjBvB,EAASsB,QAAQE,UAAU,EAAG,MAI1CxB,EAASyB,MACNf,EAEHhN,OAAOD,KAAKuM,EAASI,WAAWzK,OAAS,GACtCyK,UA/Cd,aAiE1B,IAAMU,GAAgBY,IAAOC,IAAV,MCpEnB,SAASC,GAASC,GACdC,KAAK5O,GAAKiE,EAAMzB,iBAAiB,GACjCoM,KAAKlK,MAAQiK,EAAWjK,MACxBkK,KAAKC,YAAcF,EAAWE,YAC9BD,KAAKX,UAAYU,EAAWV,UAC5BW,KAAK1B,UAAYyB,EAAWzB,UAC5B0B,KAAKT,WAAY,EACjBS,KAAKR,QAAUO,EAAWP,QAC1BQ,KAAKV,OAASS,EAAWT,OACzBU,KAAKrK,WAAY,IAAIC,MAAOC,qBA8BjB,QACbqK,WAzDF,SAAoBlN,EAAWmN,EAAUC,UACtBpN,EAAUuC,MACX6K,GAEhB,IAAM9J,EAAa6J,EAASnK,QAAQqK,QAAO,SAACC,GAAD,OAAaA,IAAYF,KAGpE,OAFAD,EAASnK,QAAUM,EAEZ,CAAEtD,UAAWA,EAAWmN,SAAUA,EAAUC,WAmDnDG,SA9CF,SAAkBC,GAChB,OAAO,IAAIV,GAASU,IA8CpBC,gBA9BF,SAAyBC,GACvB,MAAO,CACLtP,GAAIiE,EAAMzB,iBAAiB,GAC3BD,KAAM+M,EACNC,KAAM,GACNhL,WAAW,IAAIC,MAAOC,uBA0BxB+K,oBArBF,SAA6BC,GAC3B,MAAO,CACLzP,GAAIiE,EAAMzB,iBAAiB,GAC3BkN,KAAMD,EACNE,WAAW,EACXpL,WAAW,IAAIC,MAAOC,uBAiBxBmL,YAbF,SAAqB9C,EAAU+C,GAG7B,OAFA/C,EAASoB,OAAO7I,OAAOwK,EAAY,GACd/C,EAASoB,SCrDzB,SAAS4B,GAAkBC,GAC9B,8CAAO,WAAM1J,GAAN,SAAArC,EAAA,+DAECqC,EAwRD,CACHY,KAAM,sBACNV,KA1RgCwJ,IAF7B,kHAAP,sDAyGG,SAASC,GAAUpO,EAAWkL,EAAUmD,EAAeC,EAAUP,GACpE,8CAAO,WAAMtJ,GAAN,SAAArC,EAAA,+DASCqC,EAAS8J,GAPI,CACTvO,UAAWA,EACXkL,SAAUA,EACVmD,cAAeA,EACfC,SAAUA,EACVP,UAAWA,KAPhB,kHAAP,sDAyIG,SAASS,GAAaxO,EAAWkL,EAAUuD,GAC9C,8CAAO,WAAMhK,GAAN,SAAArC,EAAA,+DAOCqC,EAASiK,GALI,CACT1O,UAAWA,EACXkL,SAAUA,EACVuD,MAAOA,KALZ,kHAAP,sDAgBG,SAASE,GAAW3O,EAAWkL,EAAUsB,GAC5C,8CAAO,WAAM/H,GAAN,SAAArC,EAAA,+DAOCqC,EAASmK,GALI,CACT5O,UAAWA,EACXkL,SAAUA,EACVsB,QAASA,KALd,kHAAP,sDA4CJ,SAASqC,GAAiBlK,GACtB,MAAO,CACHU,KAAM,iBACNV,QASR,SAAS+J,GAAc/J,GACnB,MAAO,CACHU,KAAM,aACNV,QAGR,SAASmK,GAAanK,GAClB,MAAO,CACHU,KAAM,WACNV,QAGR,SAASoK,GAAcpK,GACnB,MAAO,CACHU,KAAM,mBACNV,QAGR,SAASqK,GAAiBrK,GACtB,MAAO,CACHU,KAAM,mBACNV,QAGR,SAASsK,GAAkBtK,GACvB,MAAO,CACHU,KAAM,qBACNV,QAGR,SAASuK,GAAqBvK,GAC1B,MAAO,CACHU,KAAM,wBACNV,QAGR,SAASiK,GAAYjK,GACjB,MAAO,CACHU,KAAM,eACNV,QAGR,SAASwK,GAAiBxK,GACtB,MAAO,CACHU,KAAM,oBACNV,QAGR,SAAS4J,GAAiB5J,GACtB,MAAO,CACHU,KAAM,oBACNV,QAGR,SAASyK,GAAUzK,GACf,MAAO,CACHU,KAAM,YACNV,QAGR,SAAS0K,GAAc1K,GACnB,MAAO,CACHU,KAAM,gBACNV,QCzXD,SAAS2K,GAASnQ,GAAQ,IACrBoD,EAAyCpD,EAAzCoD,MAAOuJ,EAAkC3M,EAAlC2M,SAAU9I,EAAwB7D,EAAxB6D,QAASuM,EAAepQ,EAAfoQ,WAC1BxG,EAAY/B,cAAZ+B,QACFtE,EAAWwC,cACXjI,EAAU6I,cAEV2H,EAAsB,SAACrE,GDC1B,IAAwBsE,ECAvBzQ,EAAQiB,KAAR,kBAAwB8I,EAAxB,YAAmCwG,EAAnC,YAAiDpE,IACjD1G,GDDuBgL,ECCCF,EAAWnR,GDAvC,uCAAO,WAAMqG,GAAN,SAAArC,EAAA,+DAECqC,EAmRD,CACHY,KAAM,mBACNV,KArR6B8K,IAF1B,kHAAP,wDCCIhL,EAASyJ,IAAkB,KAW/B,OARA/N,qBAAU,WACN,OAAO,eAER,CAAC6C,IAMA,yBAAK5C,UAAU,aACV4C,EAAQ/E,KAAI,SAACkN,EAAQuE,GAClB,OAAO,yBAAKrP,IAAK8K,EAAQrE,QAAS,kBAAM0I,EAAoBrE,KAExD,kBAACF,GAAD,CACI5K,IAAK8K,EACL5I,MAAOA,EACPmB,MAAOgM,EACPvE,OAAQA,QAInBW,EAAS7F,a,8CCrCtB,WAA0BjG,EAAWmN,GAArC,YASWwC,EATX,SAAAvN,EAAA,6DASWuN,EATX,SASwBC,UACbC,EAAcD,WATjBE,EAAW9P,EAAUwC,OACX2K,EAAS/O,IACnB6F,EAAejE,EAAUyC,UAAU4K,QAAO,SAAAM,GAAI,OAAIA,IAASR,EAAS/O,MAEpE2R,EAAkB5C,EAASnK,QAC3B6M,EAAgB7P,EAAUuC,MAMhCwN,EAAgBC,SAAQ,SAAAJ,GAAM,OAAID,EAAaC,MAZjD,kBAeS,CACLE,SAAUA,EACV7L,aAAcA,EACd4L,cAAeA,IAlBnB,4C,oEAwBA,WAAwB7P,EAAWiQ,GAAnC,6BAAA7N,EAAA,6DACQ8N,EAAkB,aAAeD,EAAWnN,MADpD,SAEwB+C,GAAYqK,GAFpC,cAEQrH,EAFR,OAGQsH,EAAgB,GAChBC,EAAW,GACXC,EAAgBJ,EAAWjN,QACjCsN,GAAmBH,EAAeE,EAAerQ,EAAUuC,OAE3D4N,EAAcH,SACZ,SAAAO,GACE,IAAMC,EAAWjD,GAASgD,GAC1BH,EAASI,EAASpS,IAAMoS,KAI5B3H,EAAQ7F,QAAUpE,OAAOD,KAAKyR,GAExBlN,EAAQlD,EAAUyC,UAAUgO,WAAU,SAAAC,GAAO,OAAIA,IAAYT,EAAW7R,MACxEuS,EAAM9H,EAAQzK,IACd6F,EAAejE,EAAUyC,WAClBgB,OAAOP,EAAQ,EAAG,EAAGyN,GApBpC,kBAsBS,CACLC,WAAY/H,EACZ5E,aAAcA,EACd4M,YAAaT,IAzBjB,6C,sBAsCA,SAASE,GAAmBH,EAAeW,EAAaC,GACtDD,EAAYd,SAAQ,SAAA5C,GAClB,IAAMlC,EAAW6F,EAAS3D,GACtBlC,GACFiF,EAAclQ,KAAKiL,M,SAOVrF,G,iFAAf,WAA2B6C,GAA3B,SAAAtG,EAAA,+EACS,CACLhE,GAAIiE,EAAMzB,iBAAiB,GAC3BkC,MAAO4F,EACP1F,QAAS,KAJb,4C,sBAQA,SAASuK,GAASR,GAChB,MAAO,CACL3O,GAAIiE,EAAMzB,iBAAiB,GAC3BkC,MAAOiK,EAAWjK,MAClB6J,KAAMI,EAAWJ,KACjBN,UAAWU,EAAWV,UACtBf,UAAWyB,EAAWzB,UACtBiB,UAAWQ,EAAWR,UACtBC,QAASO,EAAWP,QACpBF,OAAQS,EAAWT,OACnB3J,WAAW,IAAIC,MAAOC,sBAoBX,QACbmO,W,+CACA7M,WAjBF,SAAoB8M,GAA8B,IAAnBhE,EAAkB,uDAAJ,GAC3C,MAAO,CACL7O,GAAIiE,EAAMzB,iBAAiB,GAC3BkC,MAAOmO,EACPtE,KAAMM,EACN3B,UAAW,GACXe,UAAW,GACXE,WAAW,EACXD,OAAQ,GACRE,QAAS,GACT7J,WAAW,IAAIC,MAAOC,uBAQxBqO,S,+CACAC,aA7DF,SAAsB5O,EAAOoL,GAC3B,IAAMyD,EAAY,GAElB,OADAzD,EAAK3K,QAAQgN,SAAQ,SAACJ,GAAa,OAAOrN,EAAMqN,GAAUwB,EAAUxB,GAAUrN,EAAMqN,GAAU,MACvFwB,ICzCF,SAASJ,GAAWhR,EAAWmN,GAClC,8CAAO,WAAM1I,GAAN,iBAAArC,EAAA,+EAE2BiP,GAAYL,WAAWhR,EAAWmN,GAF7D,OAEOmE,EAFP,OAGO3M,EAAO,CACT3E,UAAWA,EACXmN,SAAUA,EACV2C,SAAUwB,EAAYxB,SACtB7L,aAAcqN,EAAYrN,aAC1B4L,cAAeyB,EAAYzB,eAE/BpL,EAAS8M,GAAY5M,IAVtB,oHAAP,sDAqFJ,SAAS4M,GAAY5M,GACjB,MAAO,CACHU,KAAM,cACNV,QAIR,SAAS6M,GAAY7M,GACjB,MAAO,CACHU,KAAM,cACNV,QAGR,SAAS8M,GAAU9M,GACf,MAAO,CACHU,KAAM,YACNV,QAGR,SAAS+M,GAAU/M,GACf,MAAO,CACHU,KAAM,YACNV,QAGR,SAASgN,GAAgBhN,GACrB,MAAO,CACHU,KAAM,mBACNV,QC7HD,SAASiN,GAAQzS,GAAQ,IACpBa,EAAuCb,EAAvCa,UAAWmN,EAA4BhO,EAA5BgO,SAAU0E,EAAkB1S,EAAlB0S,cACvBpN,EAAWwC,cACT6K,EAAU1L,cAAV0L,MACFb,EAAY5I,iBAAO,MAWzB,OACI,yBAAKjI,UAAU,aACX,kBAAC2F,EAAD,CACIpF,KAAM,YACNqF,QAASiL,EACT9K,UAAW0L,EACX5L,YAAa,mBACbC,aAfS,SAAAvB,GACZA,EAAKsM,YACVxM,EDdD,SAAoBzE,EAAWmN,EAAU8D,GAC5C,8CAAO,WAAMxM,GAAN,eAAArC,EAAA,+EAEuBiP,GAAYlN,WAAW8M,GAF9C,OAEOzD,EAFP,OAQC/I,EAAS+M,GALI,CACThE,QAASA,EACTxN,UAAWA,EACXmN,SAAUA,KANf,oHAAP,sDCaahJ,CAAWnE,EAAWmN,EAAUxI,EAAKsM,YAC9Ca,IACAD,SCbD,SAASE,GAAT,GAA8G,IAA1FC,EAAyF,EAAzFA,eAAgBhS,EAAyE,EAAzEA,UAAWmN,EAA8D,EAA9DA,SAAU0E,EAAoD,EAApDA,cAAeI,EAAqC,EAArCA,gBAAiBC,EAAoB,EAApBA,iBAEtFzN,EAAWwC,cAuBXkL,EAAUtS,uBACZ,WACImS,MAEJ,CAACA,IAaL,OATA7R,qBAAU,WAEN,OADAiS,OAAOC,iBAAiB,QAASF,GAC1B,WACHC,OAAOE,oBAAoB,QAASH,MAEzC,CAACA,IAKA,yBAAK/R,UAAU,aACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,uBACX,uBAAG0G,QAASkL,EAAgB5R,UAAU,aAAtC,KACA,4CAEJ,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,4BACX,uBAAG0G,QA5CF,WACjB+K,MA2CgB,gBAEJ,yBAAK/K,QAzCF,WACfrC,EFwCD,SAAkBzE,EAAWiQ,GAEhC,8CAAO,WAAMxL,GAAN,iBAAArC,EAAA,+EAE2BiP,GAAYH,SAASlR,EAAWiQ,GAF3D,OAEOsC,EAFP,OAGO5N,EAAO,CACT3E,UAAWA,EACX4Q,WAAY2B,EAAY3B,WACxB3M,aAAcsO,EAAYtO,aAC1B4M,YAAa0B,EAAY1B,aAE7BpM,EAASgN,GAAU9M,IATpB,oHAAP,sDE1CauM,CAASlR,EAAWmN,KAwCS/M,UAAU,4BAChC,4CAEJ,yBAAK0G,QAASoL,EAAkB9R,UAAU,4BACtC,4CAEJ,yBAAK0G,QAzCD,WAChBmL,KAwCuC7R,UAAU,4BACjC,6CAEJ,yBAAK0G,QA3DA,WACjBrC,EAASuM,GAAWhR,EAAWmN,KA0DS/M,UAAU,mCAClC,iDC/DjB,SAASoS,GAAT,GAAoE,IAAzCP,EAAwC,EAAxCA,gBAAiBjS,EAAuB,EAAvBA,UAAWmN,EAAY,EAAZA,SACpD1I,EAAWwC,cADqD,EAEpCb,cAA1BC,EAF8D,EAE9DA,SAAUC,EAFoD,EAEpDA,aACZxD,EAAQuF,iBAAO,MAYrB,OANAlI,qBAAU,WACN2C,EAAMyD,QAAQC,WAMd,yBAAKpG,UAAU,qBACX,0BAAMqG,SAAUH,GAbD,SAAC3B,GACpBF,EHoED,SAAwBzE,EAAWmN,EAAUxE,GAEhD,8CAAO,WAAMlE,GAAN,SAAArC,EAAA,+DAEC+K,EAASrK,MAAQ6F,EAMjBlE,EAASkN,GAJI,CACT3R,UAAWA,EACXmN,SAHiBA,KAHtB,oHAAP,sDGtEasF,CAAezS,EAAWmN,EAAUxI,EAAK+N,WAClDT,QAYQ,2BACIpL,aAAa,MACbD,IAAK,SAACpI,GACF6H,EAAS7H,GACTsE,EAAMyD,QAAU/H,GAEpBmC,KAAK,WACL+F,MAAO,CAAEyC,MAAO,QAChB9D,KAAK,SACT,yBAAKjF,UAAU,sBACX,4BAAQsG,MAAO,CAACsE,gBAAgB,oBAAqB3F,KAAK,UAA1D,QACA,4BAAQyB,QAASmL,GAAjB,QC5Bb,SAASU,GAAT,GAA8D,IAA1CT,EAAyC,EAAzCA,iBAAkBlS,EAAuB,EAAvBA,UAAWmN,EAAY,EAAZA,SAC9C7N,EAAQD,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aACnCG,EAASX,OAAOgU,OAAOtT,EAAMC,QAF6B,EAG/BE,mBAAS,IAHsB,mBAGzDoT,EAHyD,KAG5CC,EAH4C,KAI1DrO,EAAWwC,cACT8B,EAAY/B,cAAZ+B,QAiBR,OACI,yBAAK3I,UAAU,aACX,yBAAKA,UAAU,wBACX,4BAAQ2S,SAhBD,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACWC,MAC7BJ,EAAUE,IAc4B5U,GAAG,IAC7B,4BAAQ8U,MAAM,IAAd,SACC3T,GAAUA,EAAOtB,KAAI,SAAC8B,GAAD,OAClB,4BAAQmT,MAAOnT,EAAM3B,GAAIuC,KAAMZ,EAAM3B,GAAIiC,IAAKN,EAAM3B,IAAK2B,EAAMY,UAIvE,yBAAKP,UAAU,sBACX,4BAAQ0G,QAnBP,WACTiC,IAAY8J,GAAgBA,IAChCpO,EJiBD,SAAkBzE,EAAWmT,EAAYH,GAE5C,8CAAO,WAAMvO,GAAN,eAAArC,EAAA,+DAEOgR,EAAgB/B,GAAYF,aAAanR,EAAUuC,MAAO4Q,GAOhE1O,EAASiN,GANI,CACT1R,UAAWA,EACXmT,WAAYA,EACZH,cAAeA,EACfI,cAAeA,KAPpB,kHAAP,sDInBaC,CAASrT,EAAWmN,EAAU0F,IACvCpO,EAASuM,GAAWhR,EAAWmN,OAgBnB,QACA,4BAAQrG,QAASoL,GAAjB,Q,uLC3Bb,SAASoB,GAAT,GAA4D,IAA5C7D,EAA2C,EAA3CA,OAAQjN,EAAmC,EAAnCA,MAAOD,EAA4B,EAA5BA,MAAOvC,EAAqB,EAArBA,UAAW0D,EAAU,EAAVA,MAAU,EAC9BjE,mBAAS,IADqB,mBACvD0N,EADuD,KAC7CoG,EAD6C,OAEzB9T,oBAAS,GAFgB,mBAEvD+T,EAFuD,KAEvCC,EAFuC,OAGvBhU,oBAAS,GAHc,mBAGvDiU,EAHuD,KAGtCC,EAHsC,OAIxBlU,oBAAS,GAJe,mBAIvDmU,EAJuD,KAI1CC,EAJ0C,OAKrBpU,oBAAS,GALY,mBAKvDqU,EALuD,KAKpCC,EALoC,KAOxDC,EAAO,kBAAC,IAAD,CAAiB/K,KAAMkB,MAC9B8J,EAAW,kBAAC,IAAD,CAAiBhL,KAAMiL,MAGlCC,EAActU,uBAChB,WACI,IAAMsU,EAAc3R,EAAMiN,GAC1B8D,EAAYY,KAEhB,CAAC3R,EAAOiN,IAGN2E,EAAkB,WACpBX,GAAYD,IAEVa,EAAmB,WACrBV,GAAaD,IAEXzB,EAAkB,WACpB4B,GAAgBD,IAGd1B,EAAmB,WACrB6B,GAAaD,IAYjB,OATA3T,qBAAU,WAEN,OADAgU,IACO,eAGR,CAACA,IAIChH,EAED,kBAAC,KAAD,CACI9J,YAAa8J,EAAS/O,GACtBsF,MAAOA,IAEN,SAACoI,GAAD,OACG,kBAACwI,GAAD,iBACQxI,EAASG,eADjB,CAEIrF,IAAKkF,EAASK,WAEd,yBAAK/L,UAAU,iCACV0T,GACG,kBAAC,GAAD,CAAU9T,UAAWA,EAAWmN,SAAUA,EAAU+E,iBAAkBA,IAE1E,yBAAK9R,UAAU,qCACX,wCAAMA,UAAU,mCACR0L,EAASI,kBAEX0H,GAAe,6BAEb,uBAAGxT,UAAU,cAAc+M,EAASrK,OAEpC,uBAAG1C,UAAU,eAAb,gBAAyC+M,EAASnK,QAAQnC,SAG7D+S,GAAe,0BAAMxT,UAAU,cAC5B,kBAACoS,GAAD,CACIP,gBAAiBA,EACjBjS,UAAWA,EACXmN,SAAUA,KAIlB,yBAAK/M,UAAU,YACX,0BAAMA,UAAU,sCACZ0G,QAASuN,GACRJ,MAKhBP,GACG,kBAAC3B,GAAD,CAGIC,eAAgBqC,EAChBrU,UAAWA,EACXmN,SAAUA,EACV0E,cAAeuC,EACfnC,gBAAiBA,EACjBC,iBAAkBA,IAG1B,yBAAK9R,UAAU,gCACX,kBAAC,KAAD,CAAWmU,YAAa9E,EAAQpK,KAAK,SAChC,SAACyG,EAAUC,GACR,OACI,6BACI,kBAACyI,GAAD,eACI5N,IAAKkF,EAASK,UACVL,EAAS2I,gBAEb,kBAACnF,GAAD,CACItM,QAASmK,EAASnK,QAClBT,MAAOA,EACPuJ,SAAUA,EACVyD,WAAYpC,EAAS/O,WAQjD,6BAASgC,UAAU,uCACboT,GAAkB,yBAAK1M,QAASsN,EAC9BhU,UAAU,mCACV,yBAAKA,UAAU,aAAa4T,GACC,IAA5B7G,EAASnK,QAAQnC,OAAe,yCAAoB,+CAGxD2S,GAAkB,yBAAKpT,UAAU,oBAC9B,kBAACwR,GAAD,CAASC,cAAeuC,EACpBjH,SAAUA,EACVnN,UAAWA,KAGnB,yBAAKI,UAAU,cAxFjB,aAsG1B,IAAMoU,GAAoB5H,IAAOC,IAAV,MAMjByH,GAAoB1H,IAAOC,IAAV,M,wHC9IhB,SAAS6H,GAAT,GAA+D,IAApCpV,EAAmC,EAAnCA,MAAOU,EAA4B,EAA5BA,UAAW2U,EAAiB,EAAjBA,cAC1ClQ,EAAWwC,cACX2N,EAAQ,kBAAC,IAAD,CAAiB3L,KAAM4L,MAE/BC,EAAsB,SAAC,GAEzB,OAFwC,EAAb7B,OACPtS,MAEhB,IAAK,SACD8D,EAASc,EAAsBvF,EAAW,kBAC1C,MACJ,IAAK,YACDyE,EAASc,EAAsBvF,EAAW,cAC1C,MACJ,IAAK,QACDyE,EAASc,EAAsBvF,EAAW,UAC1C,MACJ,IAAK,OACDyE,EAASc,EAAsBvF,EAAW,SAC1C,MACJ,IAAK,WACDyE,EAASc,EAAsBvF,EAAW,aAC1C,MACJ,IAAK,MACDyE,EAASc,EAAsBvF,EAAW,UAatD,OAHAG,qBAAU,WAAQsE,EAASzC,EAAc1C,MAAW,CAACA,EAAOmF,IAIxD,yBAAKrE,UAAU,qBACX,yBAAKA,UAAU,kBACX,4BAAQ0G,QAAS6N,GAAgBC,IAErC,yBAAKxU,UAAU,uCACX,yBAAK0G,QAAS,SAACtI,GAAD,OAAOsW,EAAoBtW,IAAIgC,IAAKuU,KAAQxU,IAAI,SAASI,KAAK,WAC5E,yBAAKmG,QAAS,SAACtI,GAAD,OAAOsW,EAAoBtW,IAAIgC,IAAKwU,KAAWzU,IAAI,YAAYI,KAAK,cAClF,yBAAKmG,QAAS,SAACtI,GAAD,OAAOsW,EAAoBtW,IAAIgC,IAAKyU,KAAO1U,IAAI,QAAQI,KAAK,UAC1E,yBAAKmG,QAAS,SAACtI,GAAD,OAAOsW,EAAoBtW,IAAIgC,IAAK0U,KAAM3U,IAAI,OAAOI,KAAK,SACxE,yBAAKmG,QAAS,SAACtI,GAAD,OAAOsW,EAAoBtW,IAAIgC,IAAK2U,KAAU5U,IAAI,WAAWI,KAAK,aAChF,yBAAKmG,QAAS,SAACtI,GAAD,OAAOsW,EAAoBtW,IAAIgC,IAAK4U,KAAK7U,IAAI,MAAMI,KAAK,UClE/E,SAAS0U,GAAYlW,GAcxB,OAVAgB,qBAAU,WAEN,OAAO,eAIR,IAKC,yBAAKC,UAAU,iBCdhB,SAASkV,GAAT,GAAgC,IAAZpK,EAAW,EAAXA,SASvB,OARA/K,qBAAU,WACN,OAAO,eAGR,IAKC,yBAAKuG,MAAO,CAACsE,gBAAgB,GAAD,OAAIE,EAASmB,YAAcjM,UAAU,cAC7D,yBAAKA,UAAU,6BCTpB,SAAS0M,GAAT,GAA8D,IAA1C9M,EAAyC,EAAzCA,UAAWkL,EAA8B,EAA9BA,SAAUqK,EAAoB,EAApBA,iBAAoB,EAE1B9V,qBAF0B,mBAEzD+V,EAFyD,KAE5CC,EAF4C,KAI1DhR,EAAWwC,cAEXyO,EAAa,SAAC,GAAgB,IAC1BhN,EADyB,EAAbuK,OACMC,MAClByC,EAAa/W,OAAOgU,OAAO5S,EAAUwC,OAAO6K,QAAO,SAACM,GAAD,OAAUA,EAAK7K,QAAU4F,KAClFjE,EZ0CD,SAAkBzE,EAAW2V,EAAY5I,GAE5C,OADAnI,QAAQC,IAAI,cAAekI,GAC3B,uCAAO,WAAMtI,GAAN,eAAArC,EAAA,+EAE0BwT,GAAYrI,SAASR,GAF/C,OAEO8I,EAFP,OAQCpR,EA6OD,CACHY,KAAM,YACNV,KApPwB,CAChBkR,WAAYA,EACZ7V,UAAWA,EACX8V,aAAcH,KAGlB/Q,QAAQC,IAAI,cAAegR,GAT5B,oHAAP,sDY5CatI,CAASvN,EAAW2V,EAAW,GAAGvX,GAAI8M,IAC/CqK,KAaJ,OARApV,qBAAU,WAEN,OADAsV,EAAe7W,OAAOgU,OAAO5S,EAAUwC,QAChC,eAER,CAACxC,IAKA,yBAAKI,UAAU,aACVoV,GACG,4BAAQ7U,KAAK,GAAGoS,SAAU,SAACvU,GAAD,OAAOkX,EAAWlX,KACxC,4BAAQ0U,MAAM,IAAd,SACCsC,EAAYvX,KAAI,SAAC0P,EAAM+B,GAAP,OAAe,4BAAQrP,IAAKqP,GAAM/B,EAAK7K,YC7BrE,SAASiT,GAAT,GAA6F,IAAzE/V,EAAwE,EAAxEA,UAAWkL,EAA6D,EAA7DA,SAAUiC,EAAmD,EAAnDA,SAAU6I,EAAyC,EAAzCA,iBAAkBxG,EAAuB,EAAvBA,oBAAuB,EACzD/P,qBADyD,mBACxF+V,EADwF,KAC3EC,EAD2E,KAEzFhR,EAAWwC,cAIXgP,EAAa,SAAC,GAAgB,IAAD,IACzBvN,EADyB,EAAbuK,OACMC,MAClBgD,EAAatX,OAAOgU,OAAO5S,EAAUwC,OAAO6K,QAAO,SAACM,GAAD,OAAUA,EAAK7K,QAAU4F,KAClF9D,QAAQC,IAAI,cAAeqR,GAC3B,IAAMC,EAAa,UAAGnW,EAAUwC,MAAV,UAAgB0T,EAAW,UAA3B,aAAgB,EAAe9X,WAAlC,aAAG,EAAoC4E,QACrDmT,IACDA,EAAcC,SAASlL,EAAS9M,KAChC8X,EAAW,GAAG9X,KAAO+O,EAAS/O,KAClCqG,EbyDD,SAAkBzE,EAAWkW,EAAYhL,EAAUiC,GACtD,8CAAO,WAAM1I,GAAN,SAAArC,EAAA,+DAQCqC,EAuOD,CACHY,KAAM,YACNV,KA/OwB,CAChB3E,UAAWA,EACXqW,aAAcH,EACdhL,SAAUA,EACViC,SAAUA,KANf,kHAAP,sDa1DamJ,CAAStW,EAAWkW,EAAW,GAAG9X,GAAI8M,EAAUiC,IACzD6I,IACAxG,OAcJ,OARArP,qBAAU,WAEN,OADAsV,EAAe7W,OAAOgU,OAAO5S,EAAUwC,QAChC,eAER,CAACxC,EAAUwC,QAKV,yBAAKpC,UAAU,aACVoV,GACG,4BAAQ7U,KAAK,GAAGoS,SAAU,SAACvU,GAAD,OAAOyX,EAAWzX,KACxC,4BAAQ0U,MAAM,IAAd,SACCsC,EAAYvX,KAAI,SAAC0P,EAAM+B,GAAP,OAAe,4BAAQrP,IAAKqP,GAAM/B,EAAK7K,YCrCrE,SAASyT,GAAT,GAA0D,IAAjCC,EAAgC,EAAhCA,cAAeC,EAAiB,EAAjBA,cAa3C,OACI,yBAAKrW,UAAU,kBACX,yBAAKA,UAAU,2BAdR,CACX,CAAEqO,MAAO,MAAO/P,KAAM,WACtB,CAAE+P,MAAO,aAAc/P,KAAM,WAC7B,CAAE+P,MAAO,UAAW/P,KAAM,WAC1B,CAAE+P,MAAO,SAAU/P,KAAM,WACzB,CAAE+P,MAAO,OAAQ/P,KAAM,WACvB,CAAE+P,MAAO,SAAU/P,KAAM,WACzB,CAAE+P,MAAO,UAAW/P,KAAM,GAAIoP,KAAM,SAQpB7P,KAAI,SAAAwQ,GAAK,OACb,yBAAKpO,IAAKoO,EAAM/P,KAAMoI,QAAS,kBAAM0P,EAAc/H,EAAM/P,OAAO0B,UAAU,QAAQsG,MAAO,CAAEsE,gBAAiByD,EAAM/P,OAC7G+P,EAAMX,MAAQ,2BAAIW,EAAMX,UAGjC,4BAAQhH,QAAS2P,GAAjB,WClBT,SAASC,GAAT,GAAsF,IAA7DD,EAA4D,EAA5DA,cAAeE,EAA6C,EAA7CA,qBAAsBzL,EAAuB,EAAvBA,SAAUlL,EAAa,EAAbA,UACrEyE,EAAWwC,cAEX2P,EAAe,WACjBnS,EAAS+J,GAAaxO,EAAWkL,EAAU,KAC3CyL,KAUJ,OACI,yBAAKvW,UAAU,mBACX,yBAAKA,UAAU,gCAEf,kBAACmW,GAAD,CACIM,aAAcD,EACdJ,cAdU,SAAC/H,GACnB,GAAc,YAAVA,EAAqB,OAAOmI,IAChCnS,EAAS+J,GAAaxO,EAAWkL,EAAUuD,KAanCvD,SAAUA,EACVlL,UAAWA,EACXyW,cAAeA,EACfE,qBAAsBA,K,mBC3B/B,SAASG,GAAT,GAA8D,IAAtCC,EAAqC,EAArCA,kBAAmBC,EAAkB,EAAlBA,eAAkB,EAC7B5Q,cAA3BC,EADwD,EACxDA,SAAUC,EAD8C,EAC9CA,aACZ2Q,EAAgB5O,iBAAO,MAU7B,OARAlI,qBAAU,WAEN,OADA8W,EAAc1Q,QAAQC,QACf,eAGR,IAIC,yBAAKpG,UAAU,kBACX,0BAAMqG,SAAUH,EAAa0Q,IACzB,2BAAOtQ,MAAO,CAAEwQ,eAAgB,OAASrQ,aAAa,MAAMD,IAAK,SAACpI,GAC9D6H,EAAS7H,GACTyY,EAAc1Q,QAAU/H,GACzBmC,KAAK,gBAAgB0E,KAAK,SAC7B,yBAAKjF,UAAU,sCACX,4BAAQsG,MAAO,CAACsE,gBAAgB,qBAAhC,OACA,4BAAQlE,QAASiQ,GAAjB,aCrBb,SAASI,GAAT,GAAoD,IAA7BV,EAA4B,EAA5BA,cAAeW,EAAa,EAAbA,WACzC,OACI,yBAAKhX,UAAU,eACX,kBAACmW,GAAD,CAAeE,cAAeA,EAAeD,cAAeY,KCSjE,SAASC,GAAT,GAOL,IAP8B7H,EAO/B,EAP+BA,oBAAqB8H,EAOpD,EAPoDA,cAAeC,EAOnE,EAPmEA,UAChEC,EAMH,EANGA,OACAxX,EAKH,EALGA,UACAkL,EAIH,EAJGA,SACAyL,EAGH,EAHGA,qBACAc,EAEH,EAFGA,kBAGMtK,EAAWnN,EAAUwC,MAAMgV,GAC3BpK,EAASlC,EAAS9M,GAF3B,EAGyCqB,oBAAS,GAHlD,mBAGUiY,EAHV,KAGyBC,EAHzB,OAIyClY,oBAAS,GAJlD,mBAIUmY,EAJV,KAIyBC,EAJzB,OAK6CpY,oBAAS,GALtD,mBAKUqY,EALV,KAK2BC,EAL3B,OAM6CtY,oBAAS,GANtD,mBAMUuY,EANV,KAM0BC,EAN1B,OAO6CxY,oBAAS,GAPtD,mBAOUyY,EAPV,KAO0BC,EAP1B,KAQS1T,EAAWwC,cARpB,EAS4BxH,mBAAS,IAAImD,MATzC,mBASUwV,EATV,KASgBC,EAThB,OAUuC5Y,oBAAS,GAVhD,mBAUU6Y,EAVV,KAUsBC,EAVtB,KAYSC,EAAS,kBAAC,IAAD,CAAiBvP,KAAMwP,MAChC1N,EAAQ,kBAAC,IAAD,CAAiB9B,KAAMyP,MAC/BpN,EAAY,kBAAC,IAAD,CAAiBrC,KAAMsC,MACnCC,EAAQ,kBAAC,IAAD,CAAiBvC,KAAMwC,MAC/BkN,EAAY,kBAAC,IAAD,CAAiB1P,KAAM2P,MACnCC,GAAQ,kBAAC,IAAD,CAAiB5P,KAAM6P,MAC/BC,GAAO,kBAAC,IAAD,CAAiB9P,KAAM+P,MAC9BtN,GAAM,kBAAC,IAAD,CAAiBzC,KAAM0C,MAC7BsN,GAAQ,kBAAC,IAAD,CAAiBhQ,KAAMiQ,MAC/BC,GAAQ,kBAAC,IAAD,CAAiBlQ,KAAMmQ,MAC/BC,GAAQ,kBAAC,IAAD,CAAiBpQ,KAAMqQ,MAG/BC,GAAoB,WACtBpB,GAAiBD,IAYfsB,GAAqB,WACvBzB,GAAgBD,IAQdvC,GAAmB,WACrBoC,GAAcD,IAEZ1B,GAAmB,WACrB6B,GAAcD,IAGZb,GAAoB,WACtBkB,GAAiBD,IA2BrB,OARA7X,qBAAU,WACN,OAAO,eAGR,CAACH,IAMA,yBAAKI,UAAU,+BACX,wCACA,4BAAQA,UAAU,kBACd,8BACKoY,GAFT,QAKA,0CACA,4BAAQpY,UAAU,kBACd,8BACKoY,GAFT,WAMA,4BAAQ1R,QAASyS,GAAmBnZ,UAAU,kBAC1C,8BAAO2K,GADX,UAIEmN,GAAkB,kBAACf,GAAD,CAAYC,WAzErB,SAACqC,GAChB,IAAM/V,EAAQwH,EAASoB,OAAOmE,WAAU,SAAC1F,GAAY,OAAOA,IAAU0O,KAElEhV,EADAf,GAAS,ElBwFd,SAAqB1D,EAAWkL,EAAU+C,GAC7C,IACMtJ,EAAO,CACT3E,UAAWA,EACXkL,SAAUA,EACVwO,aAJiB9D,GAAY5H,YAAY9C,EAAU+C,IAMvD,8CAAO,WAAMxJ,GAAN,SAAArC,EAAA,+DAECqC,EAAS4K,GAAc1K,IAFxB,kHAAP,sDkB9FiBqJ,CAAYhO,EAAWkL,EAAUxH,GlBuE/C,SAAkB1D,EAAWkL,EAAUyO,GAC1C/U,QAAQC,IAAI,oBAAqBqG,GACjC,IAAMvG,EAAO,CACT3E,UAAWA,EACXkL,SAAUA,EACVyO,WAAYA,GAEhB,8CAAO,WAAMlV,GAAN,SAAArC,EAAA,+DAECqC,EAAS2K,GAAUzK,IAFpB,kHAAP,sDkB3EaiV,CAAS5Z,EAAWkL,EAAUuO,KAmEqBhD,cAAe8C,GAAmBvZ,UAAWA,EAAWkL,SAAUA,IAC1H,4BAAQpE,QAASiQ,GAAmB3W,UAAU,kBAC1C,8BAAOkL,GADX,aAIC0M,GACG,kBAAClB,GAAD,CACIC,kBAAmBA,GACnBC,eApDO,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACjBA,IACLxS,ElB8FD,SAAyBzE,EAAWkL,EAAU+L,GACjD,8CAAO,WAAMxS,GAAN,eAAArC,EAAA,+EAE4BwT,GAAYnI,gBAAgBwJ,GAFxD,OAEO4C,EAFP,OAQCpV,EAASsK,GALI,CACT/O,UAAWA,EACX8Z,cAAeD,EACf3O,SAAUA,KANf,oHAAP,sDkB/FauC,CAAgBzN,EAAWkL,EAAU+L,IAC9CF,SAmDI,4BAAQjQ,QA1CQ,WACpByR,GAAeD,IAyCuBlY,UAAU,kBACxC,8BAAOoL,GADX,YAIC8M,GAAc,yBAAKlY,UAAU,OAC1B,kBAAC,KAAD,CAAUA,UAAU,WAChB2S,SAvDG,SAAAqF,GACf,IAAM2B,EAAU3B,EAAK4B,WAAWtN,UAAU,EAAG,IAC7C2L,EAASD,GACT3T,EAASkK,GAAW3O,EAAWkL,EAAU6O,IACzCxB,GAAc,IAoDFrF,MAAOkF,KAIf,4BAAQhY,UAAU,kBACd,8BACKuY,GAFT,cAMA,4BAAQvY,UAAU,iBAAiB0G,QAASwQ,GACxC,8BACK+B,IAFT,SAMC9B,GACG,kBAACb,GAAD,CACIxL,SAAUA,EACVyL,qBAAsBA,EACtB3W,UAAWA,EACXyW,cAAea,IAIvB,sCAEA,yBAAKlX,UAAU,8BACX,yBAAKA,UAAU,iBACX,4BAAQA,UAAU,iBAAiB0G,QAASkP,IACxC,8BACK6C,IAFT,SAOHjB,GAAiB,kBAAC7B,GAAD,CAAU3I,OAAQA,EAChCoK,OAAQA,EACRxX,UAAWA,EACXkL,SAAUA,EACViC,SAAUA,EACV6I,iBAAkBA,GAClBxG,oBAAqBA,KAI7B,yBAAKpP,UAAU,8BACX,yBAAKA,UAAU,iBACX,4BAAQA,UAAU,iBAAiB0G,QAASyO,IACxC,8BACKwD,IAFT,SAOHrB,GAAiB,kBAAC,GAAD,CAAUtK,OAAQA,EAChCoK,OAAQA,EACRxX,UAAWA,EACXkL,SAAUA,EACVqK,iBAAkBA,MAI1B,4BAAQzO,QAAS2Q,EAAmBrX,UAAU,kDAC1C,yBAAKA,UAAU,QACX,8BACKsL,IAFT,SAMCR,EAASqB,WACN,0BAAMnM,UAAU,4CAAhB,MAGR,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,iBAEX,4BAAQA,UAAU,iBAAiB0G,QAAS0S,IACxC,8BACKP,IAFT,WAOHnB,GACG,kBAACxQ,EAAD,CAAcC,SAlKT,WACjB9C,ElBtBD,SAAoBzE,EAAWmN,EAAUC,GAC5C,8CAAO,WAAM3I,GAAN,eAAArC,EAAA,+EAE2BwT,GAAY1I,WAAWlN,EAAWmN,EAAUC,GAFvE,OAEOkE,EAFP,OAIC7M,EAyPD,CACHY,KAAM,cACNV,KA3PyB2M,IAJtB,oHAAP,sDkBqBapE,CAAWlN,EAAWmN,EAAUC,IACzCoC,KAiKgBhI,SAAUgS,GACV/R,aAAc,UAO1B,4BAAQrH,UAAU,kBACd,8BACK+Y,IAFT,U,aCxOL,SAASc,GAAT,GAA8C,IAAvBC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,UAM7BC,EAAe,CACjBjR,MAAM,GAAD,OAAKgR,EAAL,KACLnP,gBAAiBkP,EACjBG,aAAc,UACdC,UAAW,SAiBf,OARAna,qBAAU,WACN,OAAO,eAGR,IAKC,yBAAKC,UAAU,kCACX,0BAAMsG,MAhBM,CAChB6T,WAAY,SAeR,WAA+BJ,EAA/B,QACA,8BACA,yBAAK/Z,UAAU,UAAUsG,MAAO0T,KC/BrC,SAASI,GAAT,GAA2E,IAApDC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,sBAAuB1B,EAAS,EAATA,MAUpE,OARA9Y,qBAAU,WACN,OAAO,eAGR,IAKC,yBAAKC,UAAU,gBACX,yBACIC,IAAKqa,EAAKtc,GAAIgC,UAAU,yDACxB,yBAAKA,UAAU,2BACX,2BAAO2S,SAAU,kBAAM0H,EAAYC,IAAOE,QAASF,EAAK3M,UAAW1I,KAAK,WAAW6N,MAAOwH,EAAK5M,OADnG,IAC4G,2BACnG4M,EAAK5M,OAGd,4BAAQhH,QAAS,kBAAM6T,EAAsBD,KAAO,8BAAOzB,MCZpE,SAAS4B,GAAT,GAAgE,IAAvCxM,EAAsC,EAAtCA,cAAenD,EAAuB,EAAvBA,SAAUlL,EAAa,EAAbA,UAC/CiX,EAAgB5I,EAAc1N,KAD8B,EAEvBlB,oBAAS,GAFc,mBAE3Dqb,EAF2D,KAEzCC,EAFyC,OAG5Btb,mBAAS,IAHmB,mBAG3Dub,EAH2D,KAG7CC,EAH6C,OAIxBxb,qBAJwB,mBAI3Dyb,EAJ2D,KAI5CC,EAJ4C,OAKhC1b,mBAAS,GALuB,mBAK3D0a,EAL2D,KAKhDiB,EALgD,KAM5D3W,EAAWwC,cAEXgS,EAAQ,kBAAC,IAAD,CAAiBhQ,KAAMiQ,MAC/B5N,EAAY,kBAAC,IAAD,CAAiBrC,KAAMsC,MAUnCoP,EAAwB9a,uBAC1B,SAAC6a,GACG,IAAMhX,EAAQsX,EAAavK,WAAU,SAAC4K,GAAD,OAAiBA,EAAYjd,KAAOsc,EAAKtc,MAC9EqG,ErBmLL,SAA6BzE,EAAWkL,EAAUmD,EAAeiN,GACpE,8CAAO,WAAM7W,GAAN,SAAArC,EAAA,+DAQCqC,EAASyK,GANI,CACTlP,UAAWA,EACXkL,SAAUA,EACVmD,cAAeA,EACfiN,aAAcA,KANnB,kHAAP,sDqBpLiBC,CAAoBvb,EAAWkL,EAAUmD,EAAeqM,IACjE,IAAIc,EAAkBR,EACtBQ,EAAgB/X,OAAOC,EAAO,GAC9BuX,EAAc,aAAIO,MAEtB,CAACxb,EAAWkL,EAAUmD,EAAe5J,EAASuW,IAG5CS,EAAyB,WAC3BV,GAAgBD,IAIdL,EAAc,SAACC,GACjB,IAAMpM,EAAWD,EAAcV,KAAK+M,EAAKtc,IACzC+c,EAAiB7M,GACjB,IAAM5K,EAAQsX,EAAavK,WAAU,SAAC4K,GAAD,OAAiBA,EAAYjd,KAAOsc,EAAKtc,MAC9E,GAAIsc,EAAK3M,UAAW,CAChB,IAAIyN,EAAkBR,EAKtB,OAJAQ,EAAgB/X,OAAOC,EAAO,GAC9BuX,EAAc,aAAIO,IAClB/W,EAAS2J,GAAUpO,EAAWkL,EAAUmD,EAAeC,SACvDoN,IAIJT,EAAc,GAAD,oBAAKD,GAAL,gBAAwBN,MACrCjW,EAAS2J,GAAUpO,EAAWkL,EAAUmD,EAAeC,IACvDoN,KAIEA,EAAsB7b,uBACxB,WACI,IAAI8b,EAAS/c,OAAOgU,OAAOvE,EAAcV,MAAM9M,OAE3C+a,EAAyB,IADXZ,EAAana,OACK8a,EACpCE,MAAMD,GAAWR,EAAa,GAAKA,EAAaQ,EAAQE,aAE5D,CAACzN,EAAcV,KAAMqN,EAAana,SAYtC,OATAV,qBAAU,WAEN,OADAub,IACO,eAGR,CAACA,EAAqBR,EAAe7M,IAKpC,yBAAKjO,UAAU,mBACX,yBAAKA,UAAU,8CACX,yBAAKA,UAAU,qCAEX,yBAAKA,UAAU,QACVkL,GAEL,yBAAKlL,UAAU,oBACX,4BAAK6W,KAGb,uBAAG7W,UAAU,mBAAmB0G,QAnElB,WAAQrC,ErBwM/B,SAAyBzE,EAAWkL,EAAU6Q,GACjD,8CAAO,WAAMtX,GAAN,SAAArC,EAAA,+DAOCqC,EAASuK,GALI,CACThP,UAAWA,EACX+b,kBAAmBA,EACnB7Q,SAAUA,KALf,kHAAP,sDqBzM2C8Q,CAAgBhc,EAAWkL,EAAUmD,MAmEpE,WAEJ,kBAAC4L,GAAD,CAAaC,QAAQ,UAAUC,UAAWA,IAC1C,yBAAK/Z,UAAU,QACVxB,OAAOgU,OAAOvE,EAAcV,MAAM1P,KAAI,SAAAyc,GAAI,OACvC,kBAACF,GAAD,CAAana,IAAKqa,EAAKtc,GAAIqc,YAAaA,EAAaE,sBAAuBA,EAAuB1B,MAAOA,EAAOyB,KAAMA,SAG7HI,GACE,yBAAK1a,UAAU,gBACX,4BAAQ0G,QAAS2U,GAAjB,gBAGR,yBAAKrb,UAAU,qBAEP0a,GACA,kBAAC/U,EAAD,CAAYI,UAAWsV,EAAwBvV,aA1FxC,SAAC,GAAkB,IAAhB+V,EAAe,EAAfA,SACjBA,IACLxX,ErB0KD,SAA0BzE,EAAWkL,EAAUmD,EAAeR,GACjE,8CAAO,WAAMpJ,GAAN,eAAArC,EAAA,+EAEwBwT,GAAYhI,oBAAoBC,GAFxD,OAEOS,EAFP,OASC7J,EAASwK,GANI,CACTjP,UAAWA,EACXkL,SAAUA,EACVmD,cAAeA,EACf6N,QAAS5N,KAPd,oHAAP,sDqB3Ka6N,CAAiBnc,EAAWkL,EAAUmD,EAAe4N,IAC9DR,MAuFyF9a,KAAM,WAAYsF,YAAa,iBCvGzH,SAASmW,GAAT,GAAoE,IAA1ClR,EAAyC,EAAzCA,SAAUlL,EAA+B,EAA/BA,UAAWqc,EAAoB,EAApBA,iBAE5C5X,EAAWwC,cAFqD,EAInCb,cAA3BC,EAJ8D,EAI9DA,SAAUC,EAJoD,EAIpDA,aAwBlB,OARAnG,qBAAU,WACN,OAAO,eAGR,IAKC,yBAAKC,UAAU,mBACX,0BAAMqG,SAAUH,GAfN,SAAC,GAAc,IAAZqG,EAAW,EAAXA,KACjBlI,EtBoED,SAAqBzE,EAAWkL,EAAUyB,GAC7C,8CAAO,WAAMlI,GAAN,SAAArC,EAAA,+DAOCqC,EAASqK,GALI,CACT9O,UAAWA,EACXkL,SAAUA,EACVyB,KAAMA,KALX,kHAAP,sDsBrEa2P,CAAYtc,EAAWkL,EAAUyB,IAC1C0P,QAcQ,8BAAUE,aAAcrR,EAASyB,KAAMhM,KAAK,OAAOiG,IAAKP,EAAUmW,KAAK,KAAKC,KAAK,OACjF,yBAAKrc,UAAU,2BACX,4BAAQsG,MAAO,CAACsE,gBAAgB,qBAAhC,QACA,4BAAQlE,QAvBP,WACbuV,MAsBY,QCtCb,SAASK,GAAT,GAA0F,IAApEC,EAAmE,EAAnEA,cAAe/Q,EAAoD,EAApDA,UAAW5L,EAAyC,EAAzCA,UAAWkL,EAA8B,EAA9BA,SAAUmR,EAAoB,EAApBA,iBAcxE,OARAlc,qBAAU,WACN,OAAO,eAGR,IAKC,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,QACVwL,GAEL,yBAAKxL,UAAU,qBACX,4CACEuc,GACE,yBAAK7V,QAASuV,EAAkBjc,UAAU,wBACtC,2BAAI8K,EAASyB,OAGpBgQ,GACG,kBAACP,GAAD,CAAgBC,iBAAkBA,EAC9Brc,UAAWA,EAAWkL,SAAUA,MClBjD,SAAS0R,KACZ,IAAMtd,EAAQD,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aADf,EAES4H,cAA5B+B,EAFmB,EAEnBA,QAASoC,EAFU,EAEVA,OAAQqM,EAFE,EAEFA,OAClBxX,EAAYV,EAAMC,OAAOwJ,GACzBmC,EAAWlL,EAAUuC,MAAM4I,GAJP,EAKM1L,oBAAS,GALf,mBAKnB8X,EALmB,KAKRsF,EALQ,OAMqBpd,oBAAS,GAN9B,mBAMnBqd,EANmB,KAMDC,EANC,OAOiBtd,oBAAS,GAP1B,mBAOnBkd,EAPmB,KAOJK,EAPI,OAQWvd,mBAAS,CAAEqD,MAAO,KAR7B,mBAQnBma,EARmB,KAQLC,EARK,KASpBzY,EAAWwC,cACXjI,EAAU6I,cAVU,EAWkBpI,oBAAS,GAX3B,mBAWnB0d,EAXmB,KAWAC,EAXA,KAYpB/O,EAAgBzP,OAAOgU,OAAP,OAAc1H,QAAd,IAAcA,OAAd,EAAcA,EAAUI,WAZpB,EAaU7L,oBAAS,GAbnB,mBAanB4d,EAbmB,KAaNC,EAbM,KAgBpBC,EAAS,kBAAC,IAAD,CAAiBtU,KAAMuU,MAChC5R,EAAY,kBAAC,IAAD,CAAiB3C,KAAM4C,MACnCH,EAAM,kBAAC,IAAD,CAAiBzC,KAAM0C,MAC7BP,EAAS,kBAAC,IAAD,CAAiBnC,KAAMoC,MAGhCmE,EAAsB,WACxB/K,EAASyJ,IAAkB,IAC3BlP,EAAQiB,KAAR,kBAAwB8I,KAItBuO,EAAgB,WAClBuF,GAAYtF,IAiDhB,OAPApX,qBAAU,WACN,OAAO,eAER,CAACb,EAAO4L,EAASqB,YAKhB,yBAAKnM,UAAU,gBACX,0BAAM0G,QAAS0I,GACX,kBAAC6F,GAAD,OAEJ,yBAAKjV,UAAU,uBACV8K,EAASmB,WACN,kBAACiJ,GAAD,CAAWpK,SAAUA,EAAUoM,cAAeA,IAElD,yBAAKlX,UAAU,2BACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,kBACX,yBAAKsG,MAAO,CAAE+W,OAAQ,eAAiBrd,UAAU,qBAC7C,yBAAKA,UAAU,QACVmd,GAEL,yBAAKG,aAAc,kBAAMJ,GAAa,IAAOK,aAAc,kBAAML,GAAa,IAAQxW,QAAS,kBAAMsW,GAAe,IAAOhd,UAAU,UAC/H+c,GACE,yBAAK/c,UAAU,QACX,4BAAM8K,EAASpI,MAAf,KACCua,GACG,yBAAKjd,UAAU,qBACVgL,KAOpB+R,GACG,yBAAK/c,UAAU,QAEX,0BAAMqG,SA/CpB,SAACmX,GACnB,IAAM3M,EAAYgM,EAAana,MAC/B8a,EAAGC,iBACHpZ,ExBvDD,SAAyByG,EAAU+F,EAAWjR,GACjD,8CAAO,WAAMyE,GAAN,eAAArC,EAAA,sDACGuC,EAAO,CACTuG,SAAUA,EACV+F,UAAWA,EACXjR,UAAWA,GAJZ,SAOCyE,EAASoK,GAAiBlK,IAP3B,kHAAP,sDwBsDamZ,CAAgB5S,EAAU+F,EAAWjR,IAC9Cod,GAAe,KA4CqB,2BAAOvW,aAAa,MAAMkM,SA1D3C,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OAChB5S,EAAM4S,EAAOtS,KACbuS,EAAQD,EAAOC,MACrB+J,EAAa5c,GAAO6S,EACpBgK,GAAa,SAACa,GAAD,mBAAC,eACPA,GADM,IAETjb,MAAOoQ,QAoD6EvS,KAAK,QAAQsF,YAAaiF,EAASpI,MAAOuC,KAAK,UAEvG,4BAAQyB,QAAS,kBAAMsW,GAAe,KAAtC,WAGPlS,EAASqB,WACN,yBAAKnM,UAAU,mBACVsL,IAIZR,EAASsB,SACN,yBAAKpM,UAAU,qDACX,2BAAI8K,EAASsB,SACb,uBAAGpM,UAAU,cAAc0G,QA/EtC,WACjBrC,EAASkK,GAAW3O,EAAWkL,EAAU,OA8Eb,iBAIZ,6BAAS9K,UAAU,UACd8K,EAASoB,OAAOzL,OAAS,GACtB,6BACI,qCACA,yBAAKT,UAAU,QACV8K,EAASoB,OAAOrO,KAAI,SAAA8M,GACjB,OAAO,kBAACD,GAAD,CAAWzK,IAAK0K,EAAOA,MAAOA,UAOzD,6BAAS3K,UAAU,uBACf,kBAACsc,GAAD,CAAa9Q,UAAWA,EAAW+Q,cAAeA,EAAe3c,UAAWA,EAAWkL,SAAUA,EAC7FmR,iBA5GH,WACrBW,GAAmBL,OA6GH,6BAASvc,UAAU,qBACdiO,EAAcxN,OAAS,GACpBwN,EAAcpQ,KAAI,SAAAqN,GAAS,OAAI,yBAAKjL,IAAKiL,EAAUlN,IAC/C,kBAACyc,GAAD,CAAexM,cAAe/C,EAAWtL,UAAWA,EAAWkL,SAAUA,UAKzF,yBAAK9K,UAAU,cACX,yBAAKA,UAAU,gCACX,4BAAQ0G,QAAS0I,GAAjB,MAEJ,kBAAC6H,GAAD,CACIG,OAAQA,EACRxX,UAAWA,EACXkL,SAAUA,EACVyL,qBAlIK,WACzBoG,GAAoBD,IAkIAA,iBAAkBA,EAClBtN,oBAAqBA,EACrBiI,kBA5HE,WACtB,IAAMlL,EAAYrB,EAASqB,UAC3B9H,ExBsGD,SAAyBzE,EAAWkL,EAAUqB,GACjD,8CAAO,WAAM9H,GAAN,SAAArC,EAAA,+DAOCqC,EAAS0K,GALI,CACTnP,UAAWA,EACXkL,SAAUA,EACVqB,UAAWA,KALhB,kHAAP,sDwBvGayR,CAAgBhe,EAAWkL,GAAWqB,KA2H3B+K,cAAeA,EACfC,UAAWA,QC9KhC,SAAS0G,GAAT,GAAkD,IAA/Bje,EAA8B,EAA9BA,UAAWoI,EAAmB,EAAnBA,gBAC3B3D,EAAWwC,cACT6K,EAAU1L,cAAV0L,MACFpJ,EAAWL,iBAAO,MAmBxB,OARAlI,qBAAU,WAEN,OADAuI,EAASnC,QAAQC,QACV,eAGR,IAIC,yBAAKpG,UAAU,aACX,kBAAC2F,EAAD,CACIpF,KAAM,WACNqF,QAAS0C,EACTvC,UAAWiC,EACXnC,YAAa,mBACbC,aAvBS,SAACvB,GACbA,EAAK+D,WACVjE,EpCqFD,SAAoBzE,EAAW0I,GAClC,8CAAO,WAAMjE,GAAN,eAAArC,EAAA,+EAEuBsC,EAAQN,WAAWsE,GAF1C,OAEOG,EAFP,OAOCpE,EAASoB,EAJI,CACTgD,QAASA,EACT7I,UAAWA,KALhB,sDAWC4E,QAAQC,IAAI,sBAXb,8DAAP,sDoCtFaT,CAAWpE,EAAU5B,GAAIuG,EAAK+D,WACvCoJ,IACA1J,S,gGCID,SAAS8V,GAAM/e,GAClB,IAAMG,EAAQD,aAAY,SAAAC,GAAK,OAAIA,EAAMF,aACjC+O,EAAoC7O,EAApC6O,kBAAmBgQ,EAAiB7e,EAAjB6e,aAFF,EAGc1e,oBAAS,GAHvB,mBAGlBuI,EAHkB,KAGAoW,EAHA,OAIS3e,qBAJT,mBAIlBO,EAJkB,KAIPqe,EAJO,KAMjBtV,EAAY/B,cAAZ+B,QACFtE,EAAWwC,cACXqX,EAAWjW,iBAAO,MAElBkW,EAAgB1e,uBAAY,WAC9B,IAAMG,EAAYV,EAAMC,OAAOwJ,GAC/BsV,EAAare,GACbyE,EAASiB,EAAe1F,MAExB,CAACV,EAAMC,OAAQwJ,EAAStE,IAG5BtE,qBAAU,cAEP,CAACH,IAEJ,IAAMwe,EAAYC,mBAAQ,yDAAM,WAAOC,GAAP,yBAAAtc,EAAA,yDACpBgB,EAA2Csb,EAA3Ctb,YAAaD,EAA8Bub,EAA9Bvb,OAAQE,EAAsBqb,EAAtBrb,YAAagC,EAASqZ,EAATrZ,KAErCjC,EAHuB,oDAKxBA,EAAYmR,cAAgBpR,EAAOoR,aACnCnR,EAAYM,QAAUP,EAAOO,MANL,oDAStBR,EAAQlD,EAAUwC,MAAMW,EAAOoR,aAC/B3Q,EAAS5D,EAAUwC,MAAMY,EAAYmR,aAEvCrR,IAAUU,GAAoB,UAATyB,EAZG,kCAalBZ,EAASD,EAAetB,EAAOC,EAAQC,EAAaC,EAAarD,IAb/C,6CAgBf,SAATqF,EAhBwB,kCAiBlBZ,EAASF,EAASpB,EAAQC,EAAaC,EAAarD,IAjBlC,2DAoBtByE,EAASJ,EAAgBnB,EAAOC,EAAQC,EAAaC,EAAarD,EAAW4D,IApBvD,4CAAN,wDAuBpB,CAAC5D,EAAWyE,IAGZkQ,EAAgB,WAClBlQ,ErC2FJ,uCAAO,WAAMA,GAAN,SAAArC,EAAA,+DAECqC,EAwFD,CACHY,KAAM,mBA3FH,kHAAP,wDqCxFM+C,EAAkB,WACpBgW,GAAYpW,IAehB,OAXA7H,qBAAU,WAEN,OADAoe,IACO,WACH9Z,EAASiB,EAAe,QAG7B,CAAC6Y,EAAe9Z,IAEnBtE,qBAAU,WAAQsE,EAASzC,EAAc1C,MAAW,CAACA,EAAOmF,EAAUzE,IAGjEA,EAED,kBAAC,KAAD,CACIwe,UAAWA,GAEX,kBAAC,KAAD,CACIjK,YAAY,YACZoK,UAAU,aACVtZ,KAAK,OACLjF,UAAU,oBAET,SAAC0L,GACE,OACI,yBAAKlF,IAAK0X,EAAUle,UAAU,oCAC1B,yBAAKA,UAAU,mBAAmBI,IAAKC,MAAQ,YAA2BT,EAAUU,cAAtC,SAA4DH,IAAI,KAC9G,kBAACqe,GAAD,iBACQ9S,EAAS2I,eADjB,CAEI7N,IAAKkF,EAASK,WAEd,yBAAK/L,UAAU,sBACVJ,EAAUyC,UAAUxE,KAAI,SAACwR,EAAQC,GAC9B,OAAO,yBAAKrP,IAAKoP,EAAQrP,UAAU,gBAC/B,kBAACkT,GAAD,CAAM5P,MAAOgM,EAAKnN,MAAOvC,EAAUuC,MAAOvC,UAAWA,EAAWwC,MAAOxC,EAAUwC,MAAOiN,OAAQA,SAGtGzH,GACE,4BAAQlB,QAASsB,EAAiBhI,UAAU,gBAA5C,YAEH4H,GACG,kBAACiW,GAAD,CAASje,UAAWA,EAAWoI,gBAAiBA,KAGvD+V,GACG,0BAAMrX,QAAS6N,GACX,kBAACU,GAAD,OAGR,yBAAKjV,UAAU,WACX,yBAAKA,UAAS,mBAAc+d,EAAe,UAAY,GAAzC,MACV,kBAACzJ,GAAD,CAAiBC,cAAeA,EAAe3U,UAAWA,EAAWV,MAAOA,MAGnFwM,EAAS7F,aAGbkI,GACG,kBAACyO,GAAD,CAAa5c,UAAWA,SA9C7B,gBA2D3B,IAAM4e,GAAchS,IAAOC,IAAV,MC9HFgS,OAhBf,WAEE,OACE,yBAAKze,UAAU,QACb,kBAACgJ,EAAD,MAEA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO0V,UAAW/X,EAAUgY,OAAK,EAACC,KAAK,MACrC,kBAAC,IAAD,CAAOF,UAAWZ,GAAOc,KAAK,0CCFlBC,QACW,cAA7B7M,OAAO8M,SAASC,UAEe,UAA7B/M,OAAO8M,SAASC,UAEhB/M,OAAO8M,SAASC,SAASC,MACvB,2D,8BChBFC,GAAehd,EAAMf,gBAAgB,aAEpC+d,KAGDA,GAAe,CACX9f,OAAQ,CACJ,UAAW,CACPnB,GAAI,UACJuC,KAAM,aACN2B,OAAO,EACPC,MAAO,CACH,SAAU,CACNnE,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,CACP,UAAW,CACPlN,GAAI,UACJuC,KAAM,cACNgN,KAAM,CACF,SAAY,CACRvP,GAAI,WAAY0P,KAAM,WAAYC,WAAW,GAEjD,UAAa,CACT3P,GAAI,YAAa0P,KAAM,YAAaC,WAAW,KAI3D,UAAW,CACP3P,GAAI,UACJuC,KAAM,cACNgN,KAAM,CACF,SAAY,CAAEvP,GAAI,WAAY0P,KAAM,YAAc,UAAa,CAAE1P,GAAI,YAAa0P,KAAM,gBAIpGzB,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,SAAU,CACNlO,GAAI,SACJ0E,MAAO,eACP6J,KAAM,cACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,gBACP6J,KAAM,eACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,gBACP6J,KAAM,eACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,gBACP6J,KAAM,eACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,KAGhB9J,MAAO,CACH,SAAU,CACNpE,GAAI,SACJ0E,MAAO,OACPE,QAAS,CAAC,SAAU,SAAU,SAAU,WAE5C,SAAU,CACN5E,GAAI,SACJ0E,MAAO,cACPE,QAAS,CAAC,SAAU,SAAU,SAAU,WAE5C,SAAU,CACN5E,GAAI,SACJ0E,MAAO,OACPE,QAAS,CAAC,SAAU,UAAW,UAAW,aAGlDP,UAAW,CAAC,SAAU,SAAU,UAChC/B,cAAe,OACfiC,WAAW,IAAIC,MAAOC,sBAE1B,UAAW,CACPzE,GAAI,UACJuC,KAAM,eACN2B,OAAO,EACPC,MAAO,CACH,UAAW,CACPnE,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,IAEZ,UAAW,CACPlO,GAAI,UACJ0E,MAAO,mBACP6J,KAAM,kBACNrB,UAAW,GACXe,UAAW,GACXC,OAAQ,KAGhB9J,MAAO,CACH,UAAW,CACPpE,GAAI,UACJ0E,MAAO,QACPE,QAAS,CAAC,UAAW,UAAW,UAAW,YAE/C,UAAW,CACP5E,GAAI,UACJ0E,MAAO,eACPE,QAAS,CAAC,UAAW,UAAW,UAAW,aAGnDP,UAAW,CAAC,UAAW,WACvB/B,cAAe,OACfiC,WAAW,IAAIC,MAAOC,uBAI9BrD,UAAW,GACXoG,YAAa,GACbuI,mBAAmB,EACnBgQ,cAAc,IAGP,IC9OAmB,GAJKC,aAAgB,CAClCngB,UDiPa,WAAyC,IAAD,IAA9BE,EAA8B,uDAAtB+f,GAAcG,EAAQ,uCACnD,OAAQA,EAAOna,MACX,IAAK,YACD,MAAO,CACH/F,MAAOkgB,EAAOlgB,OAEtB,IAAK,cACD,OAAO,2BACAA,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEwC,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,mBAEAgd,EAAO7a,KAAKhB,YAAYvF,GAAKohB,EAAO7a,KAAKhB,oBAK9D,IAAK,eACD,OAAO,2BACArE,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEwC,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,wBAEAgd,EAAO7a,KAAKb,aAAa1F,GAAKohB,EAAO7a,KAAKb,cAF1C,eAGA0b,EAAO7a,KAAKX,cAAc5F,GAAKohB,EAAO7a,KAAKX,eAH3C,UASrB,IAAK,qBACD,OAAO,2BACA1E,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEyC,UAAU,aAAK+c,EAAO7a,KAAKV,oBAI3C,IAAK,eACD,OAAO,2BACA3E,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAKO,SAAS9G,GAFpB,eAGKohB,EAAO7a,KAAKO,cAI/B,IAAK,eACD,IAAMua,EAAYngB,EAAMC,OAExB,cADOkgB,EAAUD,EAAO7a,KAAKvG,IACtB,2BACAkB,GADP,IAEIC,OAAO,eACAkgB,KAGf,IAAK,oBACD,OAAO,2BACAngB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEW,KAAM6e,EAAO7a,KAAKxC,gBAIlC,IAAK,cACD,OAAO,2BACA7C,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAFX,2BAGKV,EAAMC,OAAOigB,EAAO7a,KAAK3E,YAH9B,IAIEwC,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,WAAWwC,OADtC,mBAEAgd,EAAO7a,KAAKkE,QAAQzK,GAAKohB,EAAO7a,KAAKkE,UAE1CpG,UAAU,GAAD,oBAAMnD,EAAMC,OAAOigB,EAAO7a,KAAK3E,WAAWyC,WAA1C,CAAqD+c,EAAO7a,KAAKkE,QAAQzK,WAIlG,IAAK,cACD,OAAO,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEoE,MAAM,eACCgd,EAAO7a,KAAKmL,UAEnBrN,UAAW+c,EAAO7a,KAAKV,mBAIvC,IAAK,YACD,OAAO,2BACA3E,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAKqO,cAFX,2BAGK1T,EAAMC,OAAOigB,EAAO7a,KAAKqO,gBAH9B,IAIEzQ,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAKqO,eAAezQ,OACxCid,EAAO7a,KAAKyO,eAEnB5Q,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAKqO,eAAexQ,OAD1C,mBAEAgd,EAAO7a,KAAKwO,WAAW/U,GAFvB,eAGMohB,EAAO7a,KAAKwO,cAGvB1Q,UAAU,GAAD,oBAAMnD,EAAMC,OAAOigB,EAAO7a,KAAKqO,eAAevQ,WAA9C,CAAyD+c,EAAO7a,KAAKwO,WAAW/U,WAKzG,IAAK,YACD,OAAO,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEmE,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OACvCid,EAAO7a,KAAKkM,aAEnBrO,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,mBAEAgd,EAAO7a,KAAKiM,WAAWxS,GAFvB,eAGMohB,EAAO7a,KAAKiM,cAGvBnO,UAAW+c,EAAO7a,KAAKV,mBAKvC,IAAK,mBACD,OAAO,2BACA3E,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEoE,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,mBAEAgd,EAAO7a,KAAKwI,SAAS/O,GAFrB,eAGMohB,EAAO7a,KAAKwI,kBAOvC,IAAK,kBACD,OAAO,2BACA7N,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEsC,cAAe8e,EAAO7a,KAAKa,aAK3C,IAAK,mBACD,OAAO,2BACAlG,GADP,IAEIsG,YAAa4Z,EAAO5Z,YAAYxH,KAExC,IAAK,cAED,OADAwG,QAAQC,IAAI,WACL,2BACAvF,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEmE,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAK6I,QAAQpP,GAAKohB,EAAO7a,KAAK6I,UAE1ChL,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,mBAEAgd,EAAO7a,KAAKwI,SAAS/O,GAFrB,2BAGMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAKwI,SAAS/O,KAHxE,IAIG4E,QAAQ,GAAD,oBACA1D,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAKwI,SAAS/O,IAAI4E,SADtE,CAC+Ewc,EAAO7a,KAAK6I,QAAQpP,eAQlI,IAAK,YACD,OAAO,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEmE,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKkR,WAAWzX,GAAKohB,EAAO7a,KAAKkR,aAE7CrT,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,mBAEAgd,EAAO7a,KAAKmR,aAFZ,2BAGMxW,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAKmR,eAH/D,IAIG9S,QAAQ,GAAD,oBAAM1D,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAKmR,cAAc9S,SAA7E,CAAsFwc,EAAO7a,KAAKkR,WAAWzX,eAM5I,IAAK,iBACD,OAAO,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEmE,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAE+BohB,EAAO7a,KAAKuG,UAF3C,IAEqDpI,MAAO0c,EAAO7a,KAAKsM,oBAM7F,IAAK,YACD,OAAO,2BACA3R,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEoE,MAAM,2BACClD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,OADzC,wBAEAgd,EAAO7a,KAAKwI,SAAS/O,GAFrB,2BAGMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAKwI,SAAS/O,KAHxE,IAIG4E,QAAS1D,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAKwI,SAAS/O,IAAI4E,QAAQqK,QAAO,SAAAD,GAAM,OAAIA,IAAWoS,EAAO7a,KAAKuG,SAAS9M,SAJ3I,eAMAohB,EAAO7a,KAAK0R,aANZ,2BAOM/W,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAK0R,eAP/D,IAQGrT,QAAQ,GAAD,oBAAM1D,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAIoE,MAAMgd,EAAO7a,KAAK0R,cAAcrT,SAA7E,CAAsFwc,EAAO7a,KAAKuG,SAAS9M,QARrH,UAcrB,IAAK,cACD,OAAO,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEwC,MAAM,2BACCgd,EAAO7a,KAAK3E,UAAUwC,OADxB,mBAEAgd,EAAO7a,KAAKwI,SAAS/O,GAAKohB,EAAO7a,KAAKwI,iBAQ3D,IAAK,WACD,OAAO,2BACA7N,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGuO,KAAM6S,EAAO7a,KAAKgI,eAO1C,IAAK,YACD,OAAO,2BACArN,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,KAHxC,IAIEmE,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkO,OAAO,GAAD,oBAAMhN,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkO,QAA5E,CAAoFkT,EAAO7a,KAAKgV,uBAM9H,IAAK,gBACD,OAAO,2BACAra,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkO,OAAQkT,EAAO7a,KAAK+U,uBAO5C,IAAK,oBACD,OAAO,2BACApa,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGmO,UAAWiT,EAAO7a,KAAK4H,oBAM/C,IAAK,oBACD,IAAMmT,EAAgBpgB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAAUkU,EAAO7a,KAAK0J,cAAcjQ,IAAIuP,KAAK6R,EAAO7a,KAAK2J,SAASlQ,IAAI2P,UAClK,OAAO,2BACAzO,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkN,UAAU,2BACHhM,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,WADpE,mBAEJkU,EAAO7a,KAAK0J,cAAcjQ,GAFtB,2BAGEkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAAUkU,EAAO7a,KAAK0J,cAAcjQ,KAH5G,IAIDuP,KAAK,2BACErO,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAAUkU,EAAO7a,KAAK0J,cAAcjQ,IAAIuP,MADjH,mBAEC6R,EAAO7a,KAAK2J,SAASlQ,GAFtB,2BAGOkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAAUkU,EAAO7a,KAAK0J,cAAcjQ,IAAIuP,KAAK6R,EAAO7a,KAAK2J,SAASlQ,KAH/I,IAII2P,WAAY2R,oBAYpD,IAAK,eACD,OAAO,2BACApgB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGoO,QAASgT,EAAO7a,KAAK6H,kBAQ7C,IAAK,mBACD,OAAO,2BACAlN,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkN,UAAU,2BAAMhM,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,WAA7E,mBAAyFkU,EAAO7a,KAAKmV,cAAc1b,GAAKohB,EAAO7a,KAAKmV,0BAMrK,IAAK,qBACD,OAAO,2BACAxa,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkN,UAAU,2BACHhM,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,WADpE,mBAEJkU,EAAO7a,KAAK0J,cAAcjQ,GAFtB,2BAGEkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAAUkU,EAAO7a,KAAK0J,cAAcjQ,KAH5G,IAIDuP,KAAK,2BAAMrO,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAAUkU,EAAO7a,KAAK0J,cAAcjQ,IAAIuP,MAArH,mBAA4H6R,EAAO7a,KAAKuX,QAAQ9d,GAAKohB,EAAO7a,KAAKuX,wBAQrM,IAAK,wBACD,IAAMyD,EAAqBrgB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAChGkU,EAAO7a,KAAK0J,cAAcjQ,IAG3B,cAFOuhB,EAAmBhS,KAAK6R,EAAO7a,KAAK2W,aAAald,IAEjD,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkN,UAAU,2BACHhM,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,WADpE,mBAEJkU,EAAO7a,KAAK0J,cAAcjQ,GAAKuhB,cAQ5D,IAAK,mBACD,IAAM9F,EAAeva,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,IAAIkN,UAE3F,cADOuO,EAAa2F,EAAO7a,KAAKoX,kBAAkB3d,IAC3C,2BACAkB,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAIMkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAJxE,IAKGkN,UAAWuO,YAQnC,IAAK,aACD,OAAO,2BACAva,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7a,KAAK3E,UAAU5B,GAFrB,2BAGKohB,EAAO7a,KAAK3E,WAHjB,IAIEuC,MAAM,2BACCjD,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,OADzC,mBAEAid,EAAO7a,KAAKuG,SAAS9M,GAFrB,2BAGQkB,EAAMC,OAAOigB,EAAO7a,KAAK3E,UAAU5B,IAAImE,MAAMid,EAAO7a,KAAKuG,SAAS9M,KAH1E,IAG+EiO,UAAWmT,EAAO7a,KAAK8J,gBAQ3H,IAAK,mBACD,OAAO,2BACAnP,GADP,IAEIsgB,WAAYJ,EAAO7a,OAE3B,IAAK,sBACD,OAAO,2BACArF,GADP,IAEI6O,kBAAmBqR,EAAO7a,OAElC,IAAK,iBACD,OAAO,2BACArF,GADP,IAEI6e,cAAe7e,EAAM6e,eAE7B,IAAK,mBACD,OAAO,2BACA7e,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAO7U,WAAWvM,GAFjB,2BAGKkB,EAAMC,OAAOigB,EAAO7U,WAAWvM,KAHpC,IAIEkE,OAAQhD,EAAMC,OAAOigB,EAAO7U,WAAWvM,IAAIkE,UAGnD9C,UAAU,GAAD,oBAAMF,EAAME,WAAZ,CAAuBggB,EAAO7U,WAAWvM,OAG1D,IAAK,qBACD,IAAMsF,EAAQpE,EAAME,UAAUiR,WAAU,SAAC9K,GAAD,OAAaA,IAAY6Z,EAAOla,cAAclH,MACtFkB,EAAME,UAAUiE,OAAOC,EAAO,GAC9B,IAAMmc,EAAevgB,EAAME,UAC3B,OAAO,2BACAF,GADP,IAEIC,OAAO,2BACAD,EAAMC,QADP,mBAEDigB,EAAOla,cAAclH,GAFpB,2BAGKkB,EAAMC,OAAOigB,EAAOla,cAAclH,KAHvC,IAIEkE,OAAQhD,EAAMC,OAAOigB,EAAOla,cAAclH,IAAIkE,UAGtD9C,UAAWqgB,IAInB,IAAK,YAED,OADAjb,QAAQC,IAAI,SAAUvF,GACf,eACAA,GAGX,QACI,OAAOA,ME1yBbwgB,GAAmB1N,OAAO2N,sCAAwCC,KAOzDC,GALDC,aACZZ,GACAQ,GAAiBK,aAAgBC,QCFnCC,IAASC,OACP,kBAAC,IAAD,CAAUrd,MAAOA,IACf,kBAAC,IAAMsd,WAAP,KACE,kBAAC,IAAD,CAAQvhB,QAASA,GACf,kBAAC,GAAD,SAINwhB,SAASC,eAAe,SJmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrc,QAAQqc,MAAMA,EAAMC,c","file":"static/js/main.5b1f7f44.chunk.js","sourcesContent":["var map = {\n\t\"./boraBora.jpg\": 31,\n\t\"./lake.jpg\": 32,\n\t\"./mountains.jpg\": 33,\n\t\"./pink.jpg\": 62,\n\t\"./purple_nature.jpg\": 34,\n\t\"./sky.jpg\": 35,\n\t\"./water.jpg\": 36\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","module.exports = __webpack_public_path__ + \"static/media/boraBora.989f4a87.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lake.c140c866.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mountains.736266ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/purple_nature.72bb8802.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sky.cc4c0d26.jpg\";","module.exports = __webpack_public_path__ + \"static/media/water.d264abfb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pink.7e9ebd14.jpg\";","import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\nexport function BoardList(props) {\r\n    const mainStore = useSelector(state => state.mainStore)\r\n    const { boards, favBoards } = mainStore\r\n    const [boardList, setBoardList] = useState('')\r\n\r\n\r\n\r\n    const getAllBoards = useCallback(\r\n        () => {\r\n            const allBoards = []\r\n            for (const board in boards) {\r\n                const currBoard = boards[board];\r\n                allBoards.push(currBoard)\r\n            }\r\n            return allBoards\r\n        },\r\n        [boards],\r\n    )\r\n\r\n\r\n    const init = useCallback(\r\n        () => {\r\n            setBoardList(getAllBoards())\r\n        },\r\n        [getAllBoards],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        init()\r\n    }, [init])\r\n\r\n\r\n\r\n    if (!boardList) return 'LOADING...'\r\n    return (\r\n        <div className=\"board-list \">\r\n            <h2>All Boards</h2>\r\n            <div className=\"board-list-container justify-center flex wrap\">\r\n                {boardList.map(board => {\r\n                    return <div className=\"container margin-center flex\" key={board.id}>\r\n                        <div className=\"boards flex\">\r\n                            <Link to={`boards/${board.id}`}><img\r\n                                alt=\"board\"\r\n                                src={require(`../../assets/images/bgs/${board.backgroundImg}.jpg`)}></img>\r\n                                <p>{board.name}</p>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div className=\"fav-boards \">\r\n                <h2>Favorite Boards</h2>\r\n                <div className=\"fav-boards-container flex wrap\">\r\n                    {favBoards && favBoards.map(board => {\r\n                        const currBoard = boards[board]\r\n                        return <div className=\"container margin-center \" key={board}>\r\n                            <div className=\"boards flex \">\r\n                                <Link to={`boards/${board}`}>\r\n                                    <img\r\n                                        alt=\"boards\"\r\n                                        src={require(`../../assets/images/bgs/${currBoard.backgroundImg}.jpg`)}></img>\r\n                                    <p>{currBoard.name}</p>\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nfunction getRandomIntInclusive(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    const final = Math.floor(Math.random() * (max - min + 1)) + min;\r\n    return final\r\n}\r\n\r\nfunction generatePassword(length) {\r\n    var charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\r\n        retVal = \"\";\r\n    for (var i = 0, n = charset.length; i < length; ++i) {\r\n        retVal += charset.charAt(Math.floor(Math.random() * n));\r\n    }\r\n    return retVal;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    localStorage.setItem(key, JSON.stringify(val))\r\n}\r\n\r\nfunction loadFromStorage(key) {\r\n    var val = localStorage.getItem(key)\r\n    return JSON.parse(val)\r\n}\r\nexport default {\r\n    generatePassword,\r\n    loadFromStorage,\r\n    getRandomIntInclusive,\r\n    saveToStorage,\r\n}\r\n","// const UTILS = require('./utils')\r\nimport UTILS from './utils'\r\nconst KEY = 'mainStore'\r\n\r\nasync function createBoard(boardName) {\r\n  return {\r\n    id: UTILS.generatePassword(4),\r\n    name: boardName,\r\n    isFav: false,\r\n    cards: {\r\n\r\n    },\r\n    lists: {\r\n\r\n    },\r\n    listOrder: [],\r\n    backgroundImg: 'sky',\r\n    navBarTheme: 'bright',\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function createCard(title) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: title,\r\n    content: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\nasync function createList(title) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: title,\r\n    cardIds: [],\r\n    createdAt: new Date().toLocaleDateString()\r\n\r\n  }\r\n}\r\n\r\nasync function saveToStorage(store) {\r\n  UTILS.saveToStorage(KEY, store)\r\n}\r\n\r\nasync function updateList(start, source, destination, draggableId) {\r\n  const newCardIds = Array.from(start.cardIds)\r\n  newCardIds.splice(source.index, 1)\r\n  newCardIds.splice(destination.index, 0, draggableId)\r\n  const updatedList = {\r\n    ...start,\r\n    cardIds: newCardIds\r\n  }\r\n  return updatedList\r\n}\r\n\r\nasync function dragOutsideList(start, source, destination, draggableId, finish) {\r\n  const startCardIds = start.cardIds\r\n  startCardIds.splice(source.index, 1);\r\n\r\n  const newStartList = {\r\n    ...start,\r\n    cardIds: startCardIds\r\n  }\r\n\r\n  const finishCardIds = finish.cardIds\r\n  finishCardIds.splice(destination.index, 0, draggableId);\r\n  const newFinishList = {\r\n    ...finish,\r\n    cardIds: finishCardIds\r\n  }\r\n  return {\r\n    newStartList: newStartList,\r\n    newFinishList: newFinishList\r\n  }\r\n}\r\nasync function dragList(source, destination, draggableId, currBoard) {\r\n\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(source.index, 1)\r\n  newListOrder.splice(destination.index, 0, draggableId)\r\n  return newListOrder\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default {\r\n  saveToStorage,\r\n  createBoard,\r\n  createCard,\r\n  createList,\r\n  dragOutsideList,\r\n  updateList,\r\n  dragList\r\n}\r\n","import service from '../../service/boardService'\r\n\r\n\r\nexport function dragInsideList(start, source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedList = await service.updateList(start, source, destination, draggableId)\r\n            const data = {\r\n                updatedList: updatedList,\r\n                currBoard: currBoard\r\n            }\r\n            console.log('currBoard', currBoard)\r\n            dispatch(_dragInsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragOutsideList(start, source, destination, draggableId, currBoard, finish) {\r\n    return async dispatch => {\r\n        try {\r\n            const res = await service.dragOutsideList(start, source, destination, draggableId, finish)\r\n            const data = {\r\n                newStartList: res.newStartList,\r\n                newFinishList: res.newFinishList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragOutsideList(data));\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function dragList(source, destination, draggableId, currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            const newListOrder = await service.dragList(source, destination, draggableId, currBoard)\r\n            const data = {\r\n                newListOrder: newListOrder,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_dragList(data));\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createBoard(boardName = \"New Board\") {\r\n    return async dispatch => {\r\n        try {\r\n            const newBoard = await service.createBoard(boardName)\r\n            const data = {\r\n                newBoard: newBoard,\r\n            }\r\n            dispatch(_createBoard(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteBoard(boardToDelete) {\r\n    return async dispatch => {\r\n        try {\r\n\r\n            dispatch(_deleteBoard(boardToDelete))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeBoardName(currBoard, boardName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                boardName: boardName\r\n            }\r\n            dispatch(_changeBoardName(data))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function createList(currBoard, listName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await service.createList(listName)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_createList(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function favoriteBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_favoriteBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeSavedBoard(currBoard) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_removeSavedBoard(currBoard))\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeBoardBackground(currBoard, bgName) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                bgName: bgName,\r\n                currBoard: currBoard\r\n            }\r\n            dispatch(_changeBoardBg(data))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function setActiveBoard(boardId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setActiveBoard(boardId))\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function saveToStorage(store) {\r\n    return async dispatch => {\r\n        try {\r\n            await service.saveToStorage(store)\r\n\r\n        }\r\n        catch (err) {\r\n            console.log('there was an error')\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _setActiveBoard(activeBoard) {\r\n    return {\r\n        type: 'SET_ACTIVE_BOARD',\r\n        activeBoard\r\n    }\r\n}\r\n\r\n\r\nfunction _dragInsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _dragOutsideList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS',\r\n        data\r\n    }\r\n}\r\nfunction _dragList(data) {\r\n    return {\r\n        type: 'UPDATE_LISTS_ORDER',\r\n        data\r\n    }\r\n}\r\nfunction _createList(data) {\r\n\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardBg(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_BG',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}\r\nfunction _favoriteBoard(savedBoard) {\r\n    return {\r\n        type: 'TOGGLE_FAV_BOARD',\r\n        savedBoard\r\n    }\r\n}\r\nfunction _removeSavedBoard(boardToRemove) {\r\n    return {\r\n        type: 'REMOVE_SAVED_BOARD',\r\n        boardToRemove\r\n    }\r\n}\r\nfunction _createBoard(data) {\r\n    return {\r\n        type: 'CREATE_BOARD',\r\n        data\r\n    }\r\n}\r\nfunction _changeBoardName(data) {\r\n    return {\r\n        type: 'CHANGE_BOARD_NAME',\r\n        data\r\n    }\r\n}\r\nfunction _deleteBoard(data) {\r\n    return {\r\n        type: 'DELETE_BOARD',\r\n        data\r\n    }\r\n}","import React, { useEffect} from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nexport function ActionForm({ currRef, placeholder, name, onSubmitFunc, toggleAdd }) {\r\n    // const currRef = useRef(null);\r\n    const { register, handleSubmit } = useForm();\r\n\r\n    useEffect(() => {\r\n        \r\n        currRef.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [currRef])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"action-form\">\r\n            <form onSubmit={handleSubmit(onSubmitFunc)}>\r\n                <div className=\"flex column\">\r\n                    <input name={name} type=\"text\"\r\n                        style={{ resize: \"none\" }}\r\n                        ref={(e) => {\r\n                            register(e)\r\n                            currRef.current = e\r\n                        }} placeholder={placeholder}\r\n                        autoComplete=\"off\"\r\n                    />\r\n                    <div className=\"btns-section flex space-between\">\r\n                        <button className=\"add-btn\" >Add</button>\r\n                        <button onClick={toggleAdd} >X</button>\r\n                    </div>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BoardList } from '../../cmps/BoardList/BoardList'\r\nimport { useParams } from 'react-router-dom'\r\nimport { setActiveBoard, saveToStorage } from '../../store/actions/boardActions'\r\nimport { createBoard } from '../../store/actions/boardActions';\r\nimport { ActionForm } from '../../cmps/ActionForm/ActionForm';\r\n\r\nexport function HomePage(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { id } = useParams();\r\n    const currBoard = state.boards[id]\r\n    const dispatch = useDispatch()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        const title = data.boardTitle\r\n        if (!title) return\r\n        dispatch(createBoard(title))\r\n        onToggleAddBoard()\r\n    }\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(setActiveBoard(''))\r\n\r\n        return () => {\r\n        }\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"home-page margin-center\">\r\n            <div className=\"center-container margin-center\">\r\n                <div className=\"flex align-center space-between\">\r\n                    <h1>CHOOSE YOUR BOARD</h1>\r\n\r\n                    <div className=\"add-board-section flex\">\r\n                        {!isAddBoardVis &&\r\n                            <button onClick={onToggleAddBoard} className=\"create-board\">Create Board</button>\r\n                        }\r\n                        {isAddBoardVis &&\r\n                            <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'} toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} />\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"borad-list-container flex justify-center\">\r\n                    <div className=\"side-bar\">\r\n                    </div>\r\n                    <section className=\"board-list-section\">\r\n                        <BoardList />\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import boardService from '../../service/boardService';\r\n\r\nexport function createList(currBoard, listTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newList = await boardService.createList(listTitle)\r\n            const data = {\r\n                newList: newList,\r\n                currBoard: currBoard,\r\n            }\r\n            dispatch(_createList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n\r\n}\r\nexport function toggleBgSide() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleBgSide());\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction _createList(data) {\r\n    return {\r\n        type: 'CREATE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _toggleBgSide() {\r\n    return {\r\n        type: 'TOGGLE_BG_SIDE',\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport function DeleteVerify({ onDelete, onToggle,itemToDelete }) {\r\n\r\n    return (\r\n        <div className=\"delete-verify\">\r\n            <div className=\"main-content-delete flex column\">\r\n                <p>Delete this {itemToDelete}?</p>\r\n                <div className=\"btns flex space-between\">\r\n\r\n                    <button className=\"dlt-btn\" onClick={onDelete}>Delete</button>\r\n                    <button onClick={onToggle}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createList } from '../../../store/actions/headerActions'\r\nimport { createBoard, changeBoardName, deleteBoard } from '../../../store/actions/boardActions';\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useHistory } from 'react-router';\r\nimport { DeleteVerify } from '../../CardDetails/DeleteVerify/DeleteVerify';\r\n\r\nexport function AppHeaderMenu({ onRemoveSavedBoard, activeBoard, onToggleAppHeaderMenu, currBoard }) {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [isAddBoardVis, setAddBoardVis] = useState(false)\r\n    const [isChangeNameVis, setChangeName] = useState(false)\r\n    const [isAddListVisible, setAddListVisibility] = useState(false)\r\n    const [isDeleteVerify, setDeleteVerify] = useState(false)\r\n    const onToggleAddList = () => {\r\n        setAddListVisibility(!isAddListVisible)\r\n    }\r\n    const currRef = useRef(null);\r\n\r\n    const onAddList = ({ listName }) => {\r\n        dispatch(createList(activeBoard, listName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onCreateBoard = (data) => {\r\n        dispatch(createBoard(data.boardTitle))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onToggleAddBoard = () => {\r\n        setAddBoardVis(!isAddBoardVis)\r\n    }\r\n\r\n    const onToggleBoardName = () => {\r\n        setChangeName(!isChangeNameVis)\r\n    }\r\n\r\n    const onChangeBoardName = (data) => {\r\n        dispatch(changeBoardName(currBoard, data.boardName))\r\n        onToggleAppHeaderMenu()\r\n    }\r\n\r\n\r\n    const onDeleteBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch(onRemoveSavedBoard(currBoard))\r\n        }\r\n        onToggleAppHeaderMenu()\r\n        dispatch(deleteBoard(currBoard))\r\n        history.push('/')\r\n    }\r\n\r\n\r\n    const onToggleDleteBoard = () => {\r\n        setDeleteVerify(!isDeleteVerify)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"app-header-menu\">\r\n            <div className=\"container\">\r\n                <div className=\"title flex justify-center\">\r\n                    <h3>Board Actions</h3>\r\n                </div>\r\n                <hr />\r\n                <div className=\"menu-actions\">\r\n                    {!isChangeNameVis &&\r\n                        <p onClick={onToggleBoardName}>Change Board Name...</p>\r\n                    }\r\n\r\n                    {isChangeNameVis &&\r\n                        <ActionForm name=\"boardName\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleBoardName} onSubmitFunc={onChangeBoardName} currRef={currRef}/>\r\n                    }\r\n                    {!isAddBoardVis &&\r\n                        <p onClick={onToggleAddBoard}>Create Board...</p>\r\n                    }\r\n                    {isAddBoardVis &&\r\n                        <ActionForm name=\"boardTitle\" placeholder={'Add Board Title'}\r\n                            toggleAdd={onToggleAddBoard} onSubmitFunc={onCreateBoard} currRef={currRef} />\r\n                    }\r\n                    {!isDeleteVerify &&\r\n                        <p onClick={onToggleDleteBoard}>Delete Board...</p>\r\n                    }\r\n\r\n                    {isDeleteVerify &&\r\n                        <DeleteVerify itemToDelete={'board'} onToggle={onToggleDleteBoard} onDelete={onDeleteBoard} />\r\n                    }\r\n                    {!isAddListVisible &&\r\n                        <p onClick={onToggleAddList}>Add List...</p>\r\n                    }\r\n                    {isAddListVisible &&\r\n                        <ActionForm name=\"listName\" placeholder={'Add list Title'}\r\n                            currRef={currRef} toggleAdd={onToggleAddList} onSubmitFunc={onAddList} />\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nexport function BoardsMenu({ currBoard }) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const boards = Object.keys(state.boards)\r\n    const boardid = currBoard.id\r\n    const check = <FontAwesomeIcon icon={faCheck} />\r\n\r\n\r\n    if (!boardid) return '...loading'\r\n    return (\r\n        <div className=\"boards-menu\">\r\n            <div className=\"flex column align-center space-between\">\r\n                {boards.map(board => {\r\n                    const currBoard = state.boards[board];\r\n                    return <Link key={board} to={`/boards/${board}`} >\r\n                        <div className=\"board-name flex\">\r\n                            <img style={{ width: '30px' }} src={require(`../../../assets/images/bgs/${currBoard.backgroundImg}.jpg`)} alt=\"board-background\" />\r\n                            <p key={board}>{currBoard.name}</p>\r\n                            {boardid === currBoard.id ? <span className=\"check\">{check}</span> : ''}\r\n                        </div>\r\n                    </Link>\r\n                }\r\n\r\n\r\n                )}\r\n            </div>\r\n        </div >\r\n    )\r\n\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { toggleBgSide } from '../../store/actions/headerActions'\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { favoriteBoard, removeSavedBoard } from '../../store/actions/boardActions'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBorderAll } from '@fortawesome/free-solid-svg-icons'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { AppHeaderMenu } from './AppHeaderMenu/AppHeaderMenu';\r\nimport { BoardsMenu } from './BoardsMenu/BoardsMenu'\r\n\r\n\r\nexport function AppHeader(props) {\r\n\r\n    const state = useSelector(state => state.mainStore)\r\n    const { activeBoard } = state\r\n    const currBoard = state.boards[activeBoard]\r\n    const [navBarTheme, setTheme] = useState()\r\n    const bottomNav = currBoard?.bottomNav\r\n    const [isBgBoardOpen, setIsBgBoardOpen] = useState(false)\r\n    const [isHeaderMenuVisible, setHeaderMenu] = useState(false)\r\n    const [showSavedTitle, setSaved] = useState(false)\r\n    const [isBoardsMenuVis, setBoardsMenuVis] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const home = <FontAwesomeIcon icon={faHome} />\r\n    const boards = <FontAwesomeIcon icon={faBorderAll} />\r\n    const plusSign = <FontAwesomeIcon icon={faPlus} />\r\n    const info = <FontAwesomeIcon icon={faInfoCircle} />\r\n    const notifications = <FontAwesomeIcon icon={faBell} />\r\n    const star = <FontAwesomeIcon icon={faStar} />\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        setIsBgBoardOpen(!isBgBoardOpen)\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onSaveBoard = () => {\r\n        if (currBoard.isFav) {\r\n            dispatch(removeSavedBoard(currBoard))\r\n            return\r\n        }\r\n        dispatch(favoriteBoard(currBoard))\r\n        setSaved(true)\r\n        setTimeout(() => {\r\n            onHideSave()\r\n\r\n        }, 500);\r\n    }\r\n\r\n    const onHideSave = () => {\r\n        setSaved(false)\r\n    }\r\n\r\n\r\n    const onToggleAppHeaderMenu = () => {\r\n        setHeaderMenu(!isHeaderMenuVisible)\r\n    }\r\n\r\n    const onToggleBoardsMenu = () => {\r\n        setBoardsMenuVis(!isBoardsMenuVis)\r\n    }\r\n\r\n    useEffect(() => {\r\n        activeBoard ? setTheme('') : setTheme('dark')\r\n        return () => {\r\n        }\r\n    }, [activeBoard])\r\n\r\n    return (\r\n        <nav className={`app-header flex column ${navBarTheme}`}>\r\n            <div className={`top-part flex ${navBarTheme}`}>\r\n                <div className=\"nav-tools flex space-between align-center\">\r\n                    <div className=\"left-side flex align-center\">\r\n                        {currBoard &&\r\n                            <Link to=\"/\"><button className=\"home\" onClick={() => setBoardsMenuVis(false)}>{home}</button></Link>\r\n                        }\r\n                        {currBoard &&\r\n                            <button onClick={onToggleBoardsMenu}>{boards} <span className=\"desktop-boards\">Boards</span> </button>\r\n                        }\r\n                        {isBoardsMenuVis &&\r\n                            <div>\r\n                                <BoardsMenu currBoard={currBoard} />\r\n\r\n                            </div>\r\n                        }\r\n                        <input type=\"text\" placeholder=\"SEARCH...\" />\r\n                    </div>\r\n                    <div className=\"logo\">\r\n                        <h1>TaskForce</h1>\r\n                    </div>\r\n                    <div className=\"right-side flex align-center\">\r\n                        {currBoard &&\r\n                            <button onClick={onToggleAppHeaderMenu}>{plusSign}</button>\r\n                        }\r\n                        <button>{info}</button>\r\n                        <button>{notifications}</button>\r\n                        <button>account</button>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            {activeBoard && currBoard &&\r\n                <div className={`bottom-nav flex align-center ${bottomNav}`}>\r\n                    <h1> {currBoard.name}</h1>\r\n                    <button className=\"btn\" onClick={toggleBgBoard}>Change Background</button>\r\n                    <button onClick={onSaveBoard} className={`btn btn-fav-board ${currBoard?.isFav ? 'saved' : ''}`}>{star}</button>\r\n                    <p>Total Lists: {currBoard.listOrder.length}</p>\r\n                    {showSavedTitle &&\r\n                        <p className=\"save-notification\">saved!</p>\r\n                    }\r\n                    {isHeaderMenuVisible &&\r\n                        <AppHeaderMenu\r\n                            onRemoveSavedBoard={removeSavedBoard}\r\n                            currBoard={currBoard}\r\n                            activeBoard={activeBoard}\r\n                            onToggleAppHeaderMenu={onToggleAppHeaderMenu} />\r\n                    }\r\n                </div>\r\n            }\r\n        </nav >\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport function CardLabel({ label }) {\r\n    return (\r\n        <div style={{ backgroundColor: `${label}` }} className=\"card-label\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt, faTasks, faClock, faEye, faClipboardList } from '@fortawesome/free-solid-svg-icons'\r\nimport { CardLabel } from '../CardDetails/CardLabel/CardLabel'\r\nexport function CardPreview(props) {\r\n\r\n    const { cards, cardid, } = props\r\n    const currCard = cards[cardid]\r\n\r\n    const pencil = <FontAwesomeIcon icon={faPencilAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    if (!currCard) return 'loading...'\r\n    return (\r\n        <Draggable draggableId={currCard?.id} index={props.index}>\r\n            {(provided, snapshot) => (\r\n                <div>\r\n                    <MainContainer\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n                        <div className=\"card-preview flex column\">\r\n                            {currCard.cardCover &&\r\n                                <div style={{ backgroundColor: `${currCard.cardCover}` }} className=\"card-top-cover\">\r\n                                </div>\r\n                            }\r\n                            <div className=\"card-labels flex\">\r\n\r\n                                {currCard.labels && currCard.labels.map(label => {\r\n                                    return <CardLabel key={label} label={label} />\r\n                                })}\r\n                            </div>\r\n                            <div className=\"main-card-preview-content\">\r\n\r\n                                <div className=\"top-section flex space-between\">\r\n                                    <div className=\"title\">\r\n                                        <p>{currCard?.title}</p>\r\n                                    </div>\r\n                                    <span className=\"edit\" >{pencil}</span>\r\n                                </div>\r\n                                <div className=\"indicators flex align-center\">\r\n                                    {currCard.isWatched &&\r\n                                        eye\r\n                                    }\r\n                                    {currCard.dueDate &&\r\n                                        <span className=\"flex align-center\">\r\n                                            {clock}\r\n                                            <p style={{ fontSize: '10px' }}>\r\n\r\n                                                {currCard.dueDate.substring(4, 10)}\r\n                                            </p>\r\n                                        </span>\r\n                                    }\r\n                                    {currCard.desc &&\r\n                                        clipBoard\r\n                                    }\r\n                                    {Object.keys(currCard.checklist).length > 0 &&\r\n                                        checklist\r\n                                    }\r\n\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </MainContainer>\r\n                </div>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\n\r\nconst MainContainer = styled.div`\r\n\r\nwidth:100%;\r\n`;","import UTILS from '../service/utils'\r\n\r\n\r\n\r\n\r\nfunction deleteCard(currBoard, currList, cardId) {\r\n  const newCards = currBoard.cards\r\n  delete newCards[cardId]\r\n\r\n  const newCardIds = currList.cardIds.filter((cardsId) => cardsId !== cardId)\r\n  currList.cardIds = newCardIds\r\n\r\n  return { currBoard: currBoard, currList: currList, cardId }\r\n}\r\n\r\n\r\n\r\nfunction copyCard(newCard) {\r\n  return new CopyCard(newCard)\r\n}\r\n\r\n\r\nfunction CopyCard(cardToCopy) {\r\n    this.id = UTILS.generatePassword(5);\r\n    this.title = cardToCopy.title;\r\n    this.description = cardToCopy.description;\r\n    this.cardCover = cardToCopy.cardCover;\r\n    this.checklist = cardToCopy.checklist;\r\n    this.isWatched = false;\r\n    this.dueDate = cardToCopy.dueDate;\r\n    this.labels = cardToCopy.labels;\r\n    this.createdAt = new Date().toLocaleDateString()\r\n}\r\n\r\nfunction createCheckList(checkListName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    name: checkListName,\r\n    list: {},\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCheckListItem(itemName) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    text: itemName,\r\n    isChecked: false,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\nfunction removeLabel(currCard, labelIndex) {\r\n  currCard.labels.splice(labelIndex, 1)\r\n  const newLabelList = currCard.labels\r\n  return newLabelList\r\n}\r\n\r\n\r\n\r\nexport default {\r\n  deleteCard,\r\n  copyCard,\r\n  createCheckList,\r\n  createCheckListItem,\r\n  removeLabel\r\n}","import cardService from '../../service/cardService';\r\n\r\nexport function toggleCardDetails(isCardDetailShown) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_toggleCardDetails(isCardDetailShown));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function updateCurrList(listId) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateCurrList(listId));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeCardTitle(currCard, cardTitle, currBoard) {\r\n    return async dispatch => {\r\n        const data = {\r\n            currCard: currCard,\r\n            cardTitle: cardTitle,\r\n            currBoard: currBoard\r\n        }\r\n        try {\r\n            dispatch(_changeCardTitle(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function deleteCard(currBoard, currList, cardId) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await cardService.deleteCard(currBoard, currList, cardId)\r\n\r\n            dispatch(_deleteCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function copyCard(currBoard, copyToList, cardToCopy) {\r\n    console.log('cardToCopy:', cardToCopy)\r\n    return async dispatch => {\r\n        try {\r\n            const copiedCard = await cardService.copyCard(cardToCopy)\r\n            const updatedData = {\r\n                copiedCard: copiedCard,\r\n                currBoard: currBoard,\r\n                copyToListID: copyToList\r\n            }\r\n            dispatch(_copyCard(updatedData));\r\n            console.log('newCard is:', copiedCard)\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function moveCard(currBoard, moveToList, currCard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = {\r\n                currBoard: currBoard,\r\n                moveToListID: moveToList,\r\n                currCard: currCard,\r\n                currList: currList\r\n            }\r\n            dispatch(_moveCard(updatedData));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setCardDesc(currBoard, currCard, desc) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                desc: desc,\r\n            }\r\n            dispatch(_setCardDesc(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function checkItem(currBoard, currCard, currCheckList, currItem, isChecked) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                currItem: currItem,\r\n                isChecked: isChecked\r\n            }\r\n            dispatch(_toggleCheckItem(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function setLabel(currBoard, currCard, labelColor) {\r\n    console.log('currCardofLabels:', currCard)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        labelColor: labelColor\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_setLabel(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeLabel(currBoard, currCard, labelIndex) {\r\n    const newLabelList = cardService.removeLabel(currCard, labelIndex)\r\n    const data = {\r\n        currBoard: currBoard,\r\n        currCard: currCard,\r\n        newLabelList: newLabelList\r\n    }\r\n    return async dispatch => {\r\n        try {\r\n            dispatch(_updateLabels(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function toggleCardWatch(currBoard, currCard, isWatched) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                isWatched: isWatched\r\n            }\r\n            dispatch(_toggleCardWatch(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function createCheckList(currBoard, currCard, checklistName) {\r\n    return async dispatch => {\r\n        try {\r\n            const newChecklist = await cardService.createCheckList(checklistName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currChecklist: newChecklist,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_addChecklist(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function addCheckListItem(currBoard, currCard, currCheckList, itemName) {\r\n    return async dispatch => {\r\n        try {\r\n            const currItem = await cardService.createCheckListItem(itemName)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                newItem: currItem\r\n            }\r\n            dispatch(_addCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckListItem(currBoard, currCard, currCheckList, itemToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                currCheckList: currCheckList,\r\n                itemToRemove: itemToRemove\r\n            }\r\n            dispatch(_removeCheckListItem(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function removeCheckList(currBoard, currCard, checkListToRemove) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                checkListToRemove: checkListToRemove,\r\n                currCard: currCard,\r\n            }\r\n            dispatch(_removeCheckList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function setCardCover(currBoard, currCard, color) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                color: color,\r\n            }\r\n            dispatch(_setCardCover(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function setDueDate(currBoard, currCard, dueDate) {\r\n    return async dispatch => {\r\n        try {\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currCard: currCard,\r\n                dueDate: dueDate,\r\n            }\r\n            dispatch(_setDueDate(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction _toggleCardDetails(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_DETAILS',\r\n        data\r\n    }\r\n}\r\nfunction _updateCurrList(data) {\r\n    return {\r\n        type: 'UPDATE_CURR_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _deleteCard(data) {\r\n    return {\r\n        type: 'DELETE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyCard(data) {\r\n    return {\r\n        type: 'COPY_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _changeCardTitle(data) {\r\n    return {\r\n        type: 'SET_CARD_TITLE',\r\n        data\r\n    }\r\n}\r\nfunction _moveCard(data) {\r\n    return {\r\n        type: 'MOVE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _setCardCover(data) {\r\n    return {\r\n        type: 'CARD_COVER',\r\n        data\r\n    }\r\n}\r\nfunction _setCardDesc(data) {\r\n    return {\r\n        type: 'SET_DESC',\r\n        data\r\n    }\r\n}\r\nfunction _addChecklist(data) {\r\n    return {\r\n        type: 'CREATE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckList(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST',\r\n        data\r\n    }\r\n}\r\nfunction _addCheckListItem(data) {\r\n    return {\r\n        type: 'ADD_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _removeCheckListItem(data) {\r\n    return {\r\n        type: 'REMOVE_CHECKLIST_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setDueDate(data) {\r\n    return {\r\n        type: 'SET_DUE_DATE',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCardWatch(data) {\r\n    return {\r\n        type: 'TOGGLE_CARD_WATCH',\r\n        data\r\n    }\r\n}\r\nfunction _toggleCheckItem(data) {\r\n    return {\r\n        type: 'TOGGLE_CHECK_ITEM',\r\n        data\r\n    }\r\n}\r\nfunction _setLabel(data) {\r\n    return {\r\n        type: 'SET_LABEL',\r\n        data\r\n    }\r\n}\r\nfunction _updateLabels(data) {\r\n    return {\r\n        type: 'UPDATE_LABELS',\r\n        data\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { CardPreview } from '../CardPreview/CardPreview';\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux';\r\nimport { toggleCardDetails ,updateCurrList} from '../../store/actions/cardActions'\r\n\r\nexport function CardList(props) {\r\n    const { cards, provided, cardIds, currListID } = props\r\n    const { boardid } = useParams()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const onToggleCardDetails = (cardid) => {\r\n        history.push(`/boards/${boardid}/${currListID}/${cardid}`)\r\n        dispatch(updateCurrList(currListID.id))\r\n        dispatch(toggleCardDetails(true))\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [cardIds])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-list\">\r\n            {cardIds.map((cardid, idx) => {\r\n                return <div key={cardid} onClick={() => onToggleCardDetails(cardid)}>\r\n\r\n                    <CardPreview\r\n                        key={cardid}\r\n                        cards={cards}\r\n                        index={idx}\r\n                        cardid={cardid} />\r\n\r\n                </div>\r\n            })}\r\n            {provided.placeholder}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","import UTILS from './utils'\r\n\r\nasync function deleteList(currBoard, currList) {\r\n  const newLists = currBoard.lists\r\n  delete newLists[currList.id]\r\n  const newListOrder = currBoard.listOrder.filter(list => list !== currList.id)\r\n\r\n  const currListCardIds = currList.cardIds\r\n  const newBoardCards = currBoard.cards\r\n\r\n\r\n  function _deleteCards(cardID) {\r\n    delete newBoardCards[cardID]\r\n  }\r\n  currListCardIds.forEach(cardID => _deleteCards(cardID))\r\n\r\n\r\n  return {\r\n    newLists: newLists,\r\n    newListOrder: newListOrder,\r\n    newBoardCards: newBoardCards\r\n  }\r\n\r\n}\r\n\r\n\r\nasync function copyList(currBoard, listToCopy) {\r\n  const copiedListTitle = 'Copy of - ' + listToCopy.title\r\n  const newList = await _createList(copiedListTitle)\r\n  const matchingCards = []\r\n  const newCards = {}\r\n  const cardIdsToCopy = listToCopy.cardIds\r\n  _findMatchingCards(matchingCards, cardIdsToCopy, currBoard.cards)\r\n\r\n  matchingCards.forEach(\r\n    card => {\r\n      const cardCopy = copyCard(card)\r\n      newCards[cardCopy.id] = cardCopy\r\n      return\r\n    }\r\n  )\r\n  newList.cardIds = Object.keys(newCards)\r\n\r\n  const start = currBoard.listOrder.findIndex(element => element === listToCopy.id)\r\n  const end = newList.id\r\n  const newListOrder = currBoard.listOrder\r\n  newListOrder.splice(start + 1, 0, end)\r\n\r\n  return {\r\n    copiedList: newList,\r\n    newListOrder: newListOrder,\r\n    copiedCards: newCards\r\n  }\r\n}\r\n\r\n\r\nfunction getListCards(cards, list) {\r\n  const currCards = {}\r\n  list.cardIds.forEach((cardID) => { return cards[cardID] ? currCards[cardID] = cards[cardID] : '' })\r\n  return currCards\r\n}\r\n\r\n\r\n\r\nfunction _findMatchingCards(matchingCards, cardsToCopy, allCards) {\r\n  cardsToCopy.forEach(cardId => {\r\n    const currCard = allCards[cardId]\r\n    if (currCard) {\r\n      matchingCards.push(currCard)\r\n    }\r\n\r\n  })\r\n\r\n}\r\n\r\nasync function _createList(listName,) {\r\n  return {\r\n    id: UTILS.generatePassword(6),\r\n    title: listName,\r\n    cardIds: []\r\n  }\r\n}\r\n\r\nfunction copyCard(cardToCopy) {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardToCopy.title,\r\n    desc: cardToCopy.desc,\r\n    cardCover: cardToCopy.cardCover,\r\n    checklist: cardToCopy.checklist,\r\n    isWatched: cardToCopy.isWatched,\r\n    dueDate: cardToCopy.dueDate,\r\n    labels: cardToCopy.labels,\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nfunction createCard(cardTitle, description = '') {\r\n  return {\r\n    id: UTILS.generatePassword(5),\r\n    title: cardTitle,\r\n    desc: description,\r\n    checklist: {},\r\n    cardCover: '',\r\n    isWatched: false,\r\n    labels: [],\r\n    dueDate: '',\r\n    createdAt: new Date().toLocaleDateString()\r\n  }\r\n}\r\n\r\n\r\nexport default {\r\n  deleteList,\r\n  createCard,\r\n  copyList,\r\n  getListCards\r\n}\r\n","import listService from '../../service/listService'\r\n\r\nexport function createCard(currBoard, currList, cardTitle) {\r\n    return async dispatch => {\r\n        try {\r\n            const newCard = await listService.createCard(cardTitle)\r\n            const data = {\r\n                newCard: newCard,\r\n                currBoard: currBoard,\r\n                currList: currList\r\n            }\r\n            dispatch(_createCard(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\nexport function deleteList(currBoard, currList) {\r\n    return async dispatch => {\r\n        try {\r\n            const updatedData = await listService.deleteList(currBoard, currList)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: currList,\r\n                newLists: updatedData.newLists,\r\n                newListOrder: updatedData.newListOrder,\r\n                newBoardCards: updatedData.newBoardCards\r\n            }\r\n            dispatch(_deleteList(data));\r\n            // dispatch({ type: 'GET_STATE' });\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function moveList(currBoard, listToMove, moveToBoardId) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const currListCards = listService.getListCards(currBoard.cards, listToMove)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                listToMove: listToMove,\r\n                moveToBoardId: moveToBoardId,\r\n                currListCards: currListCards\r\n            }\r\n            dispatch(_moveList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\nexport function copyList(currBoard, listToCopy) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            const newListCopy = await listService.copyList(currBoard, listToCopy)\r\n            const data = {\r\n                currBoard: currBoard,\r\n                copiedList: newListCopy.copiedList,\r\n                newListOrder: newListCopy.newListOrder,\r\n                copiedCards: newListCopy.copiedCards\r\n            }\r\n            dispatch(_copyList(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function changeListName(currBoard, currList, listTitle) {\r\n\r\n    return async dispatch => {\r\n        try {\r\n            currList.title = listTitle\r\n            const newListTitle = currList\r\n            const data = {\r\n                currBoard: currBoard,\r\n                currList: newListTitle,\r\n            }\r\n            dispatch(_changeListName(data));\r\n        }\r\n        catch (err) {\r\n            throw err\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction _deleteList(data) {\r\n    return {\r\n        type: 'DELETE_LIST',\r\n        data\r\n    }\r\n}\r\n\r\nfunction _createCard(data) {\r\n    return {\r\n        type: 'CREATE_CARD',\r\n        data\r\n    }\r\n}\r\nfunction _copyList(data) {\r\n    return {\r\n        type: 'COPY_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _moveList(data) {\r\n    return {\r\n        type: 'MOVE_LIST',\r\n        data\r\n    }\r\n}\r\nfunction _changeListName(data) {\r\n    return {\r\n        type: 'CHANGE_LIST_NANE',\r\n        data\r\n    }\r\n}\r\n","import React, { useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createCard } from '../../store/actions/listActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { ActionForm } from '../ActionForm/ActionForm';\r\n\r\nexport function AddCard(props) {\r\n    const { currBoard, currList, toggleAddCard } = props\r\n    const dispatch = useDispatch()\r\n    const { reset } = useForm();\r\n    const cardTitle = useRef(null);\r\n\r\n\r\n    const onCreateCard = data => {\r\n        if (!data.cardTitle) return\r\n        dispatch(createCard(currBoard, currList, data.cardTitle))\r\n        reset()\r\n        toggleAddCard()\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"add-card \">\r\n            <ActionForm\r\n                name={\"cardTitle\"}\r\n                currRef={cardTitle}\r\n                toggleAdd={toggleAddCard}\r\n                placeholder={'Enter card title'}\r\n                onSubmitFunc={onCreateCard} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect ,useCallback} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deleteList, copyList } from '../../store/actions/listActions'\r\n\r\n\r\nexport function ListMenu({ toggleListMenu, currBoard, currList, toggleAddCard, toggleEditTitle, onToggleMoveList }) {\r\n\r\n    const dispatch = useDispatch()\r\n    const onDeleteList = () => {\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n    const onCreateCard = () => {\r\n        toggleAddCard()\r\n\r\n    }\r\n\r\n    const onCopyList = () => {\r\n        dispatch(copyList(currBoard, currList))\r\n\r\n\r\n    }\r\n\r\n    const onEditTitle = () => {\r\n        toggleEditTitle()\r\n\r\n    }\r\n\r\n\r\n\r\n    const clicked = useCallback(\r\n        () => {\r\n            toggleListMenu()\r\n        },\r\n        [toggleListMenu],\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', clicked)\r\n        return () => {\r\n            window.removeEventListener('click', clicked)\r\n        }\r\n    }, [clicked])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"list-menu\">\r\n            <div className=\"menu-main-content\">\r\n                <div className=\"title margin-center\">\r\n                    <p onClick={toggleListMenu} className=\"close-btn\" >X</p>\r\n                    <p>List Actions</p>\r\n                </div>\r\n                <div className=\"menu-options \">\r\n                    <div className=\"option flex align-center\">\r\n                        <p onClick={onCreateCard}>Add Card...</p>\r\n                    </div>\r\n                    <div onClick={onCopyList} className=\"option flex align-center\">\r\n                        <p>Copy List...</p>\r\n                    </div>\r\n                    <div onClick={onToggleMoveList} className=\"option flex align-center\">\r\n                        <p>Move List...</p>\r\n                    </div>\r\n                    <div onClick={onEditTitle} className=\"option flex align-center\">\r\n                        <p>Edit Title...</p>\r\n                    </div>\r\n                    <div onClick={onDeleteList} className=\"option delete flex align-center\">\r\n                        <p>Delete List...</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeListName } from '../../store/actions/listActions'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function ChangeListTitle({ toggleEditTitle, currBoard, currList }) {\r\n    const dispatch = useDispatch()\r\n    const { register, handleSubmit} = useForm();\r\n    const title = useRef(null);\r\n    const onSaveNewTitle = (data) => {\r\n        dispatch(changeListName(currBoard, currList, data.newTitle))\r\n        toggleEditTitle()\r\n    }\r\n\r\n    useEffect(() => {\r\n        title.current.focus();\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"change-list-title\">\r\n            <form onSubmit={handleSubmit(onSaveNewTitle)}>\r\n                <input\r\n                    autoComplete=\"off\"\r\n                    ref={(e) => {\r\n                        register(e)\r\n                        title.current = e\r\n                    }}\r\n                    name=\"newTitle\"\r\n                    style={{ width: '100%' }}\r\n                    type=\"text\" />\r\n                <div className=\"flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}} type=\"submit\">Save</button>\r\n                    <button onClick={toggleEditTitle}>X</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { moveList, deleteList } from '../../../store/actions/listActions'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n\r\nexport function MoveList({ onToggleMoveList, currBoard, currList }) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const boards = Object.values(state.boards)\r\n    const [moveToBoard, setMoveTo] = useState('')\r\n    const dispatch = useDispatch()\r\n    const { boardid } = useParams();\r\n\r\n\r\n\r\n    const onMoveList = ({ target }) => {\r\n        const moveToBoardId = target.value\r\n        setMoveTo(moveToBoardId)\r\n    }\r\n\r\n    const MoveList = () => {\r\n        if (boardid === moveToBoard || !moveToBoard) return\r\n        dispatch(moveList(currBoard, currList, moveToBoard))\r\n        dispatch(deleteList(currBoard, currList))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"move-list\">\r\n            <div className=\"main-board-move-list\">\r\n                <select onChange={onMoveList} id=\"\">\r\n                    <option value=\"\">To...</option>\r\n                    {boards && boards.map((board) =>\r\n                        <option value={board.id} name={board.id} key={board.id}>{board.name}</option>\r\n                    )\r\n                    }\r\n                </select>\r\n                <div className=\"flex space-between\">\r\n                    <button onClick={MoveList}>Move</button>\r\n                    <button onClick={onToggleMoveList}>X</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { CardList } from '../CardList/CardList'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { AddCard } from '../AddCard/AddCard'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\r\nimport { faEllipsisH } from '@fortawesome/free-solid-svg-icons'\r\nimport { ListMenu } from '../ListMenu/ListMenu';\r\nimport { ChangeListTitle } from '../ChangeListTitle/ChangeListTitle'\r\nimport { MoveList } from '../ListMenu/MoveList/MoveList'\r\n\r\n\r\nexport function List({ listId, lists, cards, currBoard, index, }) {\r\n    const [currList, setCurrList] = useState('')\r\n    const [isAddCardShown, setAddCard] = useState(false)\r\n    const [isListMenuShown, setListMenu] = useState(false)\r\n    const [isEditTitle, setIsEditTitle] = useState(false)\r\n    const [isMoveListVisible, setMoveList] = useState(false)\r\n\r\n    const plus = <FontAwesomeIcon icon={faPlus} />\r\n    const listMenu = <FontAwesomeIcon icon={faEllipsisH} />\r\n\r\n\r\n    const getCurrList = useCallback(\r\n        () => {\r\n            const getCurrList = lists[listId]\r\n            setCurrList(getCurrList)\r\n        },\r\n        [lists, listId,],\r\n    )\r\n\r\n    const onToggleAddCard = () => {\r\n        setAddCard(!isAddCardShown)\r\n    }\r\n    const onToggleListMenu = () => {\r\n        setListMenu(!isListMenuShown)\r\n    }\r\n    const toggleEditTitle = () => {\r\n        setIsEditTitle(!isEditTitle)\r\n    }\r\n\r\n    const onToggleMoveList = () => {\r\n        setMoveList(!isMoveListVisible)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCurrList()\r\n        return () => {\r\n\r\n        }\r\n    }, [getCurrList])\r\n\r\n\r\n\r\n    if (!currList) return 'loading...'\r\n    return (\r\n        <Draggable\r\n            draggableId={currList.id}\r\n            index={index}\r\n        >\r\n            {(provided) => (\r\n                <MainDragContainer\r\n                    {...provided.draggableProps}\r\n                    ref={provided.innerRef}\r\n                >\r\n                    <div className=\"list flex column align-center\" >\r\n                        {isMoveListVisible &&\r\n                            <MoveList currBoard={currBoard} currList={currList} onToggleMoveList={onToggleMoveList} />\r\n                        }\r\n                        <div className=\"title-container align-center flex\">\r\n                            <span className=\"drag-handle flex space-between \"\r\n                                {...provided.dragHandleProps}\r\n                            >\r\n                                {!isEditTitle && <div>\r\n\r\n                                    <p className=\"list-title\">{currList.title}</p>\r\n\r\n                                    <p className=\"cards-count\">Total Cards: {currList.cardIds.length}</p>\r\n                                </div>\r\n                                }\r\n                                {isEditTitle && <span className=\"edit-title\">\r\n                                    <ChangeListTitle\r\n                                        toggleEditTitle={toggleEditTitle}\r\n                                        currBoard={currBoard}\r\n                                        currList={currList}\r\n                                    />\r\n                                </span>\r\n                                }\r\n                                <div className=\"menu-btn\">\r\n                                    <span className=\"list-menu-section align-center flex\"\r\n                                        onClick={onToggleListMenu}>\r\n                                        {listMenu}\r\n                                    </span>\r\n                                </div>\r\n                            </span>\r\n                        </div>\r\n                        {isListMenuShown &&\r\n                            <ListMenu\r\n\r\n\r\n                                toggleListMenu={onToggleListMenu}\r\n                                currBoard={currBoard}\r\n                                currList={currList}\r\n                                toggleAddCard={onToggleAddCard}\r\n                                toggleEditTitle={toggleEditTitle}\r\n                                onToggleMoveList={onToggleMoveList}\r\n                            />\r\n                        }\r\n                        <div className=\"main-container margin-center\">\r\n                            <Droppable droppableId={listId} type=\"card\">\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div>\r\n                                            <MainDropContainer\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.droppableProps}\r\n                                            >\r\n                                                <CardList\r\n                                                    cardIds={currList.cardIds}\r\n                                                    cards={cards}\r\n                                                    provided={provided}\r\n                                                    currListID={currList.id}\r\n                                                />\r\n                                            </MainDropContainer>\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                        <section className=\"add-card-section flex align-center\">\r\n                            {!isAddCardShown && <div onClick={onToggleAddCard}\r\n                                className=\"add-card-text flex align-center\">\r\n                                <div className=\"plus-sign\">{plus}</div>\r\n                                {currList.cardIds.length === 0 ? <p>Add a card</p> : <p>Add anoter card</p>}\r\n                            </div>\r\n                            }\r\n                            {isAddCardShown && <div className=\"add-card-section\">\r\n                                <AddCard toggleAddCard={onToggleAddCard}\r\n                                    currList={currList}\r\n                                    currBoard={currBoard} />\r\n                            </div>\r\n                            }\r\n                            <div className=\"div\">\r\n\r\n                            </div>\r\n\r\n                        </section>\r\n\r\n\r\n                    </div>\r\n                </MainDragContainer>\r\n            )\r\n            }\r\n        </Draggable >\r\n    )\r\n}\r\nconst MainDropContainer = styled.div`\r\n\r\nwidth:100%;\r\nmin-height:10px;\r\n\r\n`;\r\nconst MainDragContainer = styled.div`\r\n\r\n`;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n    saveToStorage,\r\n    changeBoardBackground,\r\n} from '../../store/actions/boardActions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nimport nature from '../../assets/images/bgs/purple_nature.jpg'\r\nimport mountains from '../../assets/images/bgs/mountains.jpg'\r\nimport water from '../../assets/images/bgs/water.jpg'\r\nimport lake from '../../assets/images/bgs/lake.jpg'\r\nimport boraBora from '../../assets/images/bgs/boraBora.jpg'\r\nimport sky from '../../assets/images/bgs/sky.jpg'\r\n\r\n\r\n\r\n\r\n\r\nexport function BoardBackground({ state, currBoard, toggleBgBoard }) {\r\n    const dispatch = useDispatch()\r\n    const close = <FontAwesomeIcon icon={faTimes} />\r\n\r\n    const changeBackgroundImg = ({ target }) => {\r\n        const name = target.name\r\n        switch (name) {\r\n            case \"nature\":\r\n                dispatch(changeBoardBackground(currBoard, 'purple_nature'))\r\n                break;\r\n            case \"mountains\":\r\n                dispatch(changeBoardBackground(currBoard, 'mountains'))\r\n                break;\r\n            case \"water\":\r\n                dispatch(changeBoardBackground(currBoard, 'water',''))\r\n                break;\r\n            case \"lake\":\r\n                dispatch(changeBoardBackground(currBoard, 'lake',''))\r\n                break;\r\n            case \"boraBora\":\r\n                dispatch(changeBoardBackground(currBoard, 'boraBora',''))\r\n                break;\r\n            case \"sky\":\r\n                dispatch(changeBoardBackground(currBoard, 'sky',''))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"board-background \">\r\n            <div className=\"close-btn flex\">\r\n                <button onClick={toggleBgBoard}>{close}</button>\r\n            </div>\r\n            <div className=\"main-content flex align-center wrap\">\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={nature} alt=\"nature\" name=\"nature\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={mountains} alt=\"mountains\" name=\"mountains\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={water} alt=\"water\" name=\"water\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={lake} alt=\"lake\" name=\"lake\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={boraBora} alt=\"boraBora\" name=\"boraBora\" />\r\n                <img onClick={(e) => changeBackgroundImg(e)} src={sky} alt=\"sky\" name=\"sky\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {  useEffect } from 'react';\r\n\r\nexport function BlackScreen(props) {\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        return () => {\r\n            // componnent willUnmount\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"black-screen\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function CardCover({currCard}) {\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{backgroundColor:`${currCard.cardCover}`}} className=\"card-cover\">\r\n            <div className=\"main-content-card-cover\">\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { copyCard } from '../../../store/actions/cardActions'\r\n\r\n\r\nexport function CopyCard({ currBoard, currCard, onToggleCopyCard }) {\r\n\r\n    const [listOptions, setListOptions] = useState()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onCopyCard = ({ target }) => {\r\n        const listName = target.value\r\n        const copyToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        dispatch(copyCard(currBoard, copyToList[0].id, currCard))\r\n        onToggleCopyCard()\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onCopyCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { moveCard } from '../../../store/actions/cardActions'\r\n\r\nexport function MoveCard({ currBoard, currCard, currList, onToggleMoveCard, onToggleCardDetails }) {\r\n    const [listOptions, setListOptions] = useState()\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const onMoveCard = ({ target }) => {\r\n        const listName = target.value\r\n        const moveToList = Object.values(currBoard.lists).filter((list) => list.title === listName)\r\n        console.log('moveToList:', moveToList)\r\n        const moveTocardIds = currBoard.lists[moveToList[0]?.id]?.cardIds\r\n        if (!moveTocardIds) return\r\n        if (moveTocardIds.includes(currCard.id)) return\r\n        if (moveToList[0].id === currList.id ) return\r\n        dispatch(moveCard(currBoard, moveToList[0].id, currCard, currList))\r\n        onToggleMoveCard()\r\n        onToggleCardDetails()\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setListOptions(Object.values(currBoard.lists))\r\n        return () => {\r\n        }\r\n    }, [currBoard.lists])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"copy-card\">\r\n            {listOptions &&\r\n                <select name=\"\" onChange={(e) => onMoveCard(e)}>\r\n                    <option value=\"\">To...</option>\r\n                    {listOptions.map((list, idx) => <option key={idx}>{list.title}</option>)}\r\n                </select>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport function ColorPallette({ onSelectColor, onToggleColor }) {\r\n    const colors = [\r\n        { color: 'red', code: '#e04a4a' },\r\n        { color: 'lightGreen', code: '#4ae06d' },\r\n        { color: 'purpule', code: '#ab4ae0' },\r\n        { color: 'orange', code: '#f9af4d' },\r\n        { color: 'blue', code: '#3874ed' },\r\n        { color: 'yellow', code: '#ffff51' },\r\n        { color: 'noCover', code: '', text: 'None' }\r\n    ]\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"color-pallette\">\r\n            <div className=\"flex wrap space-between\">\r\n                {colors.map(color =>\r\n                    <div key={color.code} onClick={() => onSelectColor(color.code)} className=\"color\" style={{ backgroundColor: color.code }}>\r\n                        {color.text && <p>{color.text}</p>}\r\n                    </div>\r\n                )}\r\n                <button onClick={onToggleColor}>Close</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { setCardCover } from '../../../store/actions/cardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette'\r\nexport function CardCoverMenu({ onToggleColor, toggleCardVisibility, currCard, currBoard }) {\r\n    const dispatch = useDispatch()\r\n\r\n    const onCloseCover = () => {\r\n        dispatch(setCardCover(currBoard, currCard, ''))\r\n        toggleCardVisibility()\r\n    }\r\n    const onSelectCover = (color) => {\r\n        if (color === 'noCover') return onCloseCover()\r\n        dispatch(setCardCover(currBoard, currCard, color))\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-cover-menu\">\r\n            <div className=\"top-part flex space-between\">\r\n            </div>\r\n            <ColorPallette\r\n                onCloseColor={onCloseCover}\r\n                onSelectColor={onSelectCover}\r\n                currCard={currCard}\r\n                currBoard={currBoard}\r\n                onToggleColor={onToggleColor}\r\n                toggleCardVisibility={toggleCardVisibility} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport function AddCheckList({ onToggleCheckList, onAddCheckList }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const checklistName = useRef(null)\r\n\r\n    useEffect(() => {\r\n        checklistName.current.focus();\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"add-check-list\">\r\n            <form onSubmit={handleSubmit(onAddCheckList)}>\r\n                <input style={{ marginBlockEnd: '5px' }} autoComplete=\"off\" ref={(e) => {\r\n                    register(e)\r\n                    checklistName.current = e\r\n                }} name=\"checklistName\" type=\"text\" />\r\n                <div className=\"check-list-btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Add</button>\r\n                    <button onClick={onToggleCheckList}>Cancel</button>\r\n\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { ColorPallette } from '../../ColorPallette/ColorPallette';\r\n\r\nexport function LabelsMenu({  onToggleColor ,onSetLabel}) {\r\n    return (\r\n        <div className=\"labels-menu\">\r\n            <ColorPallette onToggleColor={onToggleColor} onSelectColor={onSetLabel} />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { CopyCard } from '../CopyCard/CopyCard'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faTag, faTasks, faColumns, faClock, faPaperclip, faArrowRight, faCopy, faEye, faTrashAlt, faShareAlt, } from '@fortawesome/free-solid-svg-icons'\r\nimport { MoveCard } from '../MoveCard/MoveCard';\r\nimport { DeleteVerify } from '../DeleteVerify/DeleteVerify'\r\nimport { CardCoverMenu } from '../CardCoverMenu/CardCoverMenu'\r\nimport { createCheckList, setDueDate, deleteCard, setLabel, removeLabel } from '../../../store/actions/cardActions'\r\nimport { useDispatch } from 'react-redux';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport { AddCheckList } from './AddCheckList/AddCheckList';\r\nimport { LabelsMenu } from '../LabelsMenu/LabelsMenu';\r\n\r\n\r\nexport function RightSideMenu({ onToggleCardDetails, onToggleCover, isCoverOn,\r\n    listid,\r\n    currBoard,\r\n    currCard,\r\n    toggleCardVisibility,\r\n    onToggleCardWatch\r\n})\r\n {\r\n    const currList = currBoard.lists[listid]\r\n    const cardId = currCard.id\r\n    const [isCopyClicked, setCopyClick] = useState(false)\r\n    const [isMoveClicked, setMoveClick] = useState(false)\r\n    const [isDeleteClicked, setDeleteClick] = useState(false)\r\n    const [isAddCheckList, setAddChecklist] = useState(false)\r\n    const [isLabelMenuVis, setLabelMenuVis] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const [date, setDates] = useState(new Date())\r\n    const [isCalShown, toggleShowCal] = useState(false)\r\n\r\n    const avatar = <FontAwesomeIcon icon={faUser} />\r\n    const label = <FontAwesomeIcon icon={faTag} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n    const clock = <FontAwesomeIcon icon={faClock} />\r\n    const paperClip = <FontAwesomeIcon icon={faPaperclip} />\r\n    const arrow = <FontAwesomeIcon icon={faArrowRight} />\r\n    const copy = <FontAwesomeIcon icon={faCopy} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const share = <FontAwesomeIcon icon={faShareAlt} />\r\n    const cover = <FontAwesomeIcon icon={faColumns} />\r\n\r\n\r\n    const onToggleLabelMenu = () => {\r\n        setLabelMenuVis(!isLabelMenuVis)\r\n    }\r\n\r\n    const onSetLabel = (colorCode) => {\r\n        const index = currCard.labels.findIndex((label) => { return label === colorCode })\r\n        if (index >= 0) {\r\n            dispatch(removeLabel(currBoard, currCard, index))\r\n            return\r\n        }\r\n        dispatch(setLabel(currBoard, currCard, colorCode))\r\n    }\r\n\r\n    const onToggleDeleteCard = () => {\r\n        setDeleteClick(!isDeleteClicked)\r\n    }\r\n\r\n    const onDeleteCard = () => {\r\n        dispatch(deleteCard(currBoard, currList, cardId))\r\n        onToggleCardDetails()\r\n    }\r\n\r\n    const onToggleCopyCard = () => {\r\n        setCopyClick(!isCopyClicked)\r\n    }\r\n    const onToggleMoveCard = () => {\r\n        setMoveClick(!isMoveClicked)\r\n    }\r\n\r\n    const onToggleCheckList = () => {\r\n        setAddChecklist(!isAddCheckList)\r\n    }\r\n\r\n    const onAddCheckList = ({ checklistName }) => {\r\n        if (!checklistName) return\r\n        dispatch(createCheckList(currBoard, currCard, checklistName))\r\n        onToggleCheckList()\r\n    }\r\n    const onGetDates = date => {\r\n        const newDate = date.toString().substring(0, 15)\r\n        setDates(date)\r\n        dispatch(setDueDate(currBoard, currCard, newDate))\r\n        toggleShowCal(false)\r\n    }\r\n\r\n    const onToggleShowCal = () => {\r\n        toggleShowCal(!isCalShown)\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n\r\n        }\r\n    }, [currBoard])\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"right-side-menu flex column\">\r\n            <p>SUGGESTED</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                Join</button>\r\n            <p>ADD TO CARD</p>\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {avatar}\r\n                </span>\r\n                    Members\r\n            </button>\r\n            <button onClick={onToggleLabelMenu} className=\"btn-right-side\">\r\n                <span>{label}</span>\r\n                Labels\r\n                </button>\r\n            { isLabelMenuVis && <LabelsMenu onSetLabel={onSetLabel} onToggleColor={onToggleLabelMenu} currBoard={currBoard} currCard={currCard} />}\r\n            <button onClick={onToggleCheckList} className=\"btn-right-side\">\r\n                <span>{checklist}</span>\r\n                Checklist\r\n                </button>\r\n            {isAddCheckList &&\r\n                <AddCheckList\r\n                    onToggleCheckList={onToggleCheckList}\r\n                    onAddCheckList={onAddCheckList} />\r\n            }\r\n            <button onClick={onToggleShowCal} className=\"btn-right-side\">\r\n                <span>{clock}</span>\r\n                Due Date\r\n                </button>\r\n            {isCalShown && <div className=\"cal\">\r\n                <Calendar className=\"calendar\"\r\n                    onChange={onGetDates}\r\n                    value={date}\r\n                />\r\n            </div>\r\n            }\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {paperClip}\r\n                </span>\r\n                Attachment\r\n                </button>\r\n            <button className=\"btn-right-side\" onClick={onToggleCover}>\r\n                <span>\r\n                    {cover}\r\n                </span>\r\n                Cover\r\n                </button>\r\n            {isCoverOn &&\r\n                <CardCoverMenu\r\n                    currCard={currCard}\r\n                    toggleCardVisibility={toggleCardVisibility}\r\n                    currBoard={currBoard}\r\n                    onToggleColor={onToggleCover}\r\n                />\r\n            }\r\n\r\n            <p>ACTIONS</p>\r\n\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleMoveCard}>\r\n                        <span>\r\n                            {arrow}\r\n                        </span>\r\n                    Move\r\n                    </button>\r\n                </div>\r\n                {isMoveClicked && <MoveCard cardId={cardId}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    currList={currList}\r\n                    onToggleMoveCard={onToggleMoveCard}\r\n                    onToggleCardDetails={onToggleCardDetails}\r\n                />\r\n                }\r\n            </div>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n                    <button className=\"btn-right-side\" onClick={onToggleCopyCard}>\r\n                        <span>\r\n                            {copy}\r\n                        </span>\r\n                    Copy\r\n                    </button>\r\n                </div>\r\n                {isCopyClicked && <CopyCard cardId={cardId}\r\n                    listid={listid}\r\n                    currBoard={currBoard}\r\n                    currCard={currCard}\r\n                    onToggleCopyCard={onToggleCopyCard}\r\n                />\r\n                }\r\n            </div>\r\n            <button onClick={onToggleCardWatch} className=\"btn-right-side flex space-between align-center\">\r\n                <div className=\"flex\">\r\n                    <span>\r\n                        {eye}\r\n                    </span>\r\n                    Watch\r\n                </div>\r\n                {currCard.isWatched &&\r\n                    <span className=\"watched flex align-center justify-center\">V</span>\r\n                }\r\n            </button>\r\n            <div className=\"right-side-btn flex column\">\r\n                <div className=\"btn-part flex\">\r\n\r\n                    <button className=\"btn-right-side\" onClick={onToggleDeleteCard}>\r\n                        <span>\r\n                            {trash}\r\n                        </span>\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n                {isDeleteClicked &&\r\n                    <DeleteVerify onDelete={onDeleteCard}\r\n                        onToggle={onToggleDeleteCard}\r\n                        itemToDelete={'card'}\r\n                    />\r\n                }\r\n\r\n            </div>\r\n\r\n\r\n            <button className=\"btn-right-side\">\r\n                <span>\r\n                    {share}\r\n                </span>\r\n                Share\r\n                </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n\r\nexport function ProgressBar({ bgcolor, completed }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const fillerStyles = {\r\n        width: `${completed}%`,\r\n        backgroundColor: bgcolor,\r\n        borderRadius: 'inherit',\r\n        textAlign: 'right'\r\n    }\r\n\r\n    const labelStyles = {\r\n        fontWeight: 'bold'\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"progress-bar flex align-center\">\r\n            <span style={labelStyles}>{` ${completed}%  `}</span>\r\n            <div></div>\r\n            <div className=\"wrapper\" style={fillerStyles}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n\r\n\r\nexport function ItemPreview({ onCheckItem, item, onRemoveCheckListItem, trash }) {\r\n    \r\n    useEffect(() => {\r\n        return () => {\r\n            \r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"item-preview\">\r\n            <div\r\n                key={item.id} className=\"main-content-checkbox flex space-between align-center\">\r\n                <div className=\"checkbox-container flex\">\r\n                    <input onChange={() => onCheckItem(item)} checked={item.isChecked} type=\"checkbox\" value={item.text} /> <p>\r\n                        {item.text}\r\n                    </p>\r\n                </div>\r\n                <button onClick={() => onRemoveCheckListItem(item)}><span>{trash}</span></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeCheckList, addCheckListItem, removeCheckListItem, checkItem } from '../../../store/actions/cardActions'\r\nimport { ProgressBar } from '../../ProgressBar/ProgressBar'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTasks, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { ActionForm } from '../../ActionForm/ActionForm';\r\nimport { useCallback } from 'react';\r\nimport { ItemPreview } from './ItemPreview/ItemPreview'\r\n\r\nexport function CardCheckList({ currCheckList, currCard, currBoard }) {\r\n    const checklistName = currCheckList.name\r\n    const [isAddItemVisible, setItemVisible] = useState(false)\r\n    const [checkedItems, setCheckItems] = useState([])\r\n    const [currCheckItem, setCurrCheckItem] = useState()\r\n    const [completed, setCompleted] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    const trash = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const checklist = <FontAwesomeIcon icon={faTasks} />\r\n\r\n    const onAddCheckItem = ({ listItem }) => {\r\n        if (!listItem) return\r\n        dispatch(addCheckListItem(currBoard, currCard, currCheckList, listItem))\r\n        onToggleItemVisibility()\r\n    }\r\n\r\n\r\n    const onRemoveCheckList = () => { dispatch(removeCheckList(currBoard, currCard, currCheckList)) }\r\n    const onRemoveCheckListItem = useCallback(\r\n        (item) => {\r\n            const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n            dispatch(removeCheckListItem(currBoard, currCard, currCheckList, item))\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n        },\r\n        [currBoard, currCard, currCheckList, dispatch,checkedItems]\r\n    )\r\n\r\n    const onToggleItemVisibility = () => {\r\n        setItemVisible(!isAddItemVisible)\r\n    }\r\n\r\n\r\n    const onCheckItem = (item) => {\r\n        const currItem = currCheckList.list[item.id]\r\n        setCurrCheckItem(currItem)\r\n        const index = checkedItems.findIndex((checkedItem) => checkedItem.id === item.id)\r\n        if (item.isChecked) {\r\n            let newCheckedItems = checkedItems\r\n            newCheckedItems.splice(index, 1)\r\n            setCheckItems([...newCheckedItems])\r\n            dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n            calculatePercentage()\r\n            return\r\n        }\r\n\r\n        setCheckItems([...checkedItems, { ...item }])\r\n        dispatch(checkItem(currBoard, currCard, currCheckList, currItem))\r\n        calculatePercentage()\r\n    }\r\n\r\n\r\n    const calculatePercentage = useCallback(\r\n        () => {\r\n            var number = Object.values(currCheckList.list).length;\r\n            var currChecked = checkedItems.length;\r\n            var percent = (currChecked * 100) / number;\r\n            isNaN(percent) ? setCompleted(0) : setCompleted(percent.toFixed())\r\n        },\r\n        [currCheckList.list, checkedItems.length],\r\n    )\r\n\r\n    useEffect(() => {\r\n        calculatePercentage()\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [calculatePercentage, currCheckItem, currCheckList])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-check-list\">\r\n            <div className=\"card-check-list-section flex space-between\">\r\n                <div className=\"title-container flex align-center\">\r\n\r\n                    <div className=\"icon\">\r\n                        {checklist}\r\n                    </div>\r\n                    <div className=\"check-list-title\">\r\n                        <h3>{checklistName}</h3>\r\n                    </div>\r\n                </div>\r\n                <p className=\"delete-checklist\" onClick={onRemoveCheckList}>Delete</p>\r\n            </div>\r\n            <ProgressBar bgcolor=\"#c9c9ca\" completed={completed} />\r\n            <div className=\"list\">\r\n                {Object.values(currCheckList.list).map(item =>\r\n                    <ItemPreview key={item.id} onCheckItem={onCheckItem} onRemoveCheckListItem={onRemoveCheckListItem} trash={trash} item={item} />\r\n                )}\r\n            </div>\r\n            {!isAddItemVisible &&\r\n                <div className=\"add-item-btn\">\r\n                    <button onClick={onToggleItemVisibility}>Add an item</button>\r\n                </div>\r\n            }\r\n            <div className=\"check-list-action\">\r\n                {\r\n                    isAddItemVisible &&\r\n                    <ActionForm toggleAdd={onToggleItemVisibility} onSubmitFunc={onAddCheckItem} name={'listItem'} placeholder={'Item title'} />\r\n                }\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { setCardDesc } from '../../../../store/actions/cardActions'\r\n\r\n\r\n\r\n\r\nexport function AddDescription({ currCard, currBoard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    const dispatch = useDispatch()\r\n    // const [isDescClicked, setDescClicked] = useState(false)\r\n    const { register, handleSubmit } = useForm();\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onCancel = () => {\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    const onAddDesc = ({ desc }) => {\r\n        dispatch(setCardDesc(currBoard, currCard, desc))\r\n        onToggleCardDesc()\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"add-description\">\r\n            <form onSubmit={handleSubmit(onAddDesc)}>\r\n                <textarea defaultValue={currCard.desc} name=\"desc\" ref={register} cols=\"30\" rows=\"10\"></textarea>\r\n                <div className=\"btns flex space-between\">\r\n                    <button style={{backgroundColor:\"rgb(76, 187, 61)\"}}>Save</button>\r\n                    <button onClick={onCancel}>X</button>\r\n                </div>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\nimport { AddDescription } from '.././Description/AddDescription/AddDescription'\r\n\r\nexport function Description({isDescVisible, clipBoard, currBoard, currCard, onToggleCardDesc }) {\r\n    //   const state = useSelector(state => state.state)\r\n    //   const dispatch = useDispatch()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            // componnent willUnmount\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"description flex\">\r\n            <div className=\"icon\">\r\n                {clipBoard}\r\n            </div>\r\n            <div className=\"description-title\">\r\n                <h3>Description</h3>\r\n                {!isDescVisible &&\r\n                    <div onClick={onToggleCardDesc} className=\"card-description-box\">\r\n                        <p>{currCard.desc}</p>\r\n                    </div>\r\n                }\r\n                {isDescVisible &&\r\n                    <AddDescription onToggleCardDesc={onToggleCardDesc}\r\n                        currBoard={currBoard} currCard={currCard} />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleCardDetails, toggleCardWatch, setDueDate, changeCardTitle } from '../../store/actions/cardActions'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { CardCover } from './CardCover/CardCover'\r\nimport { RightSideMenu } from './RightSideMenu/RightSideMenu'\r\nimport { CardCheckList } from './CardCheckList/CardCheckList'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faPencilAlt, faTicketAlt, faClipboardList, faEye } from '@fortawesome/free-solid-svg-icons'\r\nimport { Description } from './Description/Description';\r\nimport { CardLabel } from './CardLabel/CardLabel';\r\n\r\n\r\nexport function CardDetails() {\r\n    const state = useSelector(state => state.mainStore)\r\n    const {boardid, cardid, listid } = useParams();\r\n    const currBoard = state.boards[boardid]\r\n    const currCard = currBoard.cards[cardid]\r\n    const [isCoverOn, setCoverOn] = useState(false)\r\n    const [istCoverVisibile, setCoverVisibility] = useState(false)\r\n    const [isDescVisible, setDescVisibility] = useState(false)\r\n    const [newCardTitle, setCardTitle] = useState({ title: '' })\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const [isCardTitleChange, onSetCardTitle] = useState(false)\r\n    const currCheckList = Object.values(currCard?.checklist)\r\n    const [isMouseOver, setMouseOver] = useState(false)\r\n\r\n\r\n    const ticket = <FontAwesomeIcon icon={faTicketAlt} />\r\n    const clipBoard = <FontAwesomeIcon icon={faClipboardList} />\r\n    const eye = <FontAwesomeIcon icon={faEye} />\r\n    const pencil = <FontAwesomeIcon icon={faPencilAlt} />\r\n\r\n\r\n    const onToggleCardDetails = () => {\r\n        dispatch(toggleCardDetails(false))\r\n        history.push(`/boards/${boardid}`)\r\n    }\r\n\r\n\r\n    const onToggleCover = () => {\r\n        setCoverOn(!isCoverOn)\r\n    }\r\n\r\n    const toggleCardVisibility = () => {\r\n        setCoverVisibility(!istCoverVisibile)\r\n    }\r\n\r\n    const onToggleCardDesc = () => {\r\n        setDescVisibility(!isDescVisible)\r\n    }\r\n\r\n\r\n    const onToggleCardWatch = () => {\r\n        const isWatched = currCard.isWatched\r\n        dispatch(toggleCardWatch(currBoard, currCard, !isWatched))\r\n    }\r\n\r\n    const onRemoveDate = () => {\r\n        dispatch(setDueDate(currBoard, currCard, ''))\r\n    }\r\n\r\n\r\n\r\n\r\n    const onHandleChange = ({ target }) => {\r\n        const key = target.name\r\n        const value = target.value\r\n        newCardTitle[key] = value\r\n        setCardTitle((prevTitle) => ({\r\n            ...prevTitle,\r\n            title: value\r\n        }))\r\n    };\r\n\r\n    const onChangeTitle = (ev) => {\r\n        const cardTitle = newCardTitle.title\r\n        ev.preventDefault()\r\n        dispatch(changeCardTitle(currCard, cardTitle, currBoard))\r\n        onSetCardTitle(false)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n        }\r\n    }, [state, currCard.isWatched])\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"card-details\" >\r\n            <span onClick={onToggleCardDetails} >\r\n                <BlackScreen />\r\n            </span>\r\n            <div className=\"card-details-board \">\r\n                {currCard.cardCover &&\r\n                    <CardCover currCard={currCard} onToggleCover={onToggleCover} />\r\n                }\r\n                <div className=\"main flex space-between\">\r\n                    <div className=\"left-side\">\r\n                        <div className=\"title-section \">\r\n                            <div style={{ height: 'fit-content' }} className=\"align-center flex\">\r\n                                <div className=\"icon\">\r\n                                    {ticket}\r\n                                </div>\r\n                                <div onMouseEnter={() => setMouseOver(true)} onMouseLeave={() => setMouseOver(false)} onClick={() => onSetCardTitle(true)} className=\"title\">\r\n                                    {!isCardTitleChange &&\r\n                                        <div className=\"flex\">\r\n                                            <h3 >{currCard.title} </h3>\r\n                                            {isMouseOver &&\r\n                                                <div className=\"edit-title-pencil\">\r\n                                                    {pencil}\r\n                                                </div>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n\r\n                                {isCardTitleChange &&\r\n                                    <div className=\"flex\">\r\n\r\n                                        <form onSubmit={onChangeTitle}>\r\n                                            <input autoComplete=\"off\" onChange={onHandleChange} name=\"title\" placeholder={currCard.title} type=\"text\" />\r\n                                        </form>\r\n                                        <button onClick={() => onSetCardTitle(false)}>Cancel</button>\r\n                                    </div>\r\n                                }\r\n                                {currCard.isWatched &&\r\n                                    <div className=\"watched-section\">\r\n                                        {eye}\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                            {currCard.dueDate &&\r\n                                <div className=\"due-date-section margin-bottom flex space-between\">\r\n                                    <p>{currCard.dueDate}</p>\r\n                                    <p className=\"remove-date\" onClick={onRemoveDate}>Remove Date</p>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        <section className=\"labels\">\r\n                            {currCard.labels.length > 0 &&\r\n                                <div>\r\n                                    <p>Labels</p>\r\n                                    <div className=\"flex\">\r\n                                        {currCard.labels.map(label => {\r\n                                            return <CardLabel key={label} label={label} />\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n\r\n                        </section>\r\n                        <section className=\"description-section\">\r\n                            <Description clipBoard={clipBoard} isDescVisible={isDescVisible} currBoard={currBoard} currCard={currCard}\r\n                                onToggleCardDesc={onToggleCardDesc} />\r\n                        </section>\r\n                        <section className=\"checkList-section\">\r\n                            {currCheckList.length > 0 &&\r\n                                currCheckList.map(checklist => <div key={checklist.id} >\r\n                                    <CardCheckList currCheckList={checklist} currBoard={currBoard} currCard={currCard} />\r\n                                </div>)\r\n                            }\r\n                        </section>\r\n                    </div>\r\n                    <div className=\"right-side\">\r\n                        <div className=\"close-btn margin-bottom flex\">\r\n                            <button onClick={onToggleCardDetails}>X</button>\r\n                        </div>\r\n                        <RightSideMenu\r\n                            listid={listid}\r\n                            currBoard={currBoard}\r\n                            currCard={currCard}\r\n                            toggleCardVisibility={toggleCardVisibility}\r\n                            istCoverVisibile={istCoverVisibile}\r\n                            onToggleCardDetails={onToggleCardDetails}\r\n                            onToggleCardWatch={onToggleCardWatch}\r\n                            onToggleCover={onToggleCover}\r\n                            isCoverOn={isCoverOn}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { createList } from '../../store/actions/boardActions'\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { ActionForm } from '../ActionForm/ActionForm';\r\n\r\nexport function AddList({ currBoard, onToggleAddList }) {\r\n    const dispatch = useDispatch()\r\n    const { reset } = useForm();\r\n    const listName = useRef(null);\r\n\r\n\r\n    const onCreateList = (data) => {\r\n        if (!data.listName) return\r\n        dispatch(createList(currBoard.id, data.listName))\r\n        reset()\r\n        onToggleAddList()\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        listName.current.focus();\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"add-list \">\r\n            <ActionForm\r\n                name={\"listName\"}\r\n                currRef={listName}\r\n                toggleAdd={onToggleAddList}\r\n                placeholder={'Enter list title'}\r\n                onSubmitFunc={onCreateList} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';\r\nimport styled from 'styled-components'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom'\r\nimport { List } from '../List/List'\r\nimport {\r\n    dragInsideList,\r\n    saveToStorage,\r\n    dragOutsideList,\r\n    dragList,\r\n    setActiveBoard,\r\n    toggleBgSide\r\n} from '../../store/actions/boardActions'\r\n\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport { BoardBackground } from '../../cmps/BoardBackground/BoardBackground'\r\nimport { CardDetails } from '../CardDetails/CardDetails'\r\nimport { BlackScreen } from '../CardDetails/BlackScreen/BlackScreen'\r\nimport { AddList } from '../AddList/AddList'\r\n\r\n\r\nexport function Board(props) {\r\n    const state = useSelector(state => state.mainStore)\r\n    const { isCardDetailShown, isBgSideOpen } = state\r\n    const [isAddListVisible, setAddList] = useState(false)\r\n    const [currBoard, setCurrBoard] = useState()\r\n\r\n    const { boardid } = useParams();\r\n    const dispatch = useDispatch()\r\n    const boardRef = useRef(null)\r\n\r\n    const loadCurrBoard = useCallback(() => {\r\n        const currBoard = state.boards[boardid]\r\n        setCurrBoard(currBoard)\r\n        dispatch(setActiveBoard(currBoard))\r\n    },\r\n        [state.boards, boardid, dispatch,]\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (!currBoard) return\r\n    }, [currBoard])\r\n\r\n    const onDragEnd = useMemo(() => async (result) => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) { return }\r\n        if (\r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) return\r\n\r\n        const start = currBoard.lists[source.droppableId]\r\n        const finish = currBoard.lists[destination.droppableId]\r\n\r\n        if (start === finish && !type === 'list') {\r\n            await dispatch(dragInsideList(start, source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        if (type === 'list') {\r\n            await dispatch(dragList(source, destination, draggableId, currBoard))\r\n            return\r\n        }\r\n        await dispatch(dragOutsideList(start, source, destination, draggableId, currBoard, finish))\r\n\r\n    }\r\n        , [currBoard, dispatch])\r\n\r\n\r\n    const toggleBgBoard = () => {\r\n        dispatch(toggleBgSide())\r\n    }\r\n\r\n    const onToggleAddList = () => {\r\n        setAddList(!isAddListVisible)\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        loadCurrBoard()\r\n        return () => {\r\n            dispatch(setActiveBoard(''))\r\n        }\r\n\r\n    }, [loadCurrBoard, dispatch])\r\n\r\n    useEffect(() => { dispatch(saveToStorage(state)) }, [state, dispatch, currBoard])\r\n\r\n\r\n    if (!currBoard) return '...LOADING...'\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={onDragEnd}\r\n        >\r\n            <Droppable\r\n                droppableId=\"all-lists\"\r\n                direction=\"horizontal\"\r\n                type=\"list\"\r\n                className=\"droppable-board\"\r\n            >\r\n                {(provided) => {\r\n                    return (\r\n                        <div ref={boardRef} className=\"board margin-center align-center\">\r\n                            <img className=\"board-background\" src={require(`../../assets/images/bgs/${currBoard.backgroundImg}.jpg`)} alt=\"\"/>\r\n                            <MainDndArea\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                <div className=\"main-content flex \">\r\n                                    {currBoard.listOrder.map((listId, idx) => {\r\n                                        return <div key={listId} className=\"list-section\">\r\n                                            <List index={idx} cards={currBoard.cards} currBoard={currBoard} lists={currBoard.lists} listId={listId}></List>\r\n                                        </div>\r\n                                    })}\r\n                                    {!isAddListVisible &&\r\n                                        <button onClick={onToggleAddList} className=\"add-list-btn\">Add list</button>\r\n                                    }\r\n                                    {isAddListVisible &&\r\n                                        <AddList currBoard={currBoard} onToggleAddList={onToggleAddList} />\r\n                                    }\r\n                                </div>\r\n                                {isBgSideOpen &&\r\n                                    <span onClick={toggleBgBoard} >\r\n                                        <BlackScreen />\r\n                                    </span>\r\n                                }\r\n                                <div className=\"between\">\r\n                                    <div className={`board-bg ${isBgSideOpen ? 'visible' : ''} `}>\r\n                                        <BoardBackground toggleBgBoard={toggleBgBoard} currBoard={currBoard} state={state} />\r\n                                    </div>\r\n                                </div>\r\n                                {provided.placeholder}\r\n\r\n                            </MainDndArea>\r\n                            {isCardDetailShown &&\r\n                                <CardDetails currBoard={currBoard} />\r\n                            }\r\n\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Droppable>\r\n        </DragDropContext >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst MainDndArea = styled.div`\r\n    width: 100 %;\r\n    `;","import React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './style/style.scss'\r\nimport { HomePage } from './pages/HomePage/HomePage'\r\nimport { AppHeader } from './cmps/AppHeader/AppHeader'\r\nimport { Board } from './cmps/Board/Board';\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App \">\r\n      <AppHeader/>\r\n\r\n      <Switch>\r\n      <Route component={HomePage} exact path=\"/\" />\r\n        <Route component={Board} path=\"/boards/:boardid/:listid?/:cardid?\"/>\r\n      </Switch>\r\n      {/* <Footer/> */}\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import UTILS from '../../service/utils'\r\n\r\nvar initialState = UTILS.loadFromStorage('mainStore')\r\n\r\nif (!initialState)\r\n\r\n\r\n    initialState = {\r\n        boards: {\r\n            'board-1': {\r\n                id: 'board-1',\r\n                name: 'Demo-Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-1': {\r\n                        id: 'card-1',\r\n                        title: 'card-title-1',\r\n                        desc: 'card-desc-1',\r\n                        checklist: {\r\n                            'check-1': {\r\n                                id: 'check-1',\r\n                                name: 'checklist-1',\r\n                                list: {\r\n                                    'firstOne': {\r\n                                        id: 'firstOne', text: 'firstOne', isChecked: false\r\n                                    },\r\n                                    'secondOne': {\r\n                                        id: 'secondOne', text: 'secondOne', isChecked: true\r\n                                    }\r\n                                }\r\n                            },\r\n                            'check-2': {\r\n                                id: 'check-2',\r\n                                name: 'checklist-2',\r\n                                list: {\r\n                                    'firstOne': { id: 'firstOne', text: 'firstOne' }, 'secondOne': { id: 'secondOne', text: 'secondOne' }\r\n                                }\r\n                            }\r\n                        },\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-2': {\r\n                        id: 'card-2',\r\n                        title: 'card-title-2',\r\n                        desc: 'card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-3': {\r\n                        id: 'card-3',\r\n                        title: 'card-title-3',\r\n                        desc: 'card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-4': {\r\n                        id: 'card-4',\r\n                        title: 'card-title-4',\r\n                        desc: 'card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-5': {\r\n                        id: 'card-5',\r\n                        title: 'card-title-5',\r\n                        desc: 'card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-6': {\r\n                        id: 'card-6',\r\n                        title: 'card-title-6',\r\n                        desc: 'card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-7': {\r\n                        id: 'card-7',\r\n                        title: 'card-title-7',\r\n                        desc: 'card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-8': {\r\n                        id: 'card-8',\r\n                        title: 'card-title-8',\r\n                        desc: 'card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-9': {\r\n                        id: 'card-9',\r\n                        title: 'card-title-9',\r\n                        desc: 'card-desc-9',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-10': {\r\n                        id: 'card-10',\r\n                        title: 'card-title-10',\r\n                        desc: 'card-desc-10',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-11': {\r\n                        id: 'card-11',\r\n                        title: 'card-title-11',\r\n                        desc: 'card-desc-11',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-12': {\r\n                        id: 'card-12',\r\n                        title: 'card-title-12',\r\n                        desc: 'card-desc-12',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-1': {\r\n                        id: 'list-1',\r\n                        title: 'todo',\r\n                        cardIds: ['card-1', 'card-2', 'card-3', 'card-4',]\r\n                    },\r\n                    'list-2': {\r\n                        id: 'list-2',\r\n                        title: 'in progress',\r\n                        cardIds: ['card-5', 'card-6', 'card-7', 'card-8',]\r\n                    },\r\n                    'list-3': {\r\n                        id: 'list-3',\r\n                        title: 'done',\r\n                        cardIds: ['card-9', 'card-10', 'card-11', 'card-12',]\r\n                    },\r\n                },\r\n                listOrder: ['list-1', 'list-2', 'list-3'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n            },\r\n            'board-2': {\r\n                id: 'board-2',\r\n                name: 'Eyal\\'s Board',\r\n                isFav: false,\r\n                cards: {\r\n                    'card-16': {\r\n                        id: 'card-16',\r\n                        title: 'new card-title-1',\r\n                        desc: 'new card-desc-1',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-26': {\r\n                        id: 'card-26',\r\n                        title: 'new card-title-2',\r\n                        desc: 'new card-desc-2',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-36': {\r\n                        id: 'card-36',\r\n                        title: 'new card-title-3',\r\n                        desc: 'new card-desc-3',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-46': {\r\n                        id: 'card-46',\r\n                        title: 'new card-title-4',\r\n                        desc: 'new card-desc-4',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-57': {\r\n                        id: 'card-57',\r\n                        title: 'new card-title-5',\r\n                        desc: 'new card-desc-5',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-67': {\r\n                        id: 'card-67',\r\n                        title: 'new card-title-6',\r\n                        desc: 'new card-desc-6',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-77': {\r\n                        id: 'card-77',\r\n                        title: 'new card-title-7',\r\n                        desc: 'new card-desc-7',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                    'card-87': {\r\n                        id: 'card-87',\r\n                        title: 'new card-title-8',\r\n                        desc: 'new card-desc-8',\r\n                        checklist: {},\r\n                        cardCover: '',\r\n                        labels: []\r\n                    },\r\n                },\r\n                lists: {\r\n                    'list-13': {\r\n                        id: 'list-13',\r\n                        title: 'todo2',\r\n                        cardIds: ['card-16', 'card-26', 'card-36', 'card-46',]\r\n                    },\r\n                    'list-23': {\r\n                        id: 'list-23',\r\n                        title: 'in progress2',\r\n                        cardIds: ['card-57', 'card-67', 'card-77', 'card-87',]\r\n                    },\r\n                },\r\n                listOrder: ['list-13', 'list-23'],\r\n                backgroundImg: 'lake',\r\n                createdAt: new Date().toLocaleDateString()\r\n\r\n            },\r\n        },\r\n        favBoards: [],\r\n        activeBoard: '',\r\n        isCardDetailShown: false,\r\n        isBgSideOpen: false\r\n    };\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_STATE':\r\n            return {\r\n                state: action.state\r\n            };\r\n        case 'UPDATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.updatedList.id]: action.data.updatedList\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.newStartList.id]: action.data.newStartList,\r\n                            [action.data.newFinishList.id]: action.data.newFinishList,\r\n\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LISTS_ORDER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        listOrder: [...action.data.newListOrder]\r\n                    }\r\n                }\r\n            };\r\n        case 'CREATE_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.newBoard.id]: {\r\n                        ...action.data.newBoard,\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_BOARD':\r\n            const newBoards = state.boards\r\n            delete newBoards[action.data.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...newBoards,\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_NAME':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        name: action.data.boardName\r\n                    },\r\n                },\r\n            };\r\n        case 'CREATE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard]: {\r\n                        ...state.boards[action.data.currBoard],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard].lists,\r\n                            [action.data.newList.id]: action.data.newList,\r\n                        },\r\n                        listOrder: [...state.boards[action.data.currBoard].listOrder, action.data.newList.id]\r\n                    },\r\n                },\r\n            };\r\n        case 'DELETE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...action.data.newLists\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n                },\r\n            };\r\n        case 'MOVE_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.moveToBoardId]: {\r\n                        ...state.boards[action.data.moveToBoardId],\r\n                        cards: {\r\n                            ...state.boards[action.data.moveToBoardId].cards,\r\n                            ...action.data.currListCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.moveToBoardId].lists,\r\n                            [action.data.listToMove.id]: {\r\n                                ...action.data.listToMove\r\n                            }\r\n                        },\r\n                        listOrder: [...state.boards[action.data.moveToBoardId].listOrder, action.data.listToMove.id]\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'COPY_LIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            ...action.data.copiedCards\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copiedList.id]: {\r\n                                ...action.data.copiedList\r\n                            }\r\n                        },\r\n                        listOrder: action.data.newListOrder\r\n                    },\r\n\r\n                },\r\n            };\r\n        case 'CHANGE_LIST_NANE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...action.data.currList\r\n                            }\r\n                        },\r\n\r\n                    },\r\n                },\r\n            };\r\n        case 'CHANGE_BOARD_BG':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        backgroundImg: action.data.bgName,\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_ACTIVE_BOARD':\r\n            return {\r\n                ...state,\r\n                activeBoard: action.activeBoard.id\r\n            };\r\n        case 'CREATE_CARD':\r\n            console.log('created')\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.newCard.id]: action.data.newCard,\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: [\r\n                                    ...state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds, action.data.newCard.id\r\n                                ]\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            };\r\n        case 'COPY_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.copiedCard.id]: action.data.copiedCard\r\n                        },\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.copyToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.copyToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.copyToListID].cardIds, action.data.copiedCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'SET_CARD_TITLE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]: { ...action.data.currCard, title: action.data.cardTitle },\r\n                        },\r\n\r\n                    }\r\n                }\r\n            };\r\n        case 'MOVE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        lists: {\r\n                            ...state.boards[action.data.currBoard.id].lists,\r\n                            [action.data.currList.id]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.currList.id],\r\n                                cardIds: state.boards[action.data.currBoard.id].lists[action.data.currList.id].cardIds.filter(cardId => cardId !== action.data.currCard.id)\r\n                            },\r\n                            [action.data.moveToListID]: {\r\n                                ...state.boards[action.data.currBoard.id].lists[action.data.moveToListID],\r\n                                cardIds: [...state.boards[action.data.currBoard.id].lists[action.data.moveToListID].cardIds, action.data.currCard.id]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'DELETE_CARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        lists: {\r\n                            ...action.data.currBoard.lists,\r\n                            [action.data.currList.id]: action.data.currList\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'SET_DESC':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                desc: action.data.desc\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'SET_LABEL':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...state.boards[action.data.currBoard.id],\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: [...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].labels, action.data.labelColor]\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'UPDATE_LABELS':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                labels: action.data.newLabelList\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'TOGGLE_CARD_WATCH':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                isWatched: action.data.isWatched\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'TOGGLE_CHECK_ITEM':\r\n            const isItemChecked = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id].isChecked\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: {\r\n                                            ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list,\r\n                                            [action.data.currItem.id]: {\r\n                                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list[action.data.currItem.id],\r\n                                                isChecked: !isItemChecked\r\n                                            }\r\n                                        },\r\n                                    }\r\n                                }\r\n                            },\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n\r\n\r\n        case 'SET_DUE_DATE':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                dueDate: action.data.dueDate\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CREATE_CHECKLIST':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist, [action.data.currChecklist.id]: action.data.currChecklist }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'ADD_CHECKLIST_ITEM':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: {\r\n                                        ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id],\r\n                                        list: { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist[action.data.currCheckList.id].list, [action.data.newItem.id]: action.data.newItem }\r\n                                    }\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n        case 'REMOVE_CHECKLIST_ITEM':\r\n            const newChecklistToSave = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            [action.data.currCheckList.id]\r\n            delete newChecklistToSave.list[action.data.itemToRemove.id]\r\n\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: {\r\n                                    ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist,\r\n                                    [action.data.currCheckList.id]: newChecklistToSave\r\n                                }\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n        case 'REMOVE_CHECKLIST':\r\n            const newChecklist = state.boards[action.data.currBoard.id].cards[action.data.currCard.id].checklist\r\n            delete newChecklist[action.data.checkListToRemove.id]\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                            {\r\n                                ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id],\r\n                                checklist: newChecklist\r\n                            }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n        case 'CARD_COVER':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.data.currBoard.id]: {\r\n                        ...action.data.currBoard,\r\n                        cards: {\r\n                            ...state.boards[action.data.currBoard.id].cards,\r\n                            [action.data.currCard.id]:\r\n                                { ...state.boards[action.data.currBoard.id].cards[action.data.currCard.id], cardCover: action.data.color }\r\n                        },\r\n                    }\r\n                }\r\n            };\r\n\r\n\r\n\r\n        case 'UPDATE_CURR_LIST':\r\n            return {\r\n                ...state,\r\n                currListId: action.data\r\n            };\r\n        case 'TOGGLE_CARD_DETAILS':\r\n            return {\r\n                ...state,\r\n                isCardDetailShown: action.data\r\n            };\r\n        case 'TOGGLE_BG_SIDE':\r\n            return {\r\n                ...state,\r\n                isBgSideOpen: !state.isBgSideOpen\r\n            };\r\n        case 'TOGGLE_FAV_BOARD':\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.savedBoard.id]: {\r\n                        ...state.boards[action.savedBoard.id],\r\n                        isFav: !state.boards[action.savedBoard.id].isFav\r\n                    }\r\n                },\r\n                favBoards: [...state.favBoards, action.savedBoard.id]\r\n            };\r\n\r\n        case 'REMOVE_SAVED_BOARD':\r\n            const index = state.favBoards.findIndex((boardId) => boardId === action.boardToRemove.id)\r\n            state.favBoards.splice(index, 1)\r\n            const newFavBoards = state.favBoards\r\n            return {\r\n                ...state,\r\n                boards: {\r\n                    ...state.boards,\r\n                    [action.boardToRemove.id]: {\r\n                        ...state.boards[action.boardToRemove.id],\r\n                        isFav: !state.boards[action.boardToRemove.id].isFav\r\n                    }\r\n                },\r\n                favBoards: newFavBoards\r\n            }\r\n\r\n\r\n        case 'GET_STATE':\r\n            console.log('state:', state)\r\n            return {\r\n                ...state,\r\n\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport boardReducer from './boardReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  mainStore: boardReducer,\r\n})\r\n\r\nexport default rootReducer;","\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import history from './history';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter as Router } from 'react-router-dom';\r\nimport store from './store/store'\r\nimport { Provider } from 'react-redux'\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}